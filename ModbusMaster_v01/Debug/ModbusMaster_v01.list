
ModbusMaster_v01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005678  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08005824  08005824  00015824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a3c  08005a3c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005a3c  08005a3c  00015a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a44  08005a44  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a44  08005a44  00015a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a48  08005a48  00015a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005a4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000013e8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200013f4  200013f4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000162cc  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002e72  00000000  00000000  0003634b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001288  00000000  00000000  000391c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e66  00000000  00000000  0003a448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026818  00000000  00000000  0003b2ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016a06  00000000  00000000  00061ac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e655d  00000000  00000000  000784cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004ed0  00000000  00000000  0015ea2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  001638fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800580c 	.word	0x0800580c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	0800580c 	.word	0x0800580c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f001 fcd2 	bl	8001e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f846 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f000 f9ca 	bl	800088c <MX_GPIO_Init>
  MX_ETH_Init();
 80004f8:	f000 f8ac 	bl	8000654 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80004fc:	f000 f96e 	bl	80007dc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000500:	f000 f996 	bl	8000830 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000504:	f000 f8f4 	bl	80006f0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000508:	f000 f93e 	bl	8000788 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  UARTx_CellCommInit();
 800050c:	f000 fe42 	bl	8001194 <UARTx_CellCommInit>

  HAL_TIM_Base_Start_IT(&htim2);
 8000510:	4816      	ldr	r0, [pc, #88]	; (800056c <main+0x84>)
 8000512:	f003 fa0f 	bl	8003934 <HAL_TIM_Base_Start_IT>
  Tick_Timer_Init(&message1sTime, 1000); // 1 sn
 8000516:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800051a:	4815      	ldr	r0, [pc, #84]	; (8000570 <main+0x88>)
 800051c:	f000 fe6c 	bl	80011f8 <Tick_Timer_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (Tick_Timer_Check_Elapsed_Time(&message1sTime))
 8000520:	4813      	ldr	r0, [pc, #76]	; (8000570 <main+0x88>)
 8000522:	f000 fe9d 	bl	8001260 <Tick_Timer_Check_Elapsed_Time>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d008      	beq.n	800053e <main+0x56>
	  {
		Tick_Timer_Set_Time(&message1sTime, 1000);  // 1sn
 800052c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000530:	480f      	ldr	r0, [pc, #60]	; (8000570 <main+0x88>)
 8000532:	f000 fe6f 	bl	8001214 <Tick_Timer_Set_Time>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000536:	2180      	movs	r1, #128	; 0x80
 8000538:	480e      	ldr	r0, [pc, #56]	; (8000574 <main+0x8c>)
 800053a:	f002 fbea 	bl	8002d12 <HAL_GPIO_TogglePin>
	  }
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 800053e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000542:	480d      	ldr	r0, [pc, #52]	; (8000578 <main+0x90>)
 8000544:	f002 fbb4 	bl	8002cb0 <HAL_GPIO_ReadPin>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d009      	beq.n	8000562 <main+0x7a>
	  {
		  HAL_Delay(500);
 800054e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000552:	f001 fd11 	bl	8001f78 <HAL_Delay>
		  Modbus_Read_Input_Registers(&modbus, 5, 0, 3);
 8000556:	2303      	movs	r3, #3
 8000558:	2200      	movs	r2, #0
 800055a:	2105      	movs	r1, #5
 800055c:	4807      	ldr	r0, [pc, #28]	; (800057c <main+0x94>)
 800055e:	f001 fc41 	bl	8001de4 <Modbus_Read_Input_Registers>

	  }
	  Modbus_Master_Control(&modbus);
 8000562:	4806      	ldr	r0, [pc, #24]	; (800057c <main+0x94>)
 8000564:	f000 fee4 	bl	8001330 <Modbus_Master_Control>
	  if (Tick_Timer_Check_Elapsed_Time(&message1sTime))
 8000568:	e7da      	b.n	8000520 <main+0x38>
 800056a:	bf00      	nop
 800056c:	20000250 	.word	0x20000250
 8000570:	2000080c 	.word	0x2000080c
 8000574:	40020400 	.word	0x40020400
 8000578:	40020800 	.word	0x40020800
 800057c:	20000818 	.word	0x20000818

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	; 0x50
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0320 	add.w	r3, r7, #32
 800058a:	2230      	movs	r2, #48	; 0x30
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f005 f901 	bl	8005796 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	4b28      	ldr	r3, [pc, #160]	; (800064c <SystemClock_Config+0xcc>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ac:	4a27      	ldr	r2, [pc, #156]	; (800064c <SystemClock_Config+0xcc>)
 80005ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b2:	6413      	str	r3, [r2, #64]	; 0x40
 80005b4:	4b25      	ldr	r3, [pc, #148]	; (800064c <SystemClock_Config+0xcc>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	4b22      	ldr	r3, [pc, #136]	; (8000650 <SystemClock_Config+0xd0>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a21      	ldr	r2, [pc, #132]	; (8000650 <SystemClock_Config+0xd0>)
 80005ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <SystemClock_Config+0xd0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005dc:	2301      	movs	r3, #1
 80005de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e6:	2302      	movs	r3, #2
 80005e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005f0:	2304      	movs	r3, #4
 80005f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005f4:	23a8      	movs	r3, #168	; 0xa8
 80005f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005fc:	2307      	movs	r3, #7
 80005fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000600:	f107 0320 	add.w	r3, r7, #32
 8000604:	4618      	mov	r0, r3
 8000606:	f002 fcad 	bl	8002f64 <HAL_RCC_OscConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000610:	f000 f9fe 	bl	8000a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000614:	230f      	movs	r3, #15
 8000616:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000618:	2302      	movs	r3, #2
 800061a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000620:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000624:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000626:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2105      	movs	r1, #5
 8000632:	4618      	mov	r0, r3
 8000634:	f002 ff0e 	bl	8003454 <HAL_RCC_ClockConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800063e:	f000 f9e7 	bl	8000a10 <Error_Handler>
  }
}
 8000642:	bf00      	nop
 8000644:	3750      	adds	r7, #80	; 0x50
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40023800 	.word	0x40023800
 8000650:	40007000 	.word	0x40007000

08000654 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <MX_ETH_Init+0x84>)
 800065a:	4a20      	ldr	r2, [pc, #128]	; (80006dc <MX_ETH_Init+0x88>)
 800065c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <MX_ETH_Init+0x8c>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <MX_ETH_Init+0x8c>)
 8000666:	2280      	movs	r2, #128	; 0x80
 8000668:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <MX_ETH_Init+0x8c>)
 800066c:	22e1      	movs	r2, #225	; 0xe1
 800066e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <MX_ETH_Init+0x8c>)
 8000672:	2200      	movs	r2, #0
 8000674:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <MX_ETH_Init+0x8c>)
 8000678:	2200      	movs	r2, #0
 800067a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <MX_ETH_Init+0x8c>)
 800067e:	2200      	movs	r2, #0
 8000680:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <MX_ETH_Init+0x84>)
 8000684:	4a16      	ldr	r2, [pc, #88]	; (80006e0 <MX_ETH_Init+0x8c>)
 8000686:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000688:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <MX_ETH_Init+0x84>)
 800068a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800068e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000690:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_ETH_Init+0x84>)
 8000692:	4a14      	ldr	r2, [pc, #80]	; (80006e4 <MX_ETH_Init+0x90>)
 8000694:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <MX_ETH_Init+0x84>)
 8000698:	4a13      	ldr	r2, [pc, #76]	; (80006e8 <MX_ETH_Init+0x94>)
 800069a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800069c:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_ETH_Init+0x84>)
 800069e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80006a2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006a4:	480c      	ldr	r0, [pc, #48]	; (80006d8 <MX_ETH_Init+0x84>)
 80006a6:	f001 fe2f 	bl	8002308 <HAL_ETH_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80006b0:	f000 f9ae 	bl	8000a10 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006b4:	2238      	movs	r2, #56	; 0x38
 80006b6:	2100      	movs	r1, #0
 80006b8:	480c      	ldr	r0, [pc, #48]	; (80006ec <MX_ETH_Init+0x98>)
 80006ba:	f005 f86c 	bl	8005796 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <MX_ETH_Init+0x98>)
 80006c0:	2221      	movs	r2, #33	; 0x21
 80006c2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_ETH_Init+0x98>)
 80006c6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80006ca:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <MX_ETH_Init+0x98>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	200001a0 	.word	0x200001a0
 80006dc:	40028000 	.word	0x40028000
 80006e0:	20000b78 	.word	0x20000b78
 80006e4:	20000100 	.word	0x20000100
 80006e8:	20000060 	.word	0x20000060
 80006ec:	20000028 	.word	0x20000028

080006f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006f6:	f107 0308 	add.w	r3, r7, #8
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000704:	463b      	mov	r3, r7
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800070c:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <MX_TIM2_Init+0x94>)
 800070e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000712:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000714:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <MX_TIM2_Init+0x94>)
 8000716:	2253      	movs	r2, #83	; 0x53
 8000718:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071a:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <MX_TIM2_Init+0x94>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000720:	4b18      	ldr	r3, [pc, #96]	; (8000784 <MX_TIM2_Init+0x94>)
 8000722:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000726:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000728:	4b16      	ldr	r3, [pc, #88]	; (8000784 <MX_TIM2_Init+0x94>)
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <MX_TIM2_Init+0x94>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000734:	4813      	ldr	r0, [pc, #76]	; (8000784 <MX_TIM2_Init+0x94>)
 8000736:	f003 f8ad 	bl	8003894 <HAL_TIM_Base_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000740:	f000 f966 	bl	8000a10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000748:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800074a:	f107 0308 	add.w	r3, r7, #8
 800074e:	4619      	mov	r1, r3
 8000750:	480c      	ldr	r0, [pc, #48]	; (8000784 <MX_TIM2_Init+0x94>)
 8000752:	f003 fa4f 	bl	8003bf4 <HAL_TIM_ConfigClockSource>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800075c:	f000 f958 	bl	8000a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000760:	2300      	movs	r3, #0
 8000762:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000764:	2300      	movs	r3, #0
 8000766:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000768:	463b      	mov	r3, r7
 800076a:	4619      	mov	r1, r3
 800076c:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_TIM2_Init+0x94>)
 800076e:	f003 fc81 	bl	8004074 <HAL_TIMEx_MasterConfigSynchronization>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000778:	f000 f94a 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	3718      	adds	r7, #24
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000250 	.word	0x20000250

08000788 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 800078e:	4a12      	ldr	r2, [pc, #72]	; (80007d8 <MX_USART2_UART_Init+0x50>)
 8000790:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 8000794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000798:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007c0:	f003 fce8 	bl	8004194 <HAL_UART_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ca:	f000 f921 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000298 	.word	0x20000298
 80007d8:	40004400 	.word	0x40004400

080007dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_USART3_UART_Init+0x4c>)
 80007e2:	4a12      	ldr	r2, [pc, #72]	; (800082c <MX_USART3_UART_Init+0x50>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <MX_USART3_UART_Init+0x4c>)
 80007e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_USART3_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_USART3_UART_Init+0x4c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_USART3_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_USART3_UART_Init+0x4c>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_USART3_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_USART3_UART_Init+0x4c>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_USART3_UART_Init+0x4c>)
 8000814:	f003 fcbe 	bl	8004194 <HAL_UART_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800081e:	f000 f8f7 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200002e0 	.word	0x200002e0
 800082c:	40004800 	.word	0x40004800

08000830 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000834:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000836:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800083a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083e:	2204      	movs	r2, #4
 8000840:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000844:	2202      	movs	r2, #2
 8000846:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084a:	2200      	movs	r2, #0
 800084c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000850:	2202      	movs	r2, #2
 8000852:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000856:	2201      	movs	r2, #1
 8000858:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000868:	2201      	movs	r2, #1
 800086a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086e:	2200      	movs	r2, #0
 8000870:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000874:	f002 fa67 	bl	8002d46 <HAL_PCD_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800087e:	f000 f8c7 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000328 	.word	0x20000328

0800088c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08c      	sub	sp, #48	; 0x30
 8000890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	61bb      	str	r3, [r7, #24]
 80008a6:	4b55      	ldr	r3, [pc, #340]	; (80009fc <MX_GPIO_Init+0x170>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a54      	ldr	r2, [pc, #336]	; (80009fc <MX_GPIO_Init+0x170>)
 80008ac:	f043 0304 	orr.w	r3, r3, #4
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b52      	ldr	r3, [pc, #328]	; (80009fc <MX_GPIO_Init+0x170>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0304 	and.w	r3, r3, #4
 80008ba:	61bb      	str	r3, [r7, #24]
 80008bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
 80008c2:	4b4e      	ldr	r3, [pc, #312]	; (80009fc <MX_GPIO_Init+0x170>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a4d      	ldr	r2, [pc, #308]	; (80009fc <MX_GPIO_Init+0x170>)
 80008c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b4b      	ldr	r3, [pc, #300]	; (80009fc <MX_GPIO_Init+0x170>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d6:	617b      	str	r3, [r7, #20]
 80008d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	4b47      	ldr	r3, [pc, #284]	; (80009fc <MX_GPIO_Init+0x170>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a46      	ldr	r2, [pc, #280]	; (80009fc <MX_GPIO_Init+0x170>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b44      	ldr	r3, [pc, #272]	; (80009fc <MX_GPIO_Init+0x170>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	4b40      	ldr	r3, [pc, #256]	; (80009fc <MX_GPIO_Init+0x170>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a3f      	ldr	r2, [pc, #252]	; (80009fc <MX_GPIO_Init+0x170>)
 8000900:	f043 0302 	orr.w	r3, r3, #2
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b3d      	ldr	r3, [pc, #244]	; (80009fc <MX_GPIO_Init+0x170>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	4b39      	ldr	r3, [pc, #228]	; (80009fc <MX_GPIO_Init+0x170>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a38      	ldr	r2, [pc, #224]	; (80009fc <MX_GPIO_Init+0x170>)
 800091c:	f043 0308 	orr.w	r3, r3, #8
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b36      	ldr	r3, [pc, #216]	; (80009fc <MX_GPIO_Init+0x170>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0308 	and.w	r3, r3, #8
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b32      	ldr	r3, [pc, #200]	; (80009fc <MX_GPIO_Init+0x170>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a31      	ldr	r2, [pc, #196]	; (80009fc <MX_GPIO_Init+0x170>)
 8000938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b2f      	ldr	r3, [pc, #188]	; (80009fc <MX_GPIO_Init+0x170>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TX_RX_EN1_Pin|TX_RX_EN2_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	2130      	movs	r1, #48	; 0x30
 800094e:	482c      	ldr	r0, [pc, #176]	; (8000a00 <MX_GPIO_Init+0x174>)
 8000950:	f002 f9c6 	bl	8002ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000954:	2200      	movs	r2, #0
 8000956:	f244 0181 	movw	r1, #16513	; 0x4081
 800095a:	482a      	ldr	r0, [pc, #168]	; (8000a04 <MX_GPIO_Init+0x178>)
 800095c:	f002 f9c0 	bl	8002ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	2140      	movs	r1, #64	; 0x40
 8000964:	4828      	ldr	r0, [pc, #160]	; (8000a08 <MX_GPIO_Init+0x17c>)
 8000966:	f002 f9bb 	bl	8002ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800096a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800096e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000970:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4822      	ldr	r0, [pc, #136]	; (8000a0c <MX_GPIO_Init+0x180>)
 8000982:	f001 ffe9 	bl	8002958 <HAL_GPIO_Init>

  /*Configure GPIO pins : TX_RX_EN1_Pin TX_RX_EN2_Pin */
  GPIO_InitStruct.Pin = TX_RX_EN1_Pin|TX_RX_EN2_Pin;
 8000986:	2330      	movs	r3, #48	; 0x30
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	4818      	ldr	r0, [pc, #96]	; (8000a00 <MX_GPIO_Init+0x174>)
 800099e:	f001 ffdb 	bl	8002958 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009a2:	f244 0381 	movw	r3, #16513	; 0x4081
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	2301      	movs	r3, #1
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4619      	mov	r1, r3
 80009ba:	4812      	ldr	r0, [pc, #72]	; (8000a04 <MX_GPIO_Init+0x178>)
 80009bc:	f001 ffcc 	bl	8002958 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009c0:	2340      	movs	r3, #64	; 0x40
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	4619      	mov	r1, r3
 80009d6:	480c      	ldr	r0, [pc, #48]	; (8000a08 <MX_GPIO_Init+0x17c>)
 80009d8:	f001 ffbe 	bl	8002958 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009dc:	2380      	movs	r3, #128	; 0x80
 80009de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e0:	2300      	movs	r3, #0
 80009e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	4619      	mov	r1, r3
 80009ee:	4806      	ldr	r0, [pc, #24]	; (8000a08 <MX_GPIO_Init+0x17c>)
 80009f0:	f001 ffb2 	bl	8002958 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009f4:	bf00      	nop
 80009f6:	3730      	adds	r7, #48	; 0x30
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40020000 	.word	0x40020000
 8000a04:	40020400 	.word	0x40020400
 8000a08:	40021800 	.word	0x40021800
 8000a0c:	40020800 	.word	0x40020800

08000a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a14:	b672      	cpsid	i
}
 8000a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <Error_Handler+0x8>
	...

08000a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2a:	4a0f      	ldr	r2, [pc, #60]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a30:	6453      	str	r3, [r2, #68]	; 0x44
 8000a32:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	603b      	str	r3, [r7, #0]
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	4a08      	ldr	r2, [pc, #32]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800

08000a6c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08e      	sub	sp, #56	; 0x38
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a55      	ldr	r2, [pc, #340]	; (8000be0 <HAL_ETH_MspInit+0x174>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	f040 80a4 	bne.w	8000bd8 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a90:	2300      	movs	r3, #0
 8000a92:	623b      	str	r3, [r7, #32]
 8000a94:	4b53      	ldr	r3, [pc, #332]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a98:	4a52      	ldr	r2, [pc, #328]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000a9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa0:	4b50      	ldr	r3, [pc, #320]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000aa8:	623b      	str	r3, [r7, #32]
 8000aaa:	6a3b      	ldr	r3, [r7, #32]
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
 8000ab0:	4b4c      	ldr	r3, [pc, #304]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab4:	4a4b      	ldr	r2, [pc, #300]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000ab6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000aba:	6313      	str	r3, [r2, #48]	; 0x30
 8000abc:	4b49      	ldr	r3, [pc, #292]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ac4:	61fb      	str	r3, [r7, #28]
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61bb      	str	r3, [r7, #24]
 8000acc:	4b45      	ldr	r3, [pc, #276]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad0:	4a44      	ldr	r2, [pc, #272]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000ad2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ad6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad8:	4b42      	ldr	r3, [pc, #264]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000adc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ae0:	61bb      	str	r3, [r7, #24]
 8000ae2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
 8000ae8:	4b3e      	ldr	r3, [pc, #248]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aec:	4a3d      	ldr	r2, [pc, #244]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000aee:	f043 0304 	orr.w	r3, r3, #4
 8000af2:	6313      	str	r3, [r2, #48]	; 0x30
 8000af4:	4b3b      	ldr	r3, [pc, #236]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af8:	f003 0304 	and.w	r3, r3, #4
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b00:	2300      	movs	r3, #0
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	4b37      	ldr	r3, [pc, #220]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b08:	4a36      	ldr	r2, [pc, #216]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000b0a:	f043 0301 	orr.w	r3, r3, #1
 8000b0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b10:	4b34      	ldr	r3, [pc, #208]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	4b30      	ldr	r3, [pc, #192]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b24:	4a2f      	ldr	r2, [pc, #188]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000b26:	f043 0302 	orr.w	r3, r3, #2
 8000b2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2c:	4b2d      	ldr	r3, [pc, #180]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b30:	f003 0302 	and.w	r3, r3, #2
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	4b29      	ldr	r3, [pc, #164]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b40:	4a28      	ldr	r2, [pc, #160]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000b42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b46:	6313      	str	r3, [r2, #48]	; 0x30
 8000b48:	4b26      	ldr	r3, [pc, #152]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b54:	2332      	movs	r3, #50	; 0x32
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b60:	2303      	movs	r3, #3
 8000b62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b64:	230b      	movs	r3, #11
 8000b66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	481e      	ldr	r0, [pc, #120]	; (8000be8 <HAL_ETH_MspInit+0x17c>)
 8000b70:	f001 fef2 	bl	8002958 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b74:	2386      	movs	r3, #134	; 0x86
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b80:	2303      	movs	r3, #3
 8000b82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b84:	230b      	movs	r3, #11
 8000b86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4817      	ldr	r0, [pc, #92]	; (8000bec <HAL_ETH_MspInit+0x180>)
 8000b90:	f001 fee2 	bl	8002958 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ba6:	230b      	movs	r3, #11
 8000ba8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bae:	4619      	mov	r1, r3
 8000bb0:	480f      	ldr	r0, [pc, #60]	; (8000bf0 <HAL_ETH_MspInit+0x184>)
 8000bb2:	f001 fed1 	bl	8002958 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000bb6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bc8:	230b      	movs	r3, #11
 8000bca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4808      	ldr	r0, [pc, #32]	; (8000bf4 <HAL_ETH_MspInit+0x188>)
 8000bd4:	f001 fec0 	bl	8002958 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000bd8:	bf00      	nop
 8000bda:	3738      	adds	r7, #56	; 0x38
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40028000 	.word	0x40028000
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40020800 	.word	0x40020800
 8000bec:	40020000 	.word	0x40020000
 8000bf0:	40020400 	.word	0x40020400
 8000bf4:	40021800 	.word	0x40021800

08000bf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c08:	d115      	bne.n	8000c36 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <HAL_TIM_Base_MspInit+0x48>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	4a0b      	ldr	r2, [pc, #44]	; (8000c40 <HAL_TIM_Base_MspInit+0x48>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <HAL_TIM_Base_MspInit+0x48>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2100      	movs	r1, #0
 8000c2a:	201c      	movs	r0, #28
 8000c2c:	f001 faa3 	bl	8002176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c30:	201c      	movs	r0, #28
 8000c32:	f001 fabc 	bl	80021ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c36:	bf00      	nop
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023800 	.word	0x40023800

08000c44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08c      	sub	sp, #48	; 0x30
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a45      	ldr	r2, [pc, #276]	; (8000d78 <HAL_UART_MspInit+0x134>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d152      	bne.n	8000d0c <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	61bb      	str	r3, [r7, #24]
 8000c6a:	4b44      	ldr	r3, [pc, #272]	; (8000d7c <HAL_UART_MspInit+0x138>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	4a43      	ldr	r2, [pc, #268]	; (8000d7c <HAL_UART_MspInit+0x138>)
 8000c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c74:	6413      	str	r3, [r2, #64]	; 0x40
 8000c76:	4b41      	ldr	r3, [pc, #260]	; (8000d7c <HAL_UART_MspInit+0x138>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c7e:	61bb      	str	r3, [r7, #24]
 8000c80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
 8000c86:	4b3d      	ldr	r3, [pc, #244]	; (8000d7c <HAL_UART_MspInit+0x138>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a3c      	ldr	r2, [pc, #240]	; (8000d7c <HAL_UART_MspInit+0x138>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b3a      	ldr	r3, [pc, #232]	; (8000d7c <HAL_UART_MspInit+0x138>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	4b36      	ldr	r3, [pc, #216]	; (8000d7c <HAL_UART_MspInit+0x138>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a35      	ldr	r2, [pc, #212]	; (8000d7c <HAL_UART_MspInit+0x138>)
 8000ca8:	f043 0308 	orr.w	r3, r3, #8
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b33      	ldr	r3, [pc, #204]	; (8000d7c <HAL_UART_MspInit+0x138>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0308 	and.w	r3, r3, #8
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cba:	2308      	movs	r3, #8
 8000cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cca:	2307      	movs	r3, #7
 8000ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cce:	f107 031c 	add.w	r3, r7, #28
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	482a      	ldr	r0, [pc, #168]	; (8000d80 <HAL_UART_MspInit+0x13c>)
 8000cd6:	f001 fe3f 	bl	8002958 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000cda:	2320      	movs	r3, #32
 8000cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cea:	2307      	movs	r3, #7
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cee:	f107 031c 	add.w	r3, r7, #28
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4823      	ldr	r0, [pc, #140]	; (8000d84 <HAL_UART_MspInit+0x140>)
 8000cf6:	f001 fe2f 	bl	8002958 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2026      	movs	r0, #38	; 0x26
 8000d00:	f001 fa39 	bl	8002176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d04:	2026      	movs	r0, #38	; 0x26
 8000d06:	f001 fa52 	bl	80021ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d0a:	e031      	b.n	8000d70 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a1d      	ldr	r2, [pc, #116]	; (8000d88 <HAL_UART_MspInit+0x144>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d12c      	bne.n	8000d70 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <HAL_UART_MspInit+0x138>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	4a17      	ldr	r2, [pc, #92]	; (8000d7c <HAL_UART_MspInit+0x138>)
 8000d20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d24:	6413      	str	r3, [r2, #64]	; 0x40
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <HAL_UART_MspInit+0x138>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <HAL_UART_MspInit+0x138>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a10      	ldr	r2, [pc, #64]	; (8000d7c <HAL_UART_MspInit+0x138>)
 8000d3c:	f043 0308 	orr.w	r3, r3, #8
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <HAL_UART_MspInit+0x138>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0308 	and.w	r3, r3, #8
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d60:	2307      	movs	r3, #7
 8000d62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d64:	f107 031c 	add.w	r3, r7, #28
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4806      	ldr	r0, [pc, #24]	; (8000d84 <HAL_UART_MspInit+0x140>)
 8000d6c:	f001 fdf4 	bl	8002958 <HAL_GPIO_Init>
}
 8000d70:	bf00      	nop
 8000d72:	3730      	adds	r7, #48	; 0x30
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40004400 	.word	0x40004400
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020000 	.word	0x40020000
 8000d84:	40020c00 	.word	0x40020c00
 8000d88:	40004800 	.word	0x40004800

08000d8c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	; 0x28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000dac:	d13f      	bne.n	8000e2e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	4b21      	ldr	r3, [pc, #132]	; (8000e38 <HAL_PCD_MspInit+0xac>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a20      	ldr	r2, [pc, #128]	; (8000e38 <HAL_PCD_MspInit+0xac>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <HAL_PCD_MspInit+0xac>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000dca:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ddc:	230a      	movs	r3, #10
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4619      	mov	r1, r3
 8000de6:	4815      	ldr	r0, [pc, #84]	; (8000e3c <HAL_PCD_MspInit+0xb0>)
 8000de8:	f001 fdb6 	bl	8002958 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000dec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000dfa:	f107 0314 	add.w	r3, r7, #20
 8000dfe:	4619      	mov	r1, r3
 8000e00:	480e      	ldr	r0, [pc, #56]	; (8000e3c <HAL_PCD_MspInit+0xb0>)
 8000e02:	f001 fda9 	bl	8002958 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <HAL_PCD_MspInit+0xac>)
 8000e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e0a:	4a0b      	ldr	r2, [pc, #44]	; (8000e38 <HAL_PCD_MspInit+0xac>)
 8000e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e10:	6353      	str	r3, [r2, #52]	; 0x34
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <HAL_PCD_MspInit+0xac>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1a:	4a07      	ldr	r2, [pc, #28]	; (8000e38 <HAL_PCD_MspInit+0xac>)
 8000e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e20:	6453      	str	r3, [r2, #68]	; 0x44
 8000e22:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <HAL_PCD_MspInit+0xac>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e2e:	bf00      	nop
 8000e30:	3728      	adds	r7, #40	; 0x28
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020000 	.word	0x40020000

08000e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e44:	e7fe      	b.n	8000e44 <NMI_Handler+0x4>

08000e46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <HardFault_Handler+0x4>

08000e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <MemManage_Handler+0x4>

08000e52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <BusFault_Handler+0x4>

08000e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <UsageFault_Handler+0x4>

08000e5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e8c:	f001 f854 	bl	8001f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	msTick++;
 8000e98:	4b04      	ldr	r3, [pc, #16]	; (8000eac <TIM2_IRQHandler+0x18>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	4a03      	ldr	r2, [pc, #12]	; (8000eac <TIM2_IRQHandler+0x18>)
 8000ea0:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ea2:	4803      	ldr	r0, [pc, #12]	; (8000eb0 <TIM2_IRQHandler+0x1c>)
 8000ea4:	f002 fdb6 	bl	8003a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000b80 	.word	0x20000b80
 8000eb0:	20000250 	.word	0x20000250

08000eb4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	char ch;

	if (__HAL_UART_GET_FLAG(&huart2,UART_FLAG_RXNE))
 8000eba:	4b2c      	ldr	r3, [pc, #176]	; (8000f6c <USART2_IRQHandler+0xb8>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 0320 	and.w	r3, r3, #32
 8000ec4:	2b20      	cmp	r3, #32
 8000ec6:	d121      	bne.n	8000f0c <USART2_IRQHandler+0x58>
	{
		ch = (uint8_t)(huart2.Instance->DR & (uint8_t)0x00FF);
 8000ec8:	4b28      	ldr	r3, [pc, #160]	; (8000f6c <USART2_IRQHandler+0xb8>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	71fb      	strb	r3, [r7, #7]

		if(RingBuffer_Add(usart2In,ch) == false)
 8000ed0:	4b27      	ldr	r3, [pc, #156]	; (8000f70 <USART2_IRQHandler+0xbc>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	79fa      	ldrb	r2, [r7, #7]
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f000 f8d6 	bl	800108a <RingBuffer_Add>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	f083 0301 	eor.w	r3, r3, #1
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d00b      	beq.n	8000f02 <USART2_IRQHandler+0x4e>
		{
			RingBuffer_Subtract(usart2In);
 8000eea:	4b21      	ldr	r3, [pc, #132]	; (8000f70 <USART2_IRQHandler+0xbc>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 f8f8 	bl	80010e4 <RingBuffer_Subtract>
			RingBuffer_Add(usart2In, ch);
 8000ef4:	4b1e      	ldr	r3, [pc, #120]	; (8000f70 <USART2_IRQHandler+0xbc>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	79fa      	ldrb	r2, [r7, #7]
 8000efa:	4611      	mov	r1, r2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f000 f8c4 	bl	800108a <RingBuffer_Add>
		}

		__HAL_UART_CLEAR_FLAG(&huart2,UART_FLAG_RXNE);
 8000f02:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <USART2_IRQHandler+0xb8>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f06f 0220 	mvn.w	r2, #32
 8000f0a:	601a      	str	r2, [r3, #0]
	}

	if(huart2.Instance->SR & UART_TX_IT)
 8000f0c:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <USART2_IRQHandler+0xb8>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d021      	beq.n	8000f5e <USART2_IRQHandler+0xaa>
	{
		int check;

		check = RingBuffer_Subtract(usart2Out);
 8000f1a:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <USART2_IRQHandler+0xc0>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 f8e0 	bl	80010e4 <RingBuffer_Subtract>
 8000f24:	6038      	str	r0, [r7, #0]

		if(check > -1)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	db03      	blt.n	8000f34 <USART2_IRQHandler+0x80>
		{
			huart2.Instance->DR = check;
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <USART2_IRQHandler+0xb8>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	683a      	ldr	r2, [r7, #0]
 8000f32:	605a      	str	r2, [r3, #4]
		}

		if(RingBuffer_Is_Empty(usart2Out))
 8000f34:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <USART2_IRQHandler+0xc0>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f000 f871 	bl	8001020 <RingBuffer_Is_Empty>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d00c      	beq.n	8000f5e <USART2_IRQHandler+0xaa>
		{
			__HAL_UART_CLEAR_FLAG(&huart2 , UART_FLAG_TC);
 8000f44:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <USART2_IRQHandler+0xb8>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000f4c:	601a      	str	r2, [r3, #0]
			__HAL_UART_DISABLE_IT(&huart2 , UART_IT_TXE);
 8000f4e:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <USART2_IRQHandler+0xb8>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	68da      	ldr	r2, [r3, #12]
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <USART2_IRQHandler+0xb8>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f5c:	60da      	str	r2, [r3, #12]
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f5e:	4803      	ldr	r0, [pc, #12]	; (8000f6c <USART2_IRQHandler+0xb8>)
 8000f60:	f003 f9f4 	bl	800434c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000298 	.word	0x20000298
 8000f70:	20000b84 	.word	0x20000b84
 8000f74:	20000b88 	.word	0x20000b88

08000f78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <SystemInit+0x20>)
 8000f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f82:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <SystemInit+0x20>)
 8000f84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fa0:	f7ff ffea 	bl	8000f78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fa4:	480c      	ldr	r0, [pc, #48]	; (8000fd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fa6:	490d      	ldr	r1, [pc, #52]	; (8000fdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fa8:	4a0d      	ldr	r2, [pc, #52]	; (8000fe0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fac:	e002      	b.n	8000fb4 <LoopCopyDataInit>

08000fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fb2:	3304      	adds	r3, #4

08000fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb8:	d3f9      	bcc.n	8000fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fba:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fbc:	4c0a      	ldr	r4, [pc, #40]	; (8000fe8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc0:	e001      	b.n	8000fc6 <LoopFillZerobss>

08000fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc4:	3204      	adds	r2, #4

08000fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc8:	d3fb      	bcc.n	8000fc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fca:	f004 fbed 	bl	80057a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fce:	f7ff fa8b 	bl	80004e8 <main>
  bx  lr    
 8000fd2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fd4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fdc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fe0:	08005a4c 	.word	0x08005a4c
  ldr r2, =_sbss
 8000fe4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fe8:	200013f4 	.word	0x200013f4

08000fec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fec:	e7fe      	b.n	8000fec <ADC_IRQHandler>

08000fee <RingBuffer_Init>:
#include "RingBuffer.h"



void RingBuffer_Init(RingBuffer_t *pRingBuffer , uint8_t *Buffer , uint16_t length)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b085      	sub	sp, #20
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	60f8      	str	r0, [r7, #12]
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	80fb      	strh	r3, [r7, #6]
	pRingBuffer->writePoint = 0;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2200      	movs	r2, #0
 8001000:	605a      	str	r2, [r3, #4]
	pRingBuffer->readPoint  = 0;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
	pRingBuffer->pBuffer    = Buffer;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	601a      	str	r2, [r3, #0]
	pRingBuffer->length		= length;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	88fa      	ldrh	r2, [r7, #6]
 8001012:	819a      	strh	r2, [r3, #12]

}
 8001014:	bf00      	nop
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <RingBuffer_Is_Empty>:


bool RingBuffer_Is_Empty(RingBuffer_t *pRingBuffer)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

	return(pRingBuffer->writePoint == pRingBuffer->readPoint) ? true : false;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685a      	ldr	r2, [r3, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	429a      	cmp	r2, r3
 8001032:	bf0c      	ite	eq
 8001034:	2301      	moveq	r3, #1
 8001036:	2300      	movne	r3, #0
 8001038:	b2db      	uxtb	r3, r3
}
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <RingBuffer_Is_Fully>:

bool RingBuffer_Is_Fully(RingBuffer_t *pRingBuffer)
{
 8001046:	b480      	push	{r7}
 8001048:	b085      	sub	sp, #20
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
	int div = (pRingBuffer->writePoint - pRingBuffer->readPoint);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	60fb      	str	r3, [r7, #12]

	if(div < 0) div = pRingBuffer->length + div;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2b00      	cmp	r3, #0
 800105e:	da05      	bge.n	800106c <RingBuffer_Is_Fully+0x26>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	899b      	ldrh	r3, [r3, #12]
 8001064:	461a      	mov	r2, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	4413      	add	r3, r2
 800106a:	60fb      	str	r3, [r7, #12]

	return(div == (pRingBuffer->length - 1)) ? true : false;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	899b      	ldrh	r3, [r3, #12]
 8001070:	3b01      	subs	r3, #1
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	429a      	cmp	r2, r3
 8001076:	bf0c      	ite	eq
 8001078:	2301      	moveq	r3, #1
 800107a:	2300      	movne	r3, #0
 800107c:	b2db      	uxtb	r3, r3
}
 800107e:	4618      	mov	r0, r3
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <RingBuffer_Add>:

bool RingBuffer_Add(RingBuffer_t *pRingBuffer , unsigned char ch)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b084      	sub	sp, #16
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
 8001092:	460b      	mov	r3, r1
 8001094:	70fb      	strb	r3, [r7, #3]
	bool retVal = false;
 8001096:	2300      	movs	r3, #0
 8001098:	73fb      	strb	r3, [r7, #15]

	if(!RingBuffer_Is_Fully(pRingBuffer))
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff ffd3 	bl	8001046 <RingBuffer_Is_Fully>
 80010a0:	4603      	mov	r3, r0
 80010a2:	f083 0301 	eor.w	r3, r3, #1
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d016      	beq.n	80010da <RingBuffer_Add+0x50>
	{
		pRingBuffer->pBuffer[pRingBuffer->writePoint] = ch;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	4413      	add	r3, r2
 80010b6:	78fa      	ldrb	r2, [r7, #3]
 80010b8:	701a      	strb	r2, [r3, #0]
		pRingBuffer->writePoint++;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	1c5a      	adds	r2, r3, #1
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	605a      	str	r2, [r3, #4]

		if(pRingBuffer->writePoint == pRingBuffer->length) pRingBuffer->writePoint = 0;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	8992      	ldrh	r2, [r2, #12]
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d102      	bne.n	80010d6 <RingBuffer_Add+0x4c>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	605a      	str	r2, [r3, #4]

		retVal = true;
 80010d6:	2301      	movs	r3, #1
 80010d8:	73fb      	strb	r3, [r7, #15]

	}

	return retVal;
 80010da:	7bfb      	ldrb	r3, [r7, #15]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <RingBuffer_Subtract>:

int RingBuffer_Subtract(RingBuffer_t *pRingBuffer)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	int ch = -1;
 80010ec:	f04f 33ff 	mov.w	r3, #4294967295
 80010f0:	60fb      	str	r3, [r7, #12]

	if (!RingBuffer_Is_Empty(pRingBuffer))
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ff94 	bl	8001020 <RingBuffer_Is_Empty>
 80010f8:	4603      	mov	r3, r0
 80010fa:	f083 0301 	eor.w	r3, r3, #1
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2b00      	cmp	r3, #0
 8001102:	d014      	beq.n	800112e <RingBuffer_Subtract+0x4a>
	{
		ch = pRingBuffer->pBuffer[pRingBuffer->readPoint];
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	4413      	add	r3, r2
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	60fb      	str	r3, [r7, #12]
		pRingBuffer->readPoint++;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	1c5a      	adds	r2, r3, #1
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	609a      	str	r2, [r3, #8]

		if(pRingBuffer->readPoint == pRingBuffer->length)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	8992      	ldrh	r2, [r2, #12]
 8001124:	4293      	cmp	r3, r2
 8001126:	d102      	bne.n	800112e <RingBuffer_Subtract+0x4a>
		{
			pRingBuffer->readPoint = 0;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
		}
	}

	return ch;
 800112e:	68fb      	ldr	r3, [r7, #12]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <Ring_Buffer_Clear>:

void Ring_Buffer_Clear(RingBuffer_t *pRingBuffer)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	pRingBuffer->writePoint = 0;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	605a      	str	r2, [r3, #4]
	pRingBuffer->readPoint  = 0;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]

}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <UARTx_Init>:
RingBuffer_t				*usart2Out;



void UARTx_Init(Uart_Comm_t *uart)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	if (uart->huart == &huart2)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a08      	ldr	r2, [pc, #32]	; (8001188 <UARTx_Init+0x30>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d107      	bne.n	800117a <UARTx_Init+0x22>
	{
		usart2In = uart->ringBufferIn;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	4a07      	ldr	r2, [pc, #28]	; (800118c <UARTx_Init+0x34>)
 8001170:	6013      	str	r3, [r2, #0]
		usart2Out = uart->ringBufferOut;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	4a06      	ldr	r2, [pc, #24]	; (8001190 <UARTx_Init+0x38>)
 8001178:	6013      	str	r3, [r2, #0]
	}

}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	20000298 	.word	0x20000298
 800118c:	20000b84 	.word	0x20000b84
 8001190:	20000b88 	.word	0x20000b88

08001194 <UARTx_CellCommInit>:
Uart_Comm_t		uartComm;

extern UART_HandleTypeDef huart2;

void UARTx_CellCommInit(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0

	//Ring Buffer Start
	RingBuffer_Init(&usart2_InRb, usart2_inRingBuffer, BUFF_SIZE);
 8001198:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800119c:	4910      	ldr	r1, [pc, #64]	; (80011e0 <UARTx_CellCommInit+0x4c>)
 800119e:	4811      	ldr	r0, [pc, #68]	; (80011e4 <UARTx_CellCommInit+0x50>)
 80011a0:	f7ff ff25 	bl	8000fee <RingBuffer_Init>
	RingBuffer_Init(&usart2_OutRb, usart2_outRingBuffer, BUFF_SIZE);
 80011a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011a8:	490f      	ldr	r1, [pc, #60]	; (80011e8 <UARTx_CellCommInit+0x54>)
 80011aa:	4810      	ldr	r0, [pc, #64]	; (80011ec <UARTx_CellCommInit+0x58>)
 80011ac:	f7ff ff1f 	bl	8000fee <RingBuffer_Init>
	//Uart Start
	uartComm.huart = &huart2;
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <UARTx_CellCommInit+0x5c>)
 80011b2:	4a10      	ldr	r2, [pc, #64]	; (80011f4 <UARTx_CellCommInit+0x60>)
 80011b4:	601a      	str	r2, [r3, #0]
	uartComm.ringBufferIn = &usart2_InRb;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <UARTx_CellCommInit+0x5c>)
 80011b8:	4a0a      	ldr	r2, [pc, #40]	; (80011e4 <UARTx_CellCommInit+0x50>)
 80011ba:	605a      	str	r2, [r3, #4]
	uartComm.ringBufferOut = &usart2_OutRb;
 80011bc:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <UARTx_CellCommInit+0x5c>)
 80011be:	4a0b      	ldr	r2, [pc, #44]	; (80011ec <UARTx_CellCommInit+0x58>)
 80011c0:	609a      	str	r2, [r3, #8]

	UARTx_Init(&uartComm);
 80011c2:	480b      	ldr	r0, [pc, #44]	; (80011f0 <UARTx_CellCommInit+0x5c>)
 80011c4:	f7ff ffc8 	bl	8001158 <UARTx_Init>

	__HAL_UART_ENABLE_IT(uartComm.huart,UART_IT_RXNE);
 80011c8:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <UARTx_CellCommInit+0x5c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	68da      	ldr	r2, [r3, #12]
 80011d0:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <UARTx_CellCommInit+0x5c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f042 0220 	orr.w	r2, r2, #32
 80011da:	60da      	str	r2, [r3, #12]

}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000b9c 	.word	0x20000b9c
 80011e4:	20000b8c 	.word	0x20000b8c
 80011e8:	20000fac 	.word	0x20000fac
 80011ec:	20000f9c 	.word	0x20000f9c
 80011f0:	200013ac 	.word	0x200013ac
 80011f4:	20000298 	.word	0x20000298

080011f8 <Tick_Timer_Init>:

extern uint32_t msTick;


void Tick_Timer_Init(Tick_Time_t *time , uint32_t intervalMs)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]

	Tick_Timer_Set_Time(time , intervalMs);
 8001202:	6839      	ldr	r1, [r7, #0]
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f000 f805 	bl	8001214 <Tick_Timer_Set_Time>

}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <Tick_Timer_Set_Time>:


void Tick_Timer_Set_Time(Tick_Time_t *time , uint32_t intervalMs)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]

	time->activated = true;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2201      	movs	r2, #1
 8001222:	721a      	strb	r2, [r3, #8]
	time->interval = intervalMs;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	683a      	ldr	r2, [r7, #0]
 8001228:	605a      	str	r2, [r3, #4]
	time->startTick = msTick;
 800122a:	4b05      	ldr	r3, [pc, #20]	; (8001240 <Tick_Timer_Set_Time+0x2c>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	601a      	str	r2, [r3, #0]

}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000b80 	.word	0x20000b80

08001244 <Tick_Timer_Stop_Time>:

void Tick_Timer_Stop_Time(Tick_Time_t *time)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]

	time->activated = false;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	721a      	strb	r2, [r3, #8]

}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <Tick_Timer_Check_Elapsed_Time>:

bool Tick_Timer_Check_Elapsed_Time(Tick_Time_t *time)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	uint32_t currentTick;

	if(time->activated)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	7a1b      	ldrb	r3, [r3, #8]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d022      	beq.n	80012b6 <Tick_Timer_Check_Elapsed_Time+0x56>
	{
		currentTick = msTick;
 8001270:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <Tick_Timer_Check_Elapsed_Time+0x64>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	60fb      	str	r3, [r7, #12]

		if (time->startTick <= currentTick)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	429a      	cmp	r2, r3
 800127e:	d30c      	bcc.n	800129a <Tick_Timer_Check_Elapsed_Time+0x3a>
		{
			if(currentTick - time->startTick >= time->interval)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	68fa      	ldr	r2, [r7, #12]
 8001286:	1ad2      	subs	r2, r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	429a      	cmp	r2, r3
 800128e:	d312      	bcc.n	80012b6 <Tick_Timer_Check_Elapsed_Time+0x56>
			{
				time->activated = false;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	721a      	strb	r2, [r3, #8]
				return true;
 8001296:	2301      	movs	r3, #1
 8001298:	e00e      	b.n	80012b8 <Tick_Timer_Check_Elapsed_Time+0x58>
			}

		}
		else
		{
			if((0xFFFFFFFF - (time->startTick - currentTick)) >= time->interval)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	43da      	mvns	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d304      	bcc.n	80012b6 <Tick_Timer_Check_Elapsed_Time+0x56>
			{
				time->activated = false;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	721a      	strb	r2, [r3, #8]
				return true;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e000      	b.n	80012b8 <Tick_Timer_Check_Elapsed_Time+0x58>
			}

		}
	}

	return false;
 80012b6:	2300      	movs	r3, #0

}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	20000b80 	.word	0x20000b80

080012c8 <crc16_calculateWithLookupTable>:
0x43, 0x83, 0x41, 0x81, 0x80, 0x40
} ;


uint16_t crc16_calculateWithLookupTable(uint8_t *buffer , uint16_t length)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	807b      	strh	r3, [r7, #2]
    uint8_t crcHi = 0xFF;
 80012d4:	23ff      	movs	r3, #255	; 0xff
 80012d6:	73fb      	strb	r3, [r7, #15]
    uint8_t crcLo = 0xFF;
 80012d8:	23ff      	movs	r3, #255	; 0xff
 80012da:	73bb      	strb	r3, [r7, #14]
    uint8_t index;

    while(length--)
 80012dc:	e010      	b.n	8001300 <crc16_calculateWithLookupTable+0x38>
    {
        index = crcLo ^ *buffer++;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	1c5a      	adds	r2, r3, #1
 80012e2:	607a      	str	r2, [r7, #4]
 80012e4:	781a      	ldrb	r2, [r3, #0]
 80012e6:	7bbb      	ldrb	r3, [r7, #14]
 80012e8:	4053      	eors	r3, r2
 80012ea:	737b      	strb	r3, [r7, #13]
        crcLo = crcHi ^ table_crc_hi[index];
 80012ec:	7b7b      	ldrb	r3, [r7, #13]
 80012ee:	4a0e      	ldr	r2, [pc, #56]	; (8001328 <crc16_calculateWithLookupTable+0x60>)
 80012f0:	5cd2      	ldrb	r2, [r2, r3]
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	4053      	eors	r3, r2
 80012f6:	73bb      	strb	r3, [r7, #14]
        crcHi = table_crc_lo[index];
 80012f8:	7b7b      	ldrb	r3, [r7, #13]
 80012fa:	4a0c      	ldr	r2, [pc, #48]	; (800132c <crc16_calculateWithLookupTable+0x64>)
 80012fc:	5cd3      	ldrb	r3, [r2, r3]
 80012fe:	73fb      	strb	r3, [r7, #15]
    while(length--)
 8001300:	887b      	ldrh	r3, [r7, #2]
 8001302:	1e5a      	subs	r2, r3, #1
 8001304:	807a      	strh	r2, [r7, #2]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1e9      	bne.n	80012de <crc16_calculateWithLookupTable+0x16>

    }

    return (crcHi << 8) | crcLo;
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	021b      	lsls	r3, r3, #8
 800130e:	b21a      	sxth	r2, r3
 8001310:	7bbb      	ldrb	r3, [r7, #14]
 8001312:	b21b      	sxth	r3, r3
 8001314:	4313      	orrs	r3, r2
 8001316:	b21b      	sxth	r3, r3
 8001318:	b29b      	uxth	r3, r3


}
 800131a:	4618      	mov	r0, r3
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	0800583c 	.word	0x0800583c
 800132c:	0800593c 	.word	0x0800593c

08001330 <Modbus_Master_Control>:
uint8_t girisDurum1,girisDurum2,girisDurum3,girisDurum4,girisDurum5,komut_durum=0;
uint16_t analogValue[5];


void Modbus_Master_Control(Modbus_t *modbus)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	switch (modbus->State)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 335d 	ldrb.w	r3, [r3, #861]	; 0x35d
 800133e:	2b04      	cmp	r3, #4
 8001340:	f200 84f9 	bhi.w	8001d36 <Modbus_Master_Control+0xa06>
 8001344:	a201      	add	r2, pc, #4	; (adr r2, 800134c <Modbus_Master_Control+0x1c>)
 8001346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800134a:	bf00      	nop
 800134c:	08001361 	.word	0x08001361
 8001350:	0800139d 	.word	0x0800139d
 8001354:	08001983 	.word	0x08001983
 8001358:	08001a05 	.word	0x08001a05
 800135c:	08001d21 	.word	0x08001d21
	{
		case Idle:
			// Bosta Durumu: Mesaj gondermeye hazir hale gelecek
			if((modbus->TxMessage.NewSendMessageStatus) && Tick_Timer_Check_Elapsed_Time(&idleTime))
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8001366:	2b00      	cmp	r3, #0
 8001368:	f000 84e7 	beq.w	8001d3a <Modbus_Master_Control+0xa0a>
 800136c:	48b0      	ldr	r0, [pc, #704]	; (8001630 <Modbus_Master_Control+0x300>)
 800136e:	f7ff ff77 	bl	8001260 <Tick_Timer_Check_Elapsed_Time>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	f000 84e0 	beq.w	8001d3a <Modbus_Master_Control+0xa0a>
			{

				// bir mesaj gonderilmeye hazir
				modbus->TxMessage.NewSendMessageStatus = false;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
				modbus->State					= Send_Request;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 235d 	strb.w	r2, [r3, #861]	; 0x35d
				modbus->TxMessage.TxIndex		= 0;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 22fc 	strb.w	r2, [r3, #764]	; 0x2fc
				Tick_Timer_Stop_Time(&idleTime);
 8001392:	48a7      	ldr	r0, [pc, #668]	; (8001630 <Modbus_Master_Control+0x300>)
 8001394:	f7ff ff56 	bl	8001244 <Tick_Timer_Stop_Time>

			}


			break;
 8001398:	f000 bccf 	b.w	8001d3a <Modbus_Master_Control+0xa0a>

		case Send_Request:
			// Sorgu talebi gonder
			// ADU
			modbus->TxMessage.TxData[modbus->TxMessage.TxIndex++] = modbus->TxMessage.SlaveAddress;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 80013a2:	1c5a      	adds	r2, r3, #1
 80013a4:	b2d1      	uxtb	r1, r2
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	f882 12fc 	strb.w	r1, [r2, #764]	; 0x2fc
 80013ac:	4619      	mov	r1, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	781a      	ldrb	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	440b      	add	r3, r1
 80013b6:	71da      	strb	r2, [r3, #7]
			modbus->TxMessage.TxData[modbus->TxMessage.TxIndex++] = modbus->TxMessage.FunctionCode;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 80013be:	1c5a      	adds	r2, r3, #1
 80013c0:	b2d1      	uxtb	r1, r2
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	f882 12fc 	strb.w	r1, [r2, #764]	; 0x2fc
 80013c8:	4619      	mov	r1, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	785a      	ldrb	r2, [r3, #1]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	440b      	add	r3, r1
 80013d2:	71da      	strb	r2, [r3, #7]


			switch(modbus->TxMessage.FunctionCode)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	785b      	ldrb	r3, [r3, #1]
 80013d8:	3b01      	subs	r3, #1
 80013da:	2b0f      	cmp	r3, #15
 80013dc:	f200 8286 	bhi.w	80018ec <Modbus_Master_Control+0x5bc>
 80013e0:	a201      	add	r2, pc, #4	; (adr r2, 80013e8 <Modbus_Master_Control+0xb8>)
 80013e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e6:	bf00      	nop
 80013e8:	08001429 	.word	0x08001429
 80013ec:	080014ab 	.word	0x080014ab
 80013f0:	0800152d 	.word	0x0800152d
 80013f4:	080015af 	.word	0x080015af
 80013f8:	08001635 	.word	0x08001635
 80013fc:	080016bb 	.word	0x080016bb
 8001400:	080018ed 	.word	0x080018ed
 8001404:	080018ed 	.word	0x080018ed
 8001408:	080018ed 	.word	0x080018ed
 800140c:	080018ed 	.word	0x080018ed
 8001410:	080018ed 	.word	0x080018ed
 8001414:	080018ed 	.word	0x080018ed
 8001418:	080018ed 	.word	0x080018ed
 800141c:	080018ed 	.word	0x080018ed
 8001420:	08001741 	.word	0x08001741
 8001424:	080017e3 	.word	0x080017e3
			{
			case Read_Coil_Status:
				modbus->TxMessage.TxData[modbus->TxMessage.TxIndex++] = MSB(modbus->TxMessage.StartAddrress);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	885b      	ldrh	r3, [r3, #2]
 800142c:	0a1b      	lsrs	r3, r3, #8
 800142e:	b298      	uxth	r0, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 8001436:	1c5a      	adds	r2, r3, #1
 8001438:	b2d1      	uxtb	r1, r2
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	f882 12fc 	strb.w	r1, [r2, #764]	; 0x2fc
 8001440:	4619      	mov	r1, r3
 8001442:	b2c2      	uxtb	r2, r0
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	440b      	add	r3, r1
 8001448:	71da      	strb	r2, [r3, #7]
				modbus->TxMessage.TxData[modbus->TxMessage.TxIndex++] = LSB(modbus->TxMessage.StartAddrress);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	8858      	ldrh	r0, [r3, #2]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 8001454:	1c5a      	adds	r2, r3, #1
 8001456:	b2d1      	uxtb	r1, r2
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	f882 12fc 	strb.w	r1, [r2, #764]	; 0x2fc
 800145e:	4619      	mov	r1, r3
 8001460:	b2c2      	uxtb	r2, r0
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	440b      	add	r3, r1
 8001466:	71da      	strb	r2, [r3, #7]
				modbus->TxMessage.TxData[modbus->TxMessage.TxIndex++] = MSB(modbus->TxMessage.NumOfRegisters);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	889b      	ldrh	r3, [r3, #4]
 800146c:	0a1b      	lsrs	r3, r3, #8
 800146e:	b298      	uxth	r0, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 8001476:	1c5a      	adds	r2, r3, #1
 8001478:	b2d1      	uxtb	r1, r2
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	f882 12fc 	strb.w	r1, [r2, #764]	; 0x2fc
 8001480:	4619      	mov	r1, r3
 8001482:	b2c2      	uxtb	r2, r0
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	440b      	add	r3, r1
 8001488:	71da      	strb	r2, [r3, #7]
				modbus->TxMessage.TxData[modbus->TxMessage.TxIndex++] = LSB(modbus->TxMessage.NumOfRegisters);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	8898      	ldrh	r0, [r3, #4]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 8001494:	1c5a      	adds	r2, r3, #1
 8001496:	b2d1      	uxtb	r1, r2
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	f882 12fc 	strb.w	r1, [r2, #764]	; 0x2fc
 800149e:	4619      	mov	r1, r3
 80014a0:	b2c2      	uxtb	r2, r0
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	440b      	add	r3, r1
 80014a6:	71da      	strb	r2, [r3, #7]
				break;
 80014a8:	e220      	b.n	80018ec <Modbus_Master_Control+0x5bc>

			case Read_Input_Status:
				modbus->TxMessage.TxData[modbus->TxMessage.TxIndex++] = MSB(modbus->TxMessage.StartAddrress);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	885b      	ldrh	r3, [r3, #2]
 80014ae:	0a1b      	lsrs	r3, r3, #8
 80014b0:	b298      	uxth	r0, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 80014b8:	1c5a      	adds	r2, r3, #1
 80014ba:	b2d1      	uxtb	r1, r2
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	f882 12fc 	strb.w	r1, [r2, #764]	; 0x2fc
 80014c2:	4619      	mov	r1, r3
 80014c4:	b2c2      	uxtb	r2, r0
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	440b      	add	r3, r1
 80014ca:	71da      	strb	r2, [r3, #7]
				modbus->TxMessage.TxData[modbus->TxMessage.TxIndex++] = LSB(modbus->TxMessage.StartAddrress);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	8858      	ldrh	r0, [r3, #2]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 80014d6:	1c5a      	adds	r2, r3, #1
 80014d8:	b2d1      	uxtb	r1, r2
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	f882 12fc 	strb.w	r1, [r2, #764]	; 0x2fc
 80014e0:	4619      	mov	r1, r3
 80014e2:	b2c2      	uxtb	r2, r0
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	440b      	add	r3, r1
 80014e8:	71da      	strb	r2, [r3, #7]
				modbus->TxMessage.TxData[modbus->TxMessage.TxIndex++] = MSB(modbus->TxMessage.NumOfRegisters);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	889b      	ldrh	r3, [r3, #4]
 80014ee:	0a1b      	lsrs	r3, r3, #8
 80014f0:	b298      	uxth	r0, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 80014f8:	1c5a      	adds	r2, r3, #1
 80014fa:	b2d1      	uxtb	r1, r2
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	f882 12fc 	strb.w	r1, [r2, #764]	; 0x2fc
 8001502:	4619      	mov	r1, r3
 8001504:	b2c2      	uxtb	r2, r0
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	440b      	add	r3, r1
 800150a:	71da      	strb	r2, [r3, #7]
				modbus->TxMessage.TxData[modbus->TxMessage.TxIndex++] = LSB(modbus->TxMessage.NumOfRegisters);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	8898      	ldrh	r0, [r3, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 8001516:	1c5a      	adds	r2, r3, #1
 8001518:	b2d1      	uxtb	r1, r2
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	f882 12fc 	strb.w	r1, [r2, #764]	; 0x2fc
 8001520:	4619      	mov	r1, r3
 8001522:	b2c2      	uxtb	r2, r0
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	440b      	add	r3, r1
 8001528:	71da      	strb	r2, [r3, #7]

				break;
 800152a:	e1df      	b.n	80018ec <Modbus_Master_Control+0x5bc>

			case Read_Holding_Registers:
				modbus->TxMessage.TxData[modbus->TxMessage.TxIndex++] = MSB(modbus->TxMessage.StartAddrress);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	885b      	ldrh	r3, [r3, #2]
 8001530:	0a1b      	lsrs	r3, r3, #8
 8001532:	b298      	uxth	r0, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 800153a:	1c5a      	adds	r2, r3, #1
 800153c:	b2d1      	uxtb	r1, r2
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	f882 12fc 	strb.w	r1, [r2, #764]	; 0x2fc
 8001544:	4619      	mov	r1, r3
 8001546:	b2c2      	uxtb	r2, r0
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	440b      	add	r3, r1
 800154c:	71da      	strb	r2, [r3, #7]
				modbus->TxMessage.TxData[modbus->TxMessage.TxIndex++] = LSB(modbus->TxMessage.StartAddrress);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	8858      	ldrh	r0, [r3, #2]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 8001558:	1c5a      	adds	r2, r3, #1
 800155a:	b2d1      	uxtb	r1, r2
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	f882 12fc 	strb.w	r1, [r2, #764]	; 0x2fc
 8001562:	4619      	mov	r1, r3
 8001564:	b2c2      	uxtb	r2, r0
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	440b      	add	r3, r1
 800156a:	71da      	strb	r2, [r3, #7]
				modbus->TxMessage.TxData[modbus->TxMessage.TxIndex++] = MSB(modbus->TxMessage.NumOfRegisters);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	889b      	ldrh	r3, [r3, #4]
 8001570:	0a1b      	lsrs	r3, r3, #8
 8001572:	b298      	uxth	r0, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 800157a:	1c5a      	adds	r2, r3, #1
 800157c:	b2d1      	uxtb	r1, r2
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	f882 12fc 	strb.w	r1, [r2, #764]	; 0x2fc
 8001584:	4619      	mov	r1, r3
 8001586:	b2c2      	uxtb	r2, r0
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	440b      	add	r3, r1
 800158c:	71da      	strb	r2, [r3, #7]
				modbus->TxMessage.TxData[modbus->TxMessage.TxIndex++] = LSB(modbus->TxMessage.NumOfRegisters);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	8898      	ldrh	r0, [r3, #4]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 8001598:	1c5a      	adds	r2, r3, #1
 800159a:	b2d1      	uxtb	r1, r2
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	f882 12fc 	strb.w	r1, [r2, #764]	; 0x2fc
 80015a2:	4619      	mov	r1, r3
 80015a4:	b2c2      	uxtb	r2, r0
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	440b      	add	r3, r1
 80015aa:	71da      	strb	r2, [r3, #7]

				break;
 80015ac:	e19e      	b.n	80018ec <Modbus_Master_Control+0x5bc>

			case Read_Input_Registers:
				modbus->TxMessage.TxData[modbus->TxMessage.TxIndex++] = MSB(modbus->TxMessage.StartAddrress);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	885b      	ldrh	r3, [r3, #2]
 80015b2:	0a1b      	lsrs	r3, r3, #8
 80015b4:	b298      	uxth	r0, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 80015bc:	1c5a      	adds	r2, r3, #1
 80015be:	b2d1      	uxtb	r1, r2
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	f882 12fc 	strb.w	r1, [r2, #764]	; 0x2fc
 80015c6:	4619      	mov	r1, r3
 80015c8:	b2c2      	uxtb	r2, r0
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	440b      	add	r3, r1
 80015ce:	71da      	strb	r2, [r3, #7]
				modbus->TxMessage.TxData[modbus->TxMessage.TxIndex++] = LSB(modbus->TxMessage.StartAddrress);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	8858      	ldrh	r0, [r3, #2]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 80015da:	1c5a      	adds	r2, r3, #1
 80015dc:	b2d1      	uxtb	r1, r2
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	f882 12fc 	strb.w	r1, [r2, #764]	; 0x2fc
 80015e4:	4619      	mov	r1, r3
 80015e6:	b2c2      	uxtb	r2, r0
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	440b      	add	r3, r1
 80015ec:	71da      	strb	r2, [r3, #7]
				modbus->TxMessage.TxData[modbus->TxMessage.TxIndex++] = MSB(modbus->TxMessage.NumOfRegisters);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	889b      	ldrh	r3, [r3, #4]
 80015f2:	0a1b      	lsrs	r3, r3, #8
 80015f4:	b298      	uxth	r0, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 80015fc:	1c5a      	adds	r2, r3, #1
 80015fe:	b2d1      	uxtb	r1, r2
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	f882 12fc 	strb.w	r1, [r2, #764]	; 0x2fc
 8001606:	4619      	mov	r1, r3
 8001608:	b2c2      	uxtb	r2, r0
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	440b      	add	r3, r1
 800160e:	71da      	strb	r2, [r3, #7]
				modbus->TxMessage.TxData[modbus->TxMessage.TxIndex++] = LSB(modbus->TxMessage.NumOfRegisters);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	8898      	ldrh	r0, [r3, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 800161a:	1c5a      	adds	r2, r3, #1
 800161c:	b2d1      	uxtb	r1, r2
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	f882 12fc 	strb.w	r1, [r2, #764]	; 0x2fc
 8001624:	4619      	mov	r1, r3
 8001626:	b2c2      	uxtb	r2, r0
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	440b      	add	r3, r1
 800162c:	71da      	strb	r2, [r3, #7]

				break;
 800162e:	e15d      	b.n	80018ec <Modbus_Master_Control+0x5bc>
 8001630:	200013b8 	.word	0x200013b8

     		case Write_Single_Coil:
				modbus->TxMessage.TxData[modbus->TxMessage.TxIndex++] = MSB(modbus->TxMessage.StartAddrress);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	885b      	ldrh	r3, [r3, #2]
 8001638:	0a1b      	lsrs	r3, r3, #8
 800163a:	b298      	uxth	r0, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 8001642:	1c5a      	adds	r2, r3, #1
 8001644:	b2d1      	uxtb	r1, r2
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	f882 12fc 	strb.w	r1, [r2, #764]	; 0x2fc
 800164c:	4619      	mov	r1, r3
 800164e:	b2c2      	uxtb	r2, r0
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	440b      	add	r3, r1
 8001654:	71da      	strb	r2, [r3, #7]
				modbus->TxMessage.TxData[modbus->TxMessage.TxIndex++] = LSB(modbus->TxMessage.StartAddrress);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	8858      	ldrh	r0, [r3, #2]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 8001660:	1c5a      	adds	r2, r3, #1
 8001662:	b2d1      	uxtb	r1, r2
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	f882 12fc 	strb.w	r1, [r2, #764]	; 0x2fc
 800166a:	4619      	mov	r1, r3
 800166c:	b2c2      	uxtb	r2, r0
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	440b      	add	r3, r1
 8001672:	71da      	strb	r2, [r3, #7]
				modbus->TxMessage.TxData[modbus->TxMessage.TxIndex++] = MSB(modbus->TxMessage.WriteData[0]);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 800167a:	0a1b      	lsrs	r3, r3, #8
 800167c:	b298      	uxth	r0, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 8001684:	1c5a      	adds	r2, r3, #1
 8001686:	b2d1      	uxtb	r1, r2
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	f882 12fc 	strb.w	r1, [r2, #764]	; 0x2fc
 800168e:	4619      	mov	r1, r3
 8001690:	b2c2      	uxtb	r2, r0
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	440b      	add	r3, r1
 8001696:	71da      	strb	r2, [r3, #7]
				modbus->TxMessage.TxData[modbus->TxMessage.TxIndex++] = LSB(modbus->TxMessage.WriteData[0]);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f8b3 0104 	ldrh.w	r0, [r3, #260]	; 0x104
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 80016a4:	1c5a      	adds	r2, r3, #1
 80016a6:	b2d1      	uxtb	r1, r2
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	f882 12fc 	strb.w	r1, [r2, #764]	; 0x2fc
 80016ae:	4619      	mov	r1, r3
 80016b0:	b2c2      	uxtb	r2, r0
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	440b      	add	r3, r1
 80016b6:	71da      	strb	r2, [r3, #7]

				break;
 80016b8:	e118      	b.n	80018ec <Modbus_Master_Control+0x5bc>

			case Write_Single_Register:
				modbus->TxMessage.TxData[modbus->TxMessage.TxIndex++] = MSB(modbus->TxMessage.StartAddrress);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	885b      	ldrh	r3, [r3, #2]
 80016be:	0a1b      	lsrs	r3, r3, #8
 80016c0:	b298      	uxth	r0, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 80016c8:	1c5a      	adds	r2, r3, #1
 80016ca:	b2d1      	uxtb	r1, r2
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	f882 12fc 	strb.w	r1, [r2, #764]	; 0x2fc
 80016d2:	4619      	mov	r1, r3
 80016d4:	b2c2      	uxtb	r2, r0
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	440b      	add	r3, r1
 80016da:	71da      	strb	r2, [r3, #7]
				modbus->TxMessage.TxData[modbus->TxMessage.TxIndex++] = LSB(modbus->TxMessage.StartAddrress);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	8858      	ldrh	r0, [r3, #2]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 80016e6:	1c5a      	adds	r2, r3, #1
 80016e8:	b2d1      	uxtb	r1, r2
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	f882 12fc 	strb.w	r1, [r2, #764]	; 0x2fc
 80016f0:	4619      	mov	r1, r3
 80016f2:	b2c2      	uxtb	r2, r0
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	440b      	add	r3, r1
 80016f8:	71da      	strb	r2, [r3, #7]
				modbus->TxMessage.TxData[modbus->TxMessage.TxIndex++] = MSB(modbus->TxMessage.WriteData[0]);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8001700:	0a1b      	lsrs	r3, r3, #8
 8001702:	b298      	uxth	r0, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 800170a:	1c5a      	adds	r2, r3, #1
 800170c:	b2d1      	uxtb	r1, r2
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	f882 12fc 	strb.w	r1, [r2, #764]	; 0x2fc
 8001714:	4619      	mov	r1, r3
 8001716:	b2c2      	uxtb	r2, r0
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	440b      	add	r3, r1
 800171c:	71da      	strb	r2, [r3, #7]
				modbus->TxMessage.TxData[modbus->TxMessage.TxIndex++] = LSB(modbus->TxMessage.WriteData[0]);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f8b3 0104 	ldrh.w	r0, [r3, #260]	; 0x104
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	b2d1      	uxtb	r1, r2
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	f882 12fc 	strb.w	r1, [r2, #764]	; 0x2fc
 8001734:	4619      	mov	r1, r3
 8001736:	b2c2      	uxtb	r2, r0
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	440b      	add	r3, r1
 800173c:	71da      	strb	r2, [r3, #7]

				break;
 800173e:	e0d5      	b.n	80018ec <Modbus_Master_Control+0x5bc>

			case Write_Multiple_Coils:
				modbus->TxMessage.TxData[modbus->TxMessage.TxIndex++] = MSB(modbus->TxMessage.StartAddrress);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	885b      	ldrh	r3, [r3, #2]
 8001744:	0a1b      	lsrs	r3, r3, #8
 8001746:	b298      	uxth	r0, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 800174e:	1c5a      	adds	r2, r3, #1
 8001750:	b2d1      	uxtb	r1, r2
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	f882 12fc 	strb.w	r1, [r2, #764]	; 0x2fc
 8001758:	4619      	mov	r1, r3
 800175a:	b2c2      	uxtb	r2, r0
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	440b      	add	r3, r1
 8001760:	71da      	strb	r2, [r3, #7]
				modbus->TxMessage.TxData[modbus->TxMessage.TxIndex++] = LSB(modbus->TxMessage.StartAddrress);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	8858      	ldrh	r0, [r3, #2]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 800176c:	1c5a      	adds	r2, r3, #1
 800176e:	b2d1      	uxtb	r1, r2
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	f882 12fc 	strb.w	r1, [r2, #764]	; 0x2fc
 8001776:	4619      	mov	r1, r3
 8001778:	b2c2      	uxtb	r2, r0
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	440b      	add	r3, r1
 800177e:	71da      	strb	r2, [r3, #7]
				modbus->TxMessage.TxData[modbus->TxMessage.TxIndex++] = MSB(modbus->TxMessage.NumOfRegisters);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	889b      	ldrh	r3, [r3, #4]
 8001784:	0a1b      	lsrs	r3, r3, #8
 8001786:	b298      	uxth	r0, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	b2d1      	uxtb	r1, r2
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	f882 12fc 	strb.w	r1, [r2, #764]	; 0x2fc
 8001798:	4619      	mov	r1, r3
 800179a:	b2c2      	uxtb	r2, r0
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	440b      	add	r3, r1
 80017a0:	71da      	strb	r2, [r3, #7]
				modbus->TxMessage.TxData[modbus->TxMessage.TxIndex++] = LSB(modbus->TxMessage.NumOfRegisters);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	8898      	ldrh	r0, [r3, #4]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 80017ac:	1c5a      	adds	r2, r3, #1
 80017ae:	b2d1      	uxtb	r1, r2
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	f882 12fc 	strb.w	r1, [r2, #764]	; 0x2fc
 80017b6:	4619      	mov	r1, r3
 80017b8:	b2c2      	uxtb	r2, r0
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	440b      	add	r3, r1
 80017be:	71da      	strb	r2, [r3, #7]
				modbus->TxMessage.TxData[modbus->TxMessage.TxIndex++] = LSB(modbus->TxMessage.WriteData[0]);   // bayt sayisi
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f8b3 0104 	ldrh.w	r0, [r3, #260]	; 0x104
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 80017cc:	1c5a      	adds	r2, r3, #1
 80017ce:	b2d1      	uxtb	r1, r2
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	f882 12fc 	strb.w	r1, [r2, #764]	; 0x2fc
 80017d6:	4619      	mov	r1, r3
 80017d8:	b2c2      	uxtb	r2, r0
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	440b      	add	r3, r1
 80017de:	71da      	strb	r2, [r3, #7]
				break;
 80017e0:	e084      	b.n	80018ec <Modbus_Master_Control+0x5bc>

			case Write_Multiple_Registers:
				modbus->TxMessage.TxData[modbus->TxMessage.TxIndex++] = MSB(modbus->TxMessage.StartAddrress);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	885b      	ldrh	r3, [r3, #2]
 80017e6:	0a1b      	lsrs	r3, r3, #8
 80017e8:	b298      	uxth	r0, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 80017f0:	1c5a      	adds	r2, r3, #1
 80017f2:	b2d1      	uxtb	r1, r2
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	f882 12fc 	strb.w	r1, [r2, #764]	; 0x2fc
 80017fa:	4619      	mov	r1, r3
 80017fc:	b2c2      	uxtb	r2, r0
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	440b      	add	r3, r1
 8001802:	71da      	strb	r2, [r3, #7]
				modbus->TxMessage.TxData[modbus->TxMessage.TxIndex++] = LSB(modbus->TxMessage.StartAddrress);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	8858      	ldrh	r0, [r3, #2]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 800180e:	1c5a      	adds	r2, r3, #1
 8001810:	b2d1      	uxtb	r1, r2
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	f882 12fc 	strb.w	r1, [r2, #764]	; 0x2fc
 8001818:	4619      	mov	r1, r3
 800181a:	b2c2      	uxtb	r2, r0
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	440b      	add	r3, r1
 8001820:	71da      	strb	r2, [r3, #7]
				modbus->TxMessage.TxData[modbus->TxMessage.TxIndex++] = MSB(modbus->TxMessage.NumOfRegisters);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	889b      	ldrh	r3, [r3, #4]
 8001826:	0a1b      	lsrs	r3, r3, #8
 8001828:	b298      	uxth	r0, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 8001830:	1c5a      	adds	r2, r3, #1
 8001832:	b2d1      	uxtb	r1, r2
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	f882 12fc 	strb.w	r1, [r2, #764]	; 0x2fc
 800183a:	4619      	mov	r1, r3
 800183c:	b2c2      	uxtb	r2, r0
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	440b      	add	r3, r1
 8001842:	71da      	strb	r2, [r3, #7]
				modbus->TxMessage.TxData[modbus->TxMessage.TxIndex++] = LSB(modbus->TxMessage.NumOfRegisters);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	8898      	ldrh	r0, [r3, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	b2d1      	uxtb	r1, r2
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	f882 12fc 	strb.w	r1, [r2, #764]	; 0x2fc
 8001858:	4619      	mov	r1, r3
 800185a:	b2c2      	uxtb	r2, r0
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	440b      	add	r3, r1
 8001860:	71da      	strb	r2, [r3, #7]
				modbus->TxMessage.TxData[modbus->TxMessage.TxIndex++] = LSB(modbus->TxMessage.WriteData[0]);   // bayt sayisi
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f8b3 0104 	ldrh.w	r0, [r3, #260]	; 0x104
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 800186e:	1c5a      	adds	r2, r3, #1
 8001870:	b2d1      	uxtb	r1, r2
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	f882 12fc 	strb.w	r1, [r2, #764]	; 0x2fc
 8001878:	4619      	mov	r1, r3
 800187a:	b2c2      	uxtb	r2, r0
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	440b      	add	r3, r1
 8001880:	71da      	strb	r2, [r3, #7]

				for (int i = 1; i <= modbus->TxMessage.NumOfRegisters; i++)
 8001882:	2301      	movs	r3, #1
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	e02a      	b.n	80018de <Modbus_Master_Control+0x5ae>
				{
					modbus->TxMessage.TxData[modbus->TxMessage.TxIndex++] = MSB(modbus->TxMessage.WriteData[i]);
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	3380      	adds	r3, #128	; 0x80
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	4413      	add	r3, r2
 8001892:	889b      	ldrh	r3, [r3, #4]
 8001894:	0a1b      	lsrs	r3, r3, #8
 8001896:	b298      	uxth	r0, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 800189e:	1c5a      	adds	r2, r3, #1
 80018a0:	b2d1      	uxtb	r1, r2
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	f882 12fc 	strb.w	r1, [r2, #764]	; 0x2fc
 80018a8:	4619      	mov	r1, r3
 80018aa:	b2c2      	uxtb	r2, r0
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	440b      	add	r3, r1
 80018b0:	71da      	strb	r2, [r3, #7]
					modbus->TxMessage.TxData[modbus->TxMessage.TxIndex++] = LSB(modbus->TxMessage.WriteData[i]);
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	3380      	adds	r3, #128	; 0x80
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	4413      	add	r3, r2
 80018bc:	8898      	ldrh	r0, [r3, #4]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 80018c4:	1c5a      	adds	r2, r3, #1
 80018c6:	b2d1      	uxtb	r1, r2
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	f882 12fc 	strb.w	r1, [r2, #764]	; 0x2fc
 80018ce:	4619      	mov	r1, r3
 80018d0:	b2c2      	uxtb	r2, r0
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	440b      	add	r3, r1
 80018d6:	71da      	strb	r2, [r3, #7]
				for (int i = 1; i <= modbus->TxMessage.NumOfRegisters; i++)
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	3301      	adds	r3, #1
 80018dc:	617b      	str	r3, [r7, #20]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	889b      	ldrh	r3, [r3, #4]
 80018e2:	461a      	mov	r2, r3
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	4293      	cmp	r3, r2
 80018e8:	ddce      	ble.n	8001888 <Modbus_Master_Control+0x558>

				}

				break;
 80018ea:	bf00      	nop
			}

			modbus->TxMessage.crc16	= 0xFF;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	22ff      	movs	r2, #255	; 0xff
 80018f0:	f8a3 22fe 	strh.w	r2, [r3, #766]	; 0x2fe
			modbus->TxMessage.crc16 = crc16_calculateWithLookupTable(modbus->TxMessage.TxData, modbus->TxMessage.TxIndex);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	1dda      	adds	r2, r3, #7
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 80018fe:	b29b      	uxth	r3, r3
 8001900:	4619      	mov	r1, r3
 8001902:	4610      	mov	r0, r2
 8001904:	f7ff fce0 	bl	80012c8 <crc16_calculateWithLookupTable>
 8001908:	4603      	mov	r3, r0
 800190a:	461a      	mov	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f8a3 22fe 	strh.w	r2, [r3, #766]	; 0x2fe
			modbus->TxMessage.TxData[modbus->TxMessage.TxIndex++] = LSB(modbus->TxMessage.crc16);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f8b3 02fe 	ldrh.w	r0, [r3, #766]	; 0x2fe
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	b2d1      	uxtb	r1, r2
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	f882 12fc 	strb.w	r1, [r2, #764]	; 0x2fc
 8001928:	4619      	mov	r1, r3
 800192a:	b2c2      	uxtb	r2, r0
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	440b      	add	r3, r1
 8001930:	71da      	strb	r2, [r3, #7]
			modbus->TxMessage.TxData[modbus->TxMessage.TxIndex++] = MSB(modbus->TxMessage.crc16);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 8001938:	0a1b      	lsrs	r3, r3, #8
 800193a:	b298      	uxth	r0, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 8001942:	1c5a      	adds	r2, r3, #1
 8001944:	b2d1      	uxtb	r1, r2
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	f882 12fc 	strb.w	r1, [r2, #764]	; 0x2fc
 800194c:	4619      	mov	r1, r3
 800194e:	b2c2      	uxtb	r2, r0
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	440b      	add	r3, r1
 8001954:	71da      	strb	r2, [r3, #7]

			Ring_Buffer_Clear(&usart2_InRb);
 8001956:	48a7      	ldr	r0, [pc, #668]	; (8001bf4 <Modbus_Master_Control+0x8c4>)
 8001958:	f7ff fbee 	bl	8001138 <Ring_Buffer_Clear>

			Modbus_Master_Write(modbus->TxMessage.TxData , modbus->TxMessage.TxIndex);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	1dda      	adds	r2, r3, #7
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 8001966:	4619      	mov	r1, r3
 8001968:	4610      	mov	r0, r2
 800196a:	f000 fa01 	bl	8001d70 <Modbus_Master_Write>

			Tick_Timer_Set_Time(&waitResponseTime, 1000);
 800196e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001972:	48a1      	ldr	r0, [pc, #644]	; (8001bf8 <Modbus_Master_Control+0x8c8>)
 8001974:	f7ff fc4e 	bl	8001214 <Tick_Timer_Set_Time>

			modbus->State = Waiting_For_Reply;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2202      	movs	r2, #2
 800197c:	f883 235d 	strb.w	r2, [r3, #861]	; 0x35d

			break;
 8001980:	e1e2      	b.n	8001d48 <Modbus_Master_Control+0xa18>

		case Waiting_For_Reply:
			// Cevap bekle

			if(usart2_InRb.writePoint > 2)
 8001982:	4b9c      	ldr	r3, [pc, #624]	; (8001bf4 <Modbus_Master_Control+0x8c4>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b02      	cmp	r3, #2
 8001988:	d903      	bls.n	8001992 <Modbus_Master_Control+0x662>
				modbus->RxMessage.NewReceiveMessageStatus = true;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2201      	movs	r2, #1
 800198e:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

			if (modbus->RxMessage.NewReceiveMessageStatus)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 3358 	ldrb.w	r3, [r3, #856]	; 0x358
 8001998:	2b00      	cmp	r3, #0
 800199a:	d019      	beq.n	80019d0 <Modbus_Master_Control+0x6a0>
			{
				// zamani durdur ve processing reply'e gec
				// gelen mesajin adres bilgisini al ve kontrol et
				modbus->RxMessage.SlaveAddress = usart2_InRb.pBuffer[0];
 800199c:	4b95      	ldr	r3, [pc, #596]	; (8001bf4 <Modbus_Master_Control+0x8c4>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	781a      	ldrb	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f883 2304 	strb.w	r2, [r3, #772]	; 0x304

				if(modbus->RxMessage.SlaveAddress == modbus->TxMessage.SlaveAddress)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f893 2304 	ldrb.w	r2, [r3, #772]	; 0x304
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d108      	bne.n	80019c8 <Modbus_Master_Control+0x698>
				{
					// yanit beklenen bagimli cihazdan cevap geldi , mesaji islemeye basla
					modbus->State = Processing_Reply;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2203      	movs	r2, #3
 80019ba:	f883 235d 	strb.w	r2, [r3, #861]	; 0x35d
					modbus->RxMessage.NewReceiveMessageStatus = false;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358
					HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
				}
			}


			break;
 80019c6:	e1ba      	b.n	8001d3e <Modbus_Master_Control+0xa0e>
					Ring_Buffer_Clear(&usart2_InRb);
 80019c8:	488a      	ldr	r0, [pc, #552]	; (8001bf4 <Modbus_Master_Control+0x8c4>)
 80019ca:	f7ff fbb5 	bl	8001138 <Ring_Buffer_Clear>
			break;
 80019ce:	e1b6      	b.n	8001d3e <Modbus_Master_Control+0xa0e>
				if(Tick_Timer_Check_Elapsed_Time(&waitResponseTime))
 80019d0:	4889      	ldr	r0, [pc, #548]	; (8001bf8 <Modbus_Master_Control+0x8c8>)
 80019d2:	f7ff fc45 	bl	8001260 <Tick_Timer_Check_Elapsed_Time>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 81b0 	beq.w	8001d3e <Modbus_Master_Control+0xa0e>
					modbus->Error = Timeout;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2207      	movs	r2, #7
 80019e2:	f883 235e 	strb.w	r2, [r3, #862]	; 0x35e
					modbus->State = Processing_Error;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2204      	movs	r2, #4
 80019ea:	f883 235d 	strb.w	r2, [r3, #861]	; 0x35d
					Tick_Timer_Set_Time(&errorTime, 1000);
 80019ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019f2:	4882      	ldr	r0, [pc, #520]	; (8001bfc <Modbus_Master_Control+0x8cc>)
 80019f4:	f7ff fc0e 	bl	8001214 <Tick_Timer_Set_Time>
					HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80019f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019fc:	4880      	ldr	r0, [pc, #512]	; (8001c00 <Modbus_Master_Control+0x8d0>)
 80019fe:	f001 f988 	bl	8002d12 <HAL_GPIO_TogglePin>
			break;
 8001a02:	e19c      	b.n	8001d3e <Modbus_Master_Control+0xa0e>

		case Processing_Reply:
			// Beklenilen sure zarfinda cevap dogru sekilde gelirse ,islenir
			// 1 - Gelen mesajin fonksiyon kodunu al
			modbus->RxMessage.FunctionCode = usart2_InRb.pBuffer[1];
 8001a04:	4b7b      	ldr	r3, [pc, #492]	; (8001bf4 <Modbus_Master_Control+0x8c4>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	785a      	ldrb	r2, [r3, #1]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f883 2305 	strb.w	r2, [r3, #773]	; 0x305
			// 2 - Gelen fonksiyon kodunu kontrol et
			if((modbus->RxMessage.FunctionCode & 0x7F) != modbus->TxMessage.FunctionCode )
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 3305 	ldrb.w	r3, [r3, #773]	; 0x305
 8001a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	7852      	ldrb	r2, [r2, #1]
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d00c      	beq.n	8001a3c <Modbus_Master_Control+0x70c>
			{
				modbus->Error = Invalid_Function_Code;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 235e 	strb.w	r2, [r3, #862]	; 0x35e
				modbus->State = Processing_Error;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2204      	movs	r2, #4
 8001a2e:	f883 235d 	strb.w	r2, [r3, #861]	; 0x35d
				Tick_Timer_Set_Time(&errorTime, 1000);
 8001a32:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a36:	4871      	ldr	r0, [pc, #452]	; (8001bfc <Modbus_Master_Control+0x8cc>)
 8001a38:	f7ff fbec 	bl	8001214 <Tick_Timer_Set_Time>

			}

			// istisna mesaji kontrolu yap
			if (bitRead(modbus->RxMessage.FunctionCode , 7))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 3305 	ldrb.w	r3, [r3, #773]	; 0x305
 8001a42:	b25b      	sxtb	r3, r3
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	da0f      	bge.n	8001a68 <Modbus_Master_Control+0x738>
			{
				modbus->Error = usart2_InRb.pBuffer[2];
 8001a48:	4b6a      	ldr	r3, [pc, #424]	; (8001bf4 <Modbus_Master_Control+0x8c4>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	3302      	adds	r3, #2
 8001a4e:	781a      	ldrb	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f883 235e 	strb.w	r2, [r3, #862]	; 0x35e
				modbus->State = Processing_Error;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2204      	movs	r2, #4
 8001a5a:	f883 235d 	strb.w	r2, [r3, #861]	; 0x35d
				Tick_Timer_Set_Time(&errorTime, 1000);
 8001a5e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a62:	4866      	ldr	r0, [pc, #408]	; (8001bfc <Modbus_Master_Control+0x8cc>)
 8001a64:	f7ff fbd6 	bl	8001214 <Tick_Timer_Set_Time>

			}

			// Gelen data uzunlugunu al
			if((modbus->RxMessage.MessageLength == 0) && (modbus->RxMessage.FunctionCode <= Read_Input_Registers))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 3346 	ldrb.w	r3, [r3, #838]	; 0x346
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d10e      	bne.n	8001a90 <Modbus_Master_Control+0x760>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 3305 	ldrb.w	r3, [r3, #773]	; 0x305
 8001a78:	2b04      	cmp	r3, #4
 8001a7a:	d809      	bhi.n	8001a90 <Modbus_Master_Control+0x760>
			{
				modbus->RxMessage.MessageLength = usart2_InRb.pBuffer[2] + 5;
 8001a7c:	4b5d      	ldr	r3, [pc, #372]	; (8001bf4 <Modbus_Master_Control+0x8c4>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	3302      	adds	r3, #2
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	3305      	adds	r3, #5
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f883 2346 	strb.w	r2, [r3, #838]	; 0x346
 8001a8e:	e018      	b.n	8001ac2 <Modbus_Master_Control+0x792>
			}
			else if(modbus->RxMessage.FunctionCode >= Write_Single_Coil)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 3305 	ldrb.w	r3, [r3, #773]	; 0x305
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	d913      	bls.n	8001ac2 <Modbus_Master_Control+0x792>
			{
				modbus->RxMessage.MessageLength = modbus->TxMessage.TxIndex;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 22fc 	ldrb.w	r2, [r3, #764]	; 0x2fc
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f883 2346 	strb.w	r2, [r3, #838]	; 0x346
				if (modbus->RxMessage.FunctionCode >= Write_Multiple_Coils || modbus->RxMessage.FunctionCode >= Write_Multiple_Registers)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 3305 	ldrb.w	r3, [r3, #773]	; 0x305
 8001aac:	2b0e      	cmp	r3, #14
 8001aae:	d804      	bhi.n	8001aba <Modbus_Master_Control+0x78a>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 3305 	ldrb.w	r3, [r3, #773]	; 0x305
 8001ab6:	2b0f      	cmp	r3, #15
 8001ab8:	d903      	bls.n	8001ac2 <Modbus_Master_Control+0x792>
				{
					modbus->RxMessage.MessageLength = 8;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2208      	movs	r2, #8
 8001abe:	f883 2346 	strb.w	r2, [r3, #838]	; 0x346
				}
			}

			// wait all data
			if((usart2_InRb.writePoint >= modbus->RxMessage.MessageLength) && modbus->RxMessage.MessageLength != 0)
 8001ac2:	4b4c      	ldr	r3, [pc, #304]	; (8001bf4 <Modbus_Master_Control+0x8c4>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	f892 2346 	ldrb.w	r2, [r2, #838]	; 0x346
 8001acc:	4293      	cmp	r3, r2
 8001ace:	f0c0 8138 	bcc.w	8001d42 <Modbus_Master_Control+0xa12>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 3346 	ldrb.w	r3, [r3, #838]	; 0x346
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 8132 	beq.w	8001d42 <Modbus_Master_Control+0xa12>
			{
				modbus->RxMessage.MessageLength = 0;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2346 	strb.w	r2, [r3, #838]	; 0x346

				// CRC kontrol yap

				modbus->RxMessage.crc16 = 0xFFFF;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aec:	f8a3 2356 	strh.w	r2, [r3, #854]	; 0x356
				memcpy(modbus->RxMessage.RxData , usart2_InRb.pBuffer , usart2_InRb.writePoint);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f203 3306 	addw	r3, r3, #774	; 0x306
 8001af6:	4a3f      	ldr	r2, [pc, #252]	; (8001bf4 <Modbus_Master_Control+0x8c4>)
 8001af8:	6811      	ldr	r1, [r2, #0]
 8001afa:	4a3e      	ldr	r2, [pc, #248]	; (8001bf4 <Modbus_Master_Control+0x8c4>)
 8001afc:	6852      	ldr	r2, [r2, #4]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f003 fe76 	bl	80057f0 <memcpy>
				modbus->RxMessage.RxIndex = usart2_InRb.writePoint;
 8001b04:	4b3b      	ldr	r3, [pc, #236]	; (8001bf4 <Modbus_Master_Control+0x8c4>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f883 2354 	strb.w	r2, [r3, #852]	; 0x354
				modbus->RxMessage.crc16 = crc16_calculateWithLookupTable(modbus->RxMessage.RxData, (modbus->RxMessage.RxIndex - 2));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f203 3206 	addw	r2, r3, #774	; 0x306
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 3354 	ldrb.w	r3, [r3, #852]	; 0x354
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	3b02      	subs	r3, #2
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	4619      	mov	r1, r3
 8001b24:	4610      	mov	r0, r2
 8001b26:	f7ff fbcf 	bl	80012c8 <crc16_calculateWithLookupTable>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f8a3 2356 	strh.w	r2, [r3, #854]	; 0x356

				if((LSB(modbus->RxMessage.crc16) != modbus->RxMessage.RxData[modbus->RxMessage.RxIndex - 2]) ||
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f8b3 3356 	ldrh.w	r3, [r3, #854]	; 0x356
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f893 3354 	ldrb.w	r3, [r3, #852]	; 0x354
 8001b42:	3b02      	subs	r3, #2
 8001b44:	6879      	ldr	r1, [r7, #4]
 8001b46:	440b      	add	r3, r1
 8001b48:	f893 3306 	ldrb.w	r3, [r3, #774]	; 0x306
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d10f      	bne.n	8001b70 <Modbus_Master_Control+0x840>
				   (MSB(modbus->RxMessage.crc16) != modbus->RxMessage.RxData[modbus->RxMessage.RxIndex - 1]))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f8b3 3356 	ldrh.w	r3, [r3, #854]	; 0x356
 8001b56:	0a1b      	lsrs	r3, r3, #8
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 3354 	ldrb.w	r3, [r3, #852]	; 0x354
 8001b62:	3b01      	subs	r3, #1
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	440b      	add	r3, r1
 8001b68:	f893 3306 	ldrb.w	r3, [r3, #774]	; 0x306
				if((LSB(modbus->RxMessage.crc16) != modbus->RxMessage.RxData[modbus->RxMessage.RxIndex - 2]) ||
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d007      	beq.n	8001b80 <Modbus_Master_Control+0x850>
				{
					// CRC Error
					modbus->Error = Invalid_CRC;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2206      	movs	r2, #6
 8001b74:	f883 235e 	strb.w	r2, [r3, #862]	; 0x35e
					modbus->State = Processing_Error;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	f883 235d 	strb.w	r2, [r3, #861]	; 0x35d
				}

				//Tum veriler dogru bir sekilde geldi ve bilgileri isle

				if (modbus->State != Processing_Error)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 335d 	ldrb.w	r3, [r3, #861]	; 0x35d
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	f000 80db 	beq.w	8001d42 <Modbus_Master_Control+0xa12>
				{
					switch (modbus->RxMessage.FunctionCode)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 3305 	ldrb.w	r3, [r3, #773]	; 0x305
 8001b92:	3b01      	subs	r3, #1
 8001b94:	2b0f      	cmp	r3, #15
 8001b96:	f200 80be 	bhi.w	8001d16 <Modbus_Master_Control+0x9e6>
 8001b9a:	a201      	add	r2, pc, #4	; (adr r2, 8001ba0 <Modbus_Master_Control+0x870>)
 8001b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba0:	08001be1 	.word	0x08001be1
 8001ba4:	08001c09 	.word	0x08001c09
 8001ba8:	08001d17 	.word	0x08001d17
 8001bac:	08001c6b 	.word	0x08001c6b
 8001bb0:	08001cc7 	.word	0x08001cc7
 8001bb4:	08001cdf 	.word	0x08001cdf
 8001bb8:	08001d17 	.word	0x08001d17
 8001bbc:	08001d17 	.word	0x08001d17
 8001bc0:	08001d17 	.word	0x08001d17
 8001bc4:	08001d17 	.word	0x08001d17
 8001bc8:	08001d17 	.word	0x08001d17
 8001bcc:	08001d17 	.word	0x08001d17
 8001bd0:	08001d17 	.word	0x08001d17
 8001bd4:	08001d17 	.word	0x08001d17
 8001bd8:	08001d17 	.word	0x08001d17
 8001bdc:	08001cf7 	.word	0x08001cf7
					{
						case Read_Coil_Status:
							//. . .

							cikis10Durum = bitRead(modbus->RxMessage.RxData[3] , 0);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 3309 	ldrb.w	r3, [r3, #777]	; 0x309
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <Modbus_Master_Control+0x8d4>)
 8001bee:	701a      	strb	r2, [r3, #0]
							break;
 8001bf0:	e091      	b.n	8001d16 <Modbus_Master_Control+0x9e6>
 8001bf2:	bf00      	nop
 8001bf4:	20000b8c 	.word	0x20000b8c
 8001bf8:	200013c4 	.word	0x200013c4
 8001bfc:	200013d0 	.word	0x200013d0
 8001c00:	40020400 	.word	0x40020400
 8001c04:	200013dc 	.word	0x200013dc

						case Read_Input_Status:
							//. . .

							girisDurum1 = bitRead(modbus->RxMessage.RxData[3] , 0);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f893 3309 	ldrb.w	r3, [r3, #777]	; 0x309
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	4b4e      	ldr	r3, [pc, #312]	; (8001d50 <Modbus_Master_Control+0xa20>)
 8001c16:	701a      	strb	r2, [r3, #0]
							girisDurum2 = bitRead(modbus->RxMessage.RxData[3] , 1);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 3309 	ldrb.w	r3, [r3, #777]	; 0x309
 8001c1e:	105b      	asrs	r3, r3, #1
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	4b4a      	ldr	r3, [pc, #296]	; (8001d54 <Modbus_Master_Control+0xa24>)
 8001c2a:	701a      	strb	r2, [r3, #0]
							girisDurum3 = bitRead(modbus->RxMessage.RxData[3] , 2);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 3309 	ldrb.w	r3, [r3, #777]	; 0x309
 8001c32:	109b      	asrs	r3, r3, #2
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	4b46      	ldr	r3, [pc, #280]	; (8001d58 <Modbus_Master_Control+0xa28>)
 8001c3e:	701a      	strb	r2, [r3, #0]
							girisDurum4 = bitRead(modbus->RxMessage.RxData[3] , 3);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 3309 	ldrb.w	r3, [r3, #777]	; 0x309
 8001c46:	10db      	asrs	r3, r3, #3
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	4b42      	ldr	r3, [pc, #264]	; (8001d5c <Modbus_Master_Control+0xa2c>)
 8001c52:	701a      	strb	r2, [r3, #0]
							girisDurum5 = bitRead(modbus->RxMessage.RxData[3] , 4);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 3309 	ldrb.w	r3, [r3, #777]	; 0x309
 8001c5a:	111b      	asrs	r3, r3, #4
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	4b3e      	ldr	r3, [pc, #248]	; (8001d60 <Modbus_Master_Control+0xa30>)
 8001c66:	701a      	strb	r2, [r3, #0]

							break;
 8001c68:	e055      	b.n	8001d16 <Modbus_Master_Control+0x9e6>
							break;*/

						case Read_Input_Registers:
							//. . .

							uint8_t dataLength = modbus->RxMessage.RxData[2] / 2;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 3308 	ldrb.w	r3, [r3, #776]	; 0x308
 8001c70:	085b      	lsrs	r3, r3, #1
 8001c72:	72fb      	strb	r3, [r7, #11]
							uint8_t index = 3;
 8001c74:	2303      	movs	r3, #3
 8001c76:	74fb      	strb	r3, [r7, #19]

							for (int i = 0; i < dataLength; i++)
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	e01e      	b.n	8001cbc <Modbus_Master_Control+0x98c>
							{
																// LSB											// MSB
								analogValue[i] = ((modbus->RxMessage.RxData[(index + 1) + i])  | (modbus->RxMessage.RxData[i+index]<< 8));
 8001c7e:	7cfb      	ldrb	r3, [r7, #19]
 8001c80:	1c5a      	adds	r2, r3, #1
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	4413      	add	r3, r2
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	f893 3306 	ldrb.w	r3, [r3, #774]	; 0x306
 8001c8e:	b21a      	sxth	r2, r3
 8001c90:	7cf9      	ldrb	r1, [r7, #19]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	440b      	add	r3, r1
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	440b      	add	r3, r1
 8001c9a:	f893 3306 	ldrb.w	r3, [r3, #774]	; 0x306
 8001c9e:	021b      	lsls	r3, r3, #8
 8001ca0:	b21b      	sxth	r3, r3
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	b21b      	sxth	r3, r3
 8001ca6:	b299      	uxth	r1, r3
 8001ca8:	4a2e      	ldr	r2, [pc, #184]	; (8001d64 <Modbus_Master_Control+0xa34>)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
								index += 1;
 8001cb0:	7cfb      	ldrb	r3, [r7, #19]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	74fb      	strb	r3, [r7, #19]
							for (int i = 0; i < dataLength; i++)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	7afb      	ldrb	r3, [r7, #11]
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	dbdc      	blt.n	8001c7e <Modbus_Master_Control+0x94e>
							}

							break;
 8001cc4:	e027      	b.n	8001d16 <Modbus_Master_Control+0x9e6>

						case Write_Single_Coil:
							// . . .
							if (areelementsEqual(modbus->TxMessage.TxData, modbus->RxMessage.RxData, modbus->TxMessage.TxIndex) == true)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	1dd8      	adds	r0, r3, #7
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f203 3106 	addw	r1, r3, #774	; 0x306
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	f000 f8b8 	bl	8001e4c <areelementsEqual>
							}
							else
							{
								// komut basarisiz oldu
							}
							break;
 8001cdc:	e01b      	b.n	8001d16 <Modbus_Master_Control+0x9e6>

						case Write_Single_Register:
							// . . .
							if (areelementsEqual(modbus->TxMessage.TxData, modbus->RxMessage.RxData, modbus->TxMessage.TxIndex) == true)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	1dd8      	adds	r0, r3, #7
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f203 3106 	addw	r1, r3, #774	; 0x306
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 32fc 	ldrb.w	r3, [r3, #764]	; 0x2fc
 8001cee:	461a      	mov	r2, r3
 8001cf0:	f000 f8ac 	bl	8001e4c <areelementsEqual>
							}
							else
							{
								// komut basarisiz oldu
							}
							break;
 8001cf4:	e00f      	b.n	8001d16 <Modbus_Master_Control+0x9e6>
							}
							break;

						case Write_Multiple_Registers:
							//. . .
							if(modbus->RxMessage.RxData[5] == modbus->TxMessage.NumOfRegisters)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 330b 	ldrb.w	r3, [r3, #779]	; 0x30b
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	889b      	ldrh	r3, [r3, #4]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d103      	bne.n	8001d0e <Modbus_Master_Control+0x9de>
							{
								// komut basarili calisti
								komut_durum = 1;
 8001d06:	4b18      	ldr	r3, [pc, #96]	; (8001d68 <Modbus_Master_Control+0xa38>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	701a      	strb	r2, [r3, #0]
							else
							{
								// komut basarisiz oldu
								komut_durum = 2;
							}
							break;
 8001d0c:	e002      	b.n	8001d14 <Modbus_Master_Control+0x9e4>
								komut_durum = 2;
 8001d0e:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <Modbus_Master_Control+0xa38>)
 8001d10:	2202      	movs	r2, #2
 8001d12:	701a      	strb	r2, [r3, #0]
							break;
 8001d14:	bf00      	nop

					}

					modbus->State = Idle;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 235d 	strb.w	r2, [r3, #861]	; 0x35d
				}


			}

			break;
 8001d1e:	e010      	b.n	8001d42 <Modbus_Master_Control+0xa12>

		case Processing_Error:
			// Hata durumu yonetimi

			if (Tick_Timer_Check_Elapsed_Time(&errorTime))
 8001d20:	4812      	ldr	r0, [pc, #72]	; (8001d6c <Modbus_Master_Control+0xa3c>)
 8001d22:	f7ff fa9d 	bl	8001260 <Tick_Timer_Check_Elapsed_Time>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00c      	beq.n	8001d46 <Modbus_Master_Control+0xa16>
			{
				modbus->State = Idle;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 235d 	strb.w	r2, [r3, #861]	; 0x35d
			}

			break;
 8001d34:	e007      	b.n	8001d46 <Modbus_Master_Control+0xa16>

		default:

			break;
 8001d36:	bf00      	nop
 8001d38:	e006      	b.n	8001d48 <Modbus_Master_Control+0xa18>
			break;
 8001d3a:	bf00      	nop
 8001d3c:	e004      	b.n	8001d48 <Modbus_Master_Control+0xa18>
			break;
 8001d3e:	bf00      	nop
 8001d40:	e002      	b.n	8001d48 <Modbus_Master_Control+0xa18>
			break;
 8001d42:	bf00      	nop
 8001d44:	e000      	b.n	8001d48 <Modbus_Master_Control+0xa18>
			break;
 8001d46:	bf00      	nop
	}

}
 8001d48:	bf00      	nop
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	200013dd 	.word	0x200013dd
 8001d54:	200013de 	.word	0x200013de
 8001d58:	200013df 	.word	0x200013df
 8001d5c:	200013e0 	.word	0x200013e0
 8001d60:	200013e1 	.word	0x200013e1
 8001d64:	200013e4 	.word	0x200013e4
 8001d68:	200013e2 	.word	0x200013e2
 8001d6c:	200013d0 	.word	0x200013d0

08001d70 <Modbus_Master_Write>:

uint8_t Modbus_Master_Write(uint8_t *buffer , uint8_t length)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(TX_RX_EN1_GPIO_Port, TX_RX_EN1_Pin, GPIO_PIN_SET);
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	2110      	movs	r1, #16
 8001d80:	4816      	ldr	r0, [pc, #88]	; (8001ddc <Modbus_Master_Write+0x6c>)
 8001d82:	f000 ffad 	bl	8002ce0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TX_RX_EN2_GPIO_Port, TX_RX_EN2_Pin, GPIO_PIN_SET);
 8001d86:	2201      	movs	r2, #1
 8001d88:	2120      	movs	r1, #32
 8001d8a:	4814      	ldr	r0, [pc, #80]	; (8001ddc <Modbus_Master_Write+0x6c>)
 8001d8c:	f000 ffa8 	bl	8002ce0 <HAL_GPIO_WritePin>

	if(HAL_UART_Transmit(&huart2, buffer, length, HAL_MAX_DELAY) == HAL_OK)
 8001d90:	78fb      	ldrb	r3, [r7, #3]
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	f04f 33ff 	mov.w	r3, #4294967295
 8001d98:	6879      	ldr	r1, [r7, #4]
 8001d9a:	4811      	ldr	r0, [pc, #68]	; (8001de0 <Modbus_Master_Write+0x70>)
 8001d9c:	f002 fa4a 	bl	8004234 <HAL_UART_Transmit>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10b      	bne.n	8001dbe <Modbus_Master_Write+0x4e>
	{
		HAL_GPIO_WritePin(TX_RX_EN1_GPIO_Port, TX_RX_EN1_Pin, GPIO_PIN_RESET);
 8001da6:	2200      	movs	r2, #0
 8001da8:	2110      	movs	r1, #16
 8001daa:	480c      	ldr	r0, [pc, #48]	; (8001ddc <Modbus_Master_Write+0x6c>)
 8001dac:	f000 ff98 	bl	8002ce0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TX_RX_EN2_GPIO_Port, TX_RX_EN2_Pin, GPIO_PIN_RESET);
 8001db0:	2200      	movs	r2, #0
 8001db2:	2120      	movs	r1, #32
 8001db4:	4809      	ldr	r0, [pc, #36]	; (8001ddc <Modbus_Master_Write+0x6c>)
 8001db6:	f000 ff93 	bl	8002ce0 <HAL_GPIO_WritePin>
		return HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	e00a      	b.n	8001dd4 <Modbus_Master_Write+0x64>

	}
	else
	{
		HAL_GPIO_WritePin(TX_RX_EN1_GPIO_Port, TX_RX_EN1_Pin, GPIO_PIN_RESET);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2110      	movs	r1, #16
 8001dc2:	4806      	ldr	r0, [pc, #24]	; (8001ddc <Modbus_Master_Write+0x6c>)
 8001dc4:	f000 ff8c 	bl	8002ce0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TX_RX_EN2_GPIO_Port, TX_RX_EN2_Pin, GPIO_PIN_RESET);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2120      	movs	r1, #32
 8001dcc:	4803      	ldr	r0, [pc, #12]	; (8001ddc <Modbus_Master_Write+0x6c>)
 8001dce:	f000 ff87 	bl	8002ce0 <HAL_GPIO_WritePin>
		return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
	}
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40020000 	.word	0x40020000
 8001de0:	20000298 	.word	0x20000298

08001de4 <Modbus_Read_Input_Registers>:
		Tick_Timer_Set_Time(&idleTime, 100);
	}
}

void Modbus_Read_Input_Registers(Modbus_t *modbus , uint8_t SlaveId , uint16_t StartAddress , uint16_t NumberOfRegisters)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	4608      	mov	r0, r1
 8001dee:	4611      	mov	r1, r2
 8001df0:	461a      	mov	r2, r3
 8001df2:	4603      	mov	r3, r0
 8001df4:	72fb      	strb	r3, [r7, #11]
 8001df6:	460b      	mov	r3, r1
 8001df8:	813b      	strh	r3, [r7, #8]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	80fb      	strh	r3, [r7, #6]
	modbus->TxMessage.FunctionCode				= Read_Input_Registers;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2204      	movs	r2, #4
 8001e02:	705a      	strb	r2, [r3, #1]
	modbus->TxMessage.SlaveAddress				= SlaveId;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	7afa      	ldrb	r2, [r7, #11]
 8001e08:	701a      	strb	r2, [r3, #0]
	modbus->TxMessage.StartAddrress				= StartAddress;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	893a      	ldrh	r2, [r7, #8]
 8001e0e:	805a      	strh	r2, [r3, #2]
	modbus->TxMessage.NumOfRegisters			= NumberOfRegisters;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	88fa      	ldrh	r2, [r7, #6]
 8001e14:	809a      	strh	r2, [r3, #4]


	if((modbus->State == Idle) && !(modbus->TxMessage.NewSendMessageStatus) )
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f893 335d 	ldrb.w	r3, [r3, #861]	; 0x35d
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d10f      	bne.n	8001e40 <Modbus_Read_Input_Registers+0x5c>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8001e26:	f083 0301 	eor.w	r3, r3, #1
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d007      	beq.n	8001e40 <Modbus_Read_Input_Registers+0x5c>
	{
		modbus->TxMessage.NewSendMessageStatus = true;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
		Tick_Timer_Set_Time(&idleTime, 100);
 8001e38:	2164      	movs	r1, #100	; 0x64
 8001e3a:	4803      	ldr	r0, [pc, #12]	; (8001e48 <Modbus_Read_Input_Registers+0x64>)
 8001e3c:	f7ff f9ea 	bl	8001214 <Tick_Timer_Set_Time>
	}
}
 8001e40:	bf00      	nop
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	200013b8 	.word	0x200013b8

08001e4c <areelementsEqual>:
	}

}

bool areelementsEqual(uint8_t *txArray , uint8_t *rxArray , uint8_t numOfElements)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b087      	sub	sp, #28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	4613      	mov	r3, r2
 8001e58:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < numOfElements; i++)
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
 8001e5e:	e00e      	b.n	8001e7e <areelementsEqual+0x32>
	{
		if (txArray[i] != rxArray[i])
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	4413      	add	r3, r2
 8001e66:	781a      	ldrb	r2, [r3, #0]
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	68b9      	ldr	r1, [r7, #8]
 8001e6c:	440b      	add	r3, r1
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d001      	beq.n	8001e78 <areelementsEqual+0x2c>
		{
			return false;
 8001e74:	2300      	movs	r3, #0
 8001e76:	e007      	b.n	8001e88 <areelementsEqual+0x3c>
	for (int i = 0; i < numOfElements; i++)
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	dbec      	blt.n	8001e60 <areelementsEqual+0x14>
		}
	}

	return true;
 8001e86:	2301      	movs	r3, #1
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	371c      	adds	r7, #28
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e98:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <HAL_Init+0x40>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a0d      	ldr	r2, [pc, #52]	; (8001ed4 <HAL_Init+0x40>)
 8001e9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ea2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <HAL_Init+0x40>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a0a      	ldr	r2, [pc, #40]	; (8001ed4 <HAL_Init+0x40>)
 8001eaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eb0:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <HAL_Init+0x40>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a07      	ldr	r2, [pc, #28]	; (8001ed4 <HAL_Init+0x40>)
 8001eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ebc:	2003      	movs	r0, #3
 8001ebe:	f000 f94f 	bl	8002160 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	f000 f808 	bl	8001ed8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ec8:	f7fe fda8 	bl	8000a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40023c00 	.word	0x40023c00

08001ed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ee0:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <HAL_InitTick+0x54>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <HAL_InitTick+0x58>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	4619      	mov	r1, r3
 8001eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 f967 	bl	80021ca <HAL_SYSTICK_Config>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e00e      	b.n	8001f24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b0f      	cmp	r3, #15
 8001f0a:	d80a      	bhi.n	8001f22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	f04f 30ff 	mov.w	r0, #4294967295
 8001f14:	f000 f92f 	bl	8002176 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f18:	4a06      	ldr	r2, [pc, #24]	; (8001f34 <HAL_InitTick+0x5c>)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	e000      	b.n	8001f24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20000000 	.word	0x20000000
 8001f30:	20000008 	.word	0x20000008
 8001f34:	20000004 	.word	0x20000004

08001f38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <HAL_IncTick+0x20>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	461a      	mov	r2, r3
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_IncTick+0x24>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4413      	add	r3, r2
 8001f48:	4a04      	ldr	r2, [pc, #16]	; (8001f5c <HAL_IncTick+0x24>)
 8001f4a:	6013      	str	r3, [r2, #0]
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	20000008 	.word	0x20000008
 8001f5c:	200013f0 	.word	0x200013f0

08001f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return uwTick;
 8001f64:	4b03      	ldr	r3, [pc, #12]	; (8001f74 <HAL_GetTick+0x14>)
 8001f66:	681b      	ldr	r3, [r3, #0]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	200013f0 	.word	0x200013f0

08001f78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f80:	f7ff ffee 	bl	8001f60 <HAL_GetTick>
 8001f84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f90:	d005      	beq.n	8001f9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f92:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <HAL_Delay+0x44>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	461a      	mov	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f9e:	bf00      	nop
 8001fa0:	f7ff ffde 	bl	8001f60 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d8f7      	bhi.n	8001fa0 <HAL_Delay+0x28>
  {
  }
}
 8001fb0:	bf00      	nop
 8001fb2:	bf00      	nop
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000008 	.word	0x20000008

08001fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fdc:	4013      	ands	r3, r2
 8001fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fe8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ff2:	4a04      	ldr	r2, [pc, #16]	; (8002004 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	60d3      	str	r3, [r2, #12]
}
 8001ff8:	bf00      	nop
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800200c:	4b04      	ldr	r3, [pc, #16]	; (8002020 <__NVIC_GetPriorityGrouping+0x18>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	0a1b      	lsrs	r3, r3, #8
 8002012:	f003 0307 	and.w	r3, r3, #7
}
 8002016:	4618      	mov	r0, r3
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800202e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002032:	2b00      	cmp	r3, #0
 8002034:	db0b      	blt.n	800204e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	f003 021f 	and.w	r2, r3, #31
 800203c:	4907      	ldr	r1, [pc, #28]	; (800205c <__NVIC_EnableIRQ+0x38>)
 800203e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002042:	095b      	lsrs	r3, r3, #5
 8002044:	2001      	movs	r0, #1
 8002046:	fa00 f202 	lsl.w	r2, r0, r2
 800204a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	e000e100 	.word	0xe000e100

08002060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	6039      	str	r1, [r7, #0]
 800206a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800206c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002070:	2b00      	cmp	r3, #0
 8002072:	db0a      	blt.n	800208a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	b2da      	uxtb	r2, r3
 8002078:	490c      	ldr	r1, [pc, #48]	; (80020ac <__NVIC_SetPriority+0x4c>)
 800207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207e:	0112      	lsls	r2, r2, #4
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	440b      	add	r3, r1
 8002084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002088:	e00a      	b.n	80020a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	b2da      	uxtb	r2, r3
 800208e:	4908      	ldr	r1, [pc, #32]	; (80020b0 <__NVIC_SetPriority+0x50>)
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	3b04      	subs	r3, #4
 8002098:	0112      	lsls	r2, r2, #4
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	440b      	add	r3, r1
 800209e:	761a      	strb	r2, [r3, #24]
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	e000e100 	.word	0xe000e100
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b089      	sub	sp, #36	; 0x24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f1c3 0307 	rsb	r3, r3, #7
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	bf28      	it	cs
 80020d2:	2304      	movcs	r3, #4
 80020d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3304      	adds	r3, #4
 80020da:	2b06      	cmp	r3, #6
 80020dc:	d902      	bls.n	80020e4 <NVIC_EncodePriority+0x30>
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3b03      	subs	r3, #3
 80020e2:	e000      	b.n	80020e6 <NVIC_EncodePriority+0x32>
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e8:	f04f 32ff 	mov.w	r2, #4294967295
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43da      	mvns	r2, r3
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	401a      	ands	r2, r3
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	fa01 f303 	lsl.w	r3, r1, r3
 8002106:	43d9      	mvns	r1, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	4313      	orrs	r3, r2
         );
}
 800210e:	4618      	mov	r0, r3
 8002110:	3724      	adds	r7, #36	; 0x24
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
	...

0800211c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3b01      	subs	r3, #1
 8002128:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800212c:	d301      	bcc.n	8002132 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800212e:	2301      	movs	r3, #1
 8002130:	e00f      	b.n	8002152 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002132:	4a0a      	ldr	r2, [pc, #40]	; (800215c <SysTick_Config+0x40>)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3b01      	subs	r3, #1
 8002138:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800213a:	210f      	movs	r1, #15
 800213c:	f04f 30ff 	mov.w	r0, #4294967295
 8002140:	f7ff ff8e 	bl	8002060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002144:	4b05      	ldr	r3, [pc, #20]	; (800215c <SysTick_Config+0x40>)
 8002146:	2200      	movs	r2, #0
 8002148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800214a:	4b04      	ldr	r3, [pc, #16]	; (800215c <SysTick_Config+0x40>)
 800214c:	2207      	movs	r2, #7
 800214e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	e000e010 	.word	0xe000e010

08002160 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7ff ff29 	bl	8001fc0 <__NVIC_SetPriorityGrouping>
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002176:	b580      	push	{r7, lr}
 8002178:	b086      	sub	sp, #24
 800217a:	af00      	add	r7, sp, #0
 800217c:	4603      	mov	r3, r0
 800217e:	60b9      	str	r1, [r7, #8]
 8002180:	607a      	str	r2, [r7, #4]
 8002182:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002188:	f7ff ff3e 	bl	8002008 <__NVIC_GetPriorityGrouping>
 800218c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	68b9      	ldr	r1, [r7, #8]
 8002192:	6978      	ldr	r0, [r7, #20]
 8002194:	f7ff ff8e 	bl	80020b4 <NVIC_EncodePriority>
 8002198:	4602      	mov	r2, r0
 800219a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800219e:	4611      	mov	r1, r2
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff ff5d 	bl	8002060 <__NVIC_SetPriority>
}
 80021a6:	bf00      	nop
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b082      	sub	sp, #8
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	4603      	mov	r3, r0
 80021b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff ff31 	bl	8002024 <__NVIC_EnableIRQ>
}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7ff ffa2 	bl	800211c <SysTick_Config>
 80021d8:	4603      	mov	r3, r0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b084      	sub	sp, #16
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021f0:	f7ff feb6 	bl	8001f60 <HAL_GetTick>
 80021f4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d008      	beq.n	8002214 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2280      	movs	r2, #128	; 0x80
 8002206:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e052      	b.n	80022ba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0216 	bic.w	r2, r2, #22
 8002222:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695a      	ldr	r2, [r3, #20]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002232:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002238:	2b00      	cmp	r3, #0
 800223a:	d103      	bne.n	8002244 <HAL_DMA_Abort+0x62>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002240:	2b00      	cmp	r3, #0
 8002242:	d007      	beq.n	8002254 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0208 	bic.w	r2, r2, #8
 8002252:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0201 	bic.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002264:	e013      	b.n	800228e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002266:	f7ff fe7b 	bl	8001f60 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b05      	cmp	r3, #5
 8002272:	d90c      	bls.n	800228e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2220      	movs	r2, #32
 8002278:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2203      	movs	r2, #3
 800227e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e015      	b.n	80022ba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1e4      	bne.n	8002266 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a0:	223f      	movs	r2, #63	; 0x3f
 80022a2:	409a      	lsls	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d004      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2280      	movs	r2, #128	; 0x80
 80022da:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e00c      	b.n	80022fa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2205      	movs	r2, #5
 80022e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0201 	bic.w	r2, r2, #1
 80022f6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
	...

08002308 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e06c      	b.n	80023f4 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002320:	2b00      	cmp	r3, #0
 8002322:	d106      	bne.n	8002332 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2223      	movs	r2, #35	; 0x23
 8002328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7fe fb9d 	bl	8000a6c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	60bb      	str	r3, [r7, #8]
 8002336:	4b31      	ldr	r3, [pc, #196]	; (80023fc <HAL_ETH_Init+0xf4>)
 8002338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233a:	4a30      	ldr	r2, [pc, #192]	; (80023fc <HAL_ETH_Init+0xf4>)
 800233c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002340:	6453      	str	r3, [r2, #68]	; 0x44
 8002342:	4b2e      	ldr	r3, [pc, #184]	; (80023fc <HAL_ETH_Init+0xf4>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800234a:	60bb      	str	r3, [r7, #8]
 800234c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800234e:	4b2c      	ldr	r3, [pc, #176]	; (8002400 <HAL_ETH_Init+0xf8>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	4a2b      	ldr	r2, [pc, #172]	; (8002400 <HAL_ETH_Init+0xf8>)
 8002354:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002358:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800235a:	4b29      	ldr	r3, [pc, #164]	; (8002400 <HAL_ETH_Init+0xf8>)
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	4927      	ldr	r1, [pc, #156]	; (8002400 <HAL_ETH_Init+0xf8>)
 8002364:	4313      	orrs	r3, r2
 8002366:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002368:	4b25      	ldr	r3, [pc, #148]	; (8002400 <HAL_ETH_Init+0xf8>)
 800236a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6812      	ldr	r2, [r2, #0]
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002382:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002384:	f7ff fdec 	bl	8001f60 <HAL_GetTick>
 8002388:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800238a:	e011      	b.n	80023b0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800238c:	f7ff fde8 	bl	8001f60 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800239a:	d909      	bls.n	80023b0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2204      	movs	r2, #4
 80023a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	22e0      	movs	r2, #224	; 0xe0
 80023a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e021      	b.n	80023f4 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1e4      	bne.n	800238c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f958 	bl	8002678 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f9ff 	bl	80027cc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 fa55 	bl	800287e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	461a      	mov	r2, r3
 80023da:	2100      	movs	r1, #0
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 f9bd 	bl	800275c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2210      	movs	r2, #16
 80023ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40023800 	.word	0x40023800
 8002400:	40013800 	.word	0x40013800

08002404 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	4b51      	ldr	r3, [pc, #324]	; (8002560 <ETH_SetMACConfig+0x15c>)
 800241a:	4013      	ands	r3, r2
 800241c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	7c1b      	ldrb	r3, [r3, #16]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d102      	bne.n	800242c <ETH_SetMACConfig+0x28>
 8002426:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800242a:	e000      	b.n	800242e <ETH_SetMACConfig+0x2a>
 800242c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	7c5b      	ldrb	r3, [r3, #17]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d102      	bne.n	800243c <ETH_SetMACConfig+0x38>
 8002436:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800243a:	e000      	b.n	800243e <ETH_SetMACConfig+0x3a>
 800243c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800243e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002444:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	7fdb      	ldrb	r3, [r3, #31]
 800244a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800244c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002452:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	7f92      	ldrb	r2, [r2, #30]
 8002458:	2a00      	cmp	r2, #0
 800245a:	d102      	bne.n	8002462 <ETH_SetMACConfig+0x5e>
 800245c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002460:	e000      	b.n	8002464 <ETH_SetMACConfig+0x60>
 8002462:	2200      	movs	r2, #0
                        macconf->Speed |
 8002464:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	7f1b      	ldrb	r3, [r3, #28]
 800246a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800246c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002472:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	791b      	ldrb	r3, [r3, #4]
 8002478:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800247a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002482:	2a00      	cmp	r2, #0
 8002484:	d102      	bne.n	800248c <ETH_SetMACConfig+0x88>
 8002486:	f44f 7200 	mov.w	r2, #512	; 0x200
 800248a:	e000      	b.n	800248e <ETH_SetMACConfig+0x8a>
 800248c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800248e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	7bdb      	ldrb	r3, [r3, #15]
 8002494:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002496:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800249c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80024a4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80024a6:	4313      	orrs	r3, r2
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024be:	2001      	movs	r0, #1
 80024c0:	f7ff fd5a 	bl	8001f78 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80024da:	4013      	ands	r3, r2
 80024dc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024e2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80024ea:	2a00      	cmp	r2, #0
 80024ec:	d101      	bne.n	80024f2 <ETH_SetMACConfig+0xee>
 80024ee:	2280      	movs	r2, #128	; 0x80
 80024f0:	e000      	b.n	80024f4 <ETH_SetMACConfig+0xf0>
 80024f2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80024f4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80024fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002502:	2a01      	cmp	r2, #1
 8002504:	d101      	bne.n	800250a <ETH_SetMACConfig+0x106>
 8002506:	2208      	movs	r2, #8
 8002508:	e000      	b.n	800250c <ETH_SetMACConfig+0x108>
 800250a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800250c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002514:	2a01      	cmp	r2, #1
 8002516:	d101      	bne.n	800251c <ETH_SetMACConfig+0x118>
 8002518:	2204      	movs	r2, #4
 800251a:	e000      	b.n	800251e <ETH_SetMACConfig+0x11a>
 800251c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800251e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002526:	2a01      	cmp	r2, #1
 8002528:	d101      	bne.n	800252e <ETH_SetMACConfig+0x12a>
 800252a:	2202      	movs	r2, #2
 800252c:	e000      	b.n	8002530 <ETH_SetMACConfig+0x12c>
 800252e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002530:	4313      	orrs	r3, r2
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	4313      	orrs	r3, r2
 8002536:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002548:	2001      	movs	r0, #1
 800254a:	f7ff fd15 	bl	8001f78 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	619a      	str	r2, [r3, #24]
}
 8002556:	bf00      	nop
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	ff20810f 	.word	0xff20810f

08002564 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	4b3d      	ldr	r3, [pc, #244]	; (8002674 <ETH_SetDMAConfig+0x110>)
 800257e:	4013      	ands	r3, r2
 8002580:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	7b1b      	ldrb	r3, [r3, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d102      	bne.n	8002590 <ETH_SetDMAConfig+0x2c>
 800258a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800258e:	e000      	b.n	8002592 <ETH_SetDMAConfig+0x2e>
 8002590:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	7b5b      	ldrb	r3, [r3, #13]
 8002596:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002598:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	7f52      	ldrb	r2, [r2, #29]
 800259e:	2a00      	cmp	r2, #0
 80025a0:	d102      	bne.n	80025a8 <ETH_SetDMAConfig+0x44>
 80025a2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80025a6:	e000      	b.n	80025aa <ETH_SetDMAConfig+0x46>
 80025a8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80025aa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	7b9b      	ldrb	r3, [r3, #14]
 80025b0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80025b2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80025b8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	7f1b      	ldrb	r3, [r3, #28]
 80025be:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80025c0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	7f9b      	ldrb	r3, [r3, #30]
 80025c6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80025c8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80025ce:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025d6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80025d8:	4313      	orrs	r3, r2
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	4313      	orrs	r3, r2
 80025de:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025e8:	461a      	mov	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025fa:	2001      	movs	r0, #1
 80025fc:	f7ff fcbc 	bl	8001f78 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002608:	461a      	mov	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	791b      	ldrb	r3, [r3, #4]
 8002612:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002618:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800261e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002624:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800262c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800262e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002634:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002636:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800263c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6812      	ldr	r2, [r2, #0]
 8002642:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002646:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800264a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002658:	2001      	movs	r0, #1
 800265a:	f7ff fc8d 	bl	8001f78 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002666:	461a      	mov	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6013      	str	r3, [r2, #0]
}
 800266c:	bf00      	nop
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	f8de3f23 	.word	0xf8de3f23

08002678 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b0a6      	sub	sp, #152	; 0x98
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002680:	2301      	movs	r3, #1
 8002682:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002686:	2301      	movs	r3, #1
 8002688:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800268c:	2300      	movs	r3, #0
 800268e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002690:	2300      	movs	r3, #0
 8002692:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002696:	2301      	movs	r3, #1
 8002698:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800269c:	2300      	movs	r3, #0
 800269e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80026a2:	2301      	movs	r3, #1
 80026a4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80026a8:	2300      	movs	r3, #0
 80026aa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80026ae:	2300      	movs	r3, #0
 80026b0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80026b4:	2300      	movs	r3, #0
 80026b6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80026b8:	2300      	movs	r3, #0
 80026ba:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80026be:	2300      	movs	r3, #0
 80026c0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80026c2:	2300      	movs	r3, #0
 80026c4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80026c8:	2300      	movs	r3, #0
 80026ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80026ce:	2300      	movs	r3, #0
 80026d0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80026d4:	2300      	movs	r3, #0
 80026d6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80026da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026de:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80026e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80026e6:	2300      	movs	r3, #0
 80026e8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80026ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026f0:	4619      	mov	r1, r3
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff fe86 	bl	8002404 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80026f8:	2301      	movs	r3, #1
 80026fa:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80026fc:	2301      	movs	r3, #1
 80026fe:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002700:	2301      	movs	r3, #1
 8002702:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002706:	2301      	movs	r3, #1
 8002708:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800270a:	2300      	movs	r3, #0
 800270c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800270e:	2300      	movs	r3, #0
 8002710:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002714:	2300      	movs	r3, #0
 8002716:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800271a:	2300      	movs	r3, #0
 800271c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800271e:	2301      	movs	r3, #1
 8002720:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002724:	2301      	movs	r3, #1
 8002726:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002728:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800272c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800272e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002732:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002734:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002738:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800273a:	2301      	movs	r3, #1
 800273c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002740:	2300      	movs	r3, #0
 8002742:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002744:	2300      	movs	r3, #0
 8002746:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002748:	f107 0308 	add.w	r3, r7, #8
 800274c:	4619      	mov	r1, r3
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7ff ff08 	bl	8002564 <ETH_SetDMAConfig>
}
 8002754:	bf00      	nop
 8002756:	3798      	adds	r7, #152	; 0x98
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800275c:	b480      	push	{r7}
 800275e:	b087      	sub	sp, #28
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3305      	adds	r3, #5
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	021b      	lsls	r3, r3, #8
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	3204      	adds	r2, #4
 8002774:	7812      	ldrb	r2, [r2, #0]
 8002776:	4313      	orrs	r3, r2
 8002778:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <ETH_MACAddressConfig+0x68>)
 800277e:	4413      	add	r3, r2
 8002780:	461a      	mov	r2, r3
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3303      	adds	r3, #3
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	061a      	lsls	r2, r3, #24
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3302      	adds	r3, #2
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	041b      	lsls	r3, r3, #16
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3301      	adds	r3, #1
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	021b      	lsls	r3, r3, #8
 80027a0:	4313      	orrs	r3, r2
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	7812      	ldrb	r2, [r2, #0]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <ETH_MACAddressConfig+0x6c>)
 80027ae:	4413      	add	r3, r2
 80027b0:	461a      	mov	r2, r3
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	6013      	str	r3, [r2, #0]
}
 80027b6:	bf00      	nop
 80027b8:	371c      	adds	r7, #28
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40028040 	.word	0x40028040
 80027c8:	40028044 	.word	0x40028044

080027cc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80027d4:	2300      	movs	r3, #0
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	e03e      	b.n	8002858 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68d9      	ldr	r1, [r3, #12]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	440b      	add	r3, r1
 80027ea:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2200      	movs	r2, #0
 80027f6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2200      	movs	r2, #0
 80027fc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	2200      	movs	r2, #0
 8002802:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002804:	68b9      	ldr	r1, [r7, #8]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	3206      	adds	r2, #6
 800280c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2b02      	cmp	r3, #2
 8002820:	d80c      	bhi.n	800283c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68d9      	ldr	r1, [r3, #12]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	1c5a      	adds	r2, r3, #1
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	440b      	add	r3, r1
 8002834:	461a      	mov	r2, r3
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	60da      	str	r2, [r3, #12]
 800283a:	e004      	b.n	8002846 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	461a      	mov	r2, r3
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	3301      	adds	r3, #1
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2b03      	cmp	r3, #3
 800285c:	d9bd      	bls.n	80027da <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002870:	611a      	str	r2, [r3, #16]
}
 8002872:	bf00      	nop
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800287e:	b480      	push	{r7}
 8002880:	b085      	sub	sp, #20
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002886:	2300      	movs	r3, #0
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	e046      	b.n	800291a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6919      	ldr	r1, [r3, #16]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	440b      	add	r3, r1
 800289c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	2200      	movs	r2, #0
 80028a8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	2200      	movs	r2, #0
 80028ae:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2200      	movs	r2, #0
 80028b4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2200      	movs	r2, #0
 80028ba:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	2200      	movs	r2, #0
 80028c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80028c8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80028d0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80028de:	68b9      	ldr	r1, [r7, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	3212      	adds	r2, #18
 80028e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d80c      	bhi.n	800290a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6919      	ldr	r1, [r3, #16]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	1c5a      	adds	r2, r3, #1
 80028f8:	4613      	mov	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	440b      	add	r3, r1
 8002902:	461a      	mov	r2, r3
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	60da      	str	r2, [r3, #12]
 8002908:	e004      	b.n	8002914 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	461a      	mov	r2, r3
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	3301      	adds	r3, #1
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2b03      	cmp	r3, #3
 800291e:	d9b5      	bls.n	800288c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691a      	ldr	r2, [r3, #16]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800294a:	60da      	str	r2, [r3, #12]
}
 800294c:	bf00      	nop
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002958:	b480      	push	{r7}
 800295a:	b089      	sub	sp, #36	; 0x24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002962:	2300      	movs	r3, #0
 8002964:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002966:	2300      	movs	r3, #0
 8002968:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800296a:	2300      	movs	r3, #0
 800296c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
 8002972:	e177      	b.n	8002c64 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002974:	2201      	movs	r2, #1
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	4013      	ands	r3, r2
 8002986:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	429a      	cmp	r2, r3
 800298e:	f040 8166 	bne.w	8002c5e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	2b01      	cmp	r3, #1
 800299c:	d005      	beq.n	80029aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d130      	bne.n	8002a0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	2203      	movs	r2, #3
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43db      	mvns	r3, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4013      	ands	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	68da      	ldr	r2, [r3, #12]
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029e0:	2201      	movs	r2, #1
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	4013      	ands	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	091b      	lsrs	r3, r3, #4
 80029f6:	f003 0201 	and.w	r2, r3, #1
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 0303 	and.w	r3, r3, #3
 8002a14:	2b03      	cmp	r3, #3
 8002a16:	d017      	beq.n	8002a48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	2203      	movs	r2, #3
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d123      	bne.n	8002a9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	08da      	lsrs	r2, r3, #3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3208      	adds	r2, #8
 8002a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	220f      	movs	r2, #15
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	43db      	mvns	r3, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4013      	ands	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	691a      	ldr	r2, [r3, #16]
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	08da      	lsrs	r2, r3, #3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	3208      	adds	r2, #8
 8002a96:	69b9      	ldr	r1, [r7, #24]
 8002a98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	2203      	movs	r2, #3
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f003 0203 	and.w	r2, r3, #3
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 80c0 	beq.w	8002c5e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	4b66      	ldr	r3, [pc, #408]	; (8002c7c <HAL_GPIO_Init+0x324>)
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae6:	4a65      	ldr	r2, [pc, #404]	; (8002c7c <HAL_GPIO_Init+0x324>)
 8002ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aec:	6453      	str	r3, [r2, #68]	; 0x44
 8002aee:	4b63      	ldr	r3, [pc, #396]	; (8002c7c <HAL_GPIO_Init+0x324>)
 8002af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002afa:	4a61      	ldr	r2, [pc, #388]	; (8002c80 <HAL_GPIO_Init+0x328>)
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	089b      	lsrs	r3, r3, #2
 8002b00:	3302      	adds	r3, #2
 8002b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	220f      	movs	r2, #15
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	43db      	mvns	r3, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a58      	ldr	r2, [pc, #352]	; (8002c84 <HAL_GPIO_Init+0x32c>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d037      	beq.n	8002b96 <HAL_GPIO_Init+0x23e>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a57      	ldr	r2, [pc, #348]	; (8002c88 <HAL_GPIO_Init+0x330>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d031      	beq.n	8002b92 <HAL_GPIO_Init+0x23a>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a56      	ldr	r2, [pc, #344]	; (8002c8c <HAL_GPIO_Init+0x334>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d02b      	beq.n	8002b8e <HAL_GPIO_Init+0x236>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a55      	ldr	r2, [pc, #340]	; (8002c90 <HAL_GPIO_Init+0x338>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d025      	beq.n	8002b8a <HAL_GPIO_Init+0x232>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a54      	ldr	r2, [pc, #336]	; (8002c94 <HAL_GPIO_Init+0x33c>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d01f      	beq.n	8002b86 <HAL_GPIO_Init+0x22e>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a53      	ldr	r2, [pc, #332]	; (8002c98 <HAL_GPIO_Init+0x340>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d019      	beq.n	8002b82 <HAL_GPIO_Init+0x22a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a52      	ldr	r2, [pc, #328]	; (8002c9c <HAL_GPIO_Init+0x344>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d013      	beq.n	8002b7e <HAL_GPIO_Init+0x226>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a51      	ldr	r2, [pc, #324]	; (8002ca0 <HAL_GPIO_Init+0x348>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d00d      	beq.n	8002b7a <HAL_GPIO_Init+0x222>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a50      	ldr	r2, [pc, #320]	; (8002ca4 <HAL_GPIO_Init+0x34c>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d007      	beq.n	8002b76 <HAL_GPIO_Init+0x21e>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a4f      	ldr	r2, [pc, #316]	; (8002ca8 <HAL_GPIO_Init+0x350>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d101      	bne.n	8002b72 <HAL_GPIO_Init+0x21a>
 8002b6e:	2309      	movs	r3, #9
 8002b70:	e012      	b.n	8002b98 <HAL_GPIO_Init+0x240>
 8002b72:	230a      	movs	r3, #10
 8002b74:	e010      	b.n	8002b98 <HAL_GPIO_Init+0x240>
 8002b76:	2308      	movs	r3, #8
 8002b78:	e00e      	b.n	8002b98 <HAL_GPIO_Init+0x240>
 8002b7a:	2307      	movs	r3, #7
 8002b7c:	e00c      	b.n	8002b98 <HAL_GPIO_Init+0x240>
 8002b7e:	2306      	movs	r3, #6
 8002b80:	e00a      	b.n	8002b98 <HAL_GPIO_Init+0x240>
 8002b82:	2305      	movs	r3, #5
 8002b84:	e008      	b.n	8002b98 <HAL_GPIO_Init+0x240>
 8002b86:	2304      	movs	r3, #4
 8002b88:	e006      	b.n	8002b98 <HAL_GPIO_Init+0x240>
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e004      	b.n	8002b98 <HAL_GPIO_Init+0x240>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	e002      	b.n	8002b98 <HAL_GPIO_Init+0x240>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <HAL_GPIO_Init+0x240>
 8002b96:	2300      	movs	r3, #0
 8002b98:	69fa      	ldr	r2, [r7, #28]
 8002b9a:	f002 0203 	and.w	r2, r2, #3
 8002b9e:	0092      	lsls	r2, r2, #2
 8002ba0:	4093      	lsls	r3, r2
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ba8:	4935      	ldr	r1, [pc, #212]	; (8002c80 <HAL_GPIO_Init+0x328>)
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	089b      	lsrs	r3, r3, #2
 8002bae:	3302      	adds	r3, #2
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bb6:	4b3d      	ldr	r3, [pc, #244]	; (8002cac <HAL_GPIO_Init+0x354>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bda:	4a34      	ldr	r2, [pc, #208]	; (8002cac <HAL_GPIO_Init+0x354>)
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002be0:	4b32      	ldr	r3, [pc, #200]	; (8002cac <HAL_GPIO_Init+0x354>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	43db      	mvns	r3, r3
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4013      	ands	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c04:	4a29      	ldr	r2, [pc, #164]	; (8002cac <HAL_GPIO_Init+0x354>)
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c0a:	4b28      	ldr	r3, [pc, #160]	; (8002cac <HAL_GPIO_Init+0x354>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	43db      	mvns	r3, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4013      	ands	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c2e:	4a1f      	ldr	r2, [pc, #124]	; (8002cac <HAL_GPIO_Init+0x354>)
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c34:	4b1d      	ldr	r3, [pc, #116]	; (8002cac <HAL_GPIO_Init+0x354>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d003      	beq.n	8002c58 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c58:	4a14      	ldr	r2, [pc, #80]	; (8002cac <HAL_GPIO_Init+0x354>)
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	3301      	adds	r3, #1
 8002c62:	61fb      	str	r3, [r7, #28]
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	2b0f      	cmp	r3, #15
 8002c68:	f67f ae84 	bls.w	8002974 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c6c:	bf00      	nop
 8002c6e:	bf00      	nop
 8002c70:	3724      	adds	r7, #36	; 0x24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	40013800 	.word	0x40013800
 8002c84:	40020000 	.word	0x40020000
 8002c88:	40020400 	.word	0x40020400
 8002c8c:	40020800 	.word	0x40020800
 8002c90:	40020c00 	.word	0x40020c00
 8002c94:	40021000 	.word	0x40021000
 8002c98:	40021400 	.word	0x40021400
 8002c9c:	40021800 	.word	0x40021800
 8002ca0:	40021c00 	.word	0x40021c00
 8002ca4:	40022000 	.word	0x40022000
 8002ca8:	40022400 	.word	0x40022400
 8002cac:	40013c00 	.word	0x40013c00

08002cb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	460b      	mov	r3, r1
 8002cba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691a      	ldr	r2, [r3, #16]
 8002cc0:	887b      	ldrh	r3, [r7, #2]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d002      	beq.n	8002cce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	73fb      	strb	r3, [r7, #15]
 8002ccc:	e001      	b.n	8002cd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	460b      	mov	r3, r1
 8002cea:	807b      	strh	r3, [r7, #2]
 8002cec:	4613      	mov	r3, r2
 8002cee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cf0:	787b      	ldrb	r3, [r7, #1]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cf6:	887a      	ldrh	r2, [r7, #2]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cfc:	e003      	b.n	8002d06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cfe:	887b      	ldrh	r3, [r7, #2]
 8002d00:	041a      	lsls	r2, r3, #16
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	619a      	str	r2, [r3, #24]
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b085      	sub	sp, #20
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d24:	887a      	ldrh	r2, [r7, #2]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	041a      	lsls	r2, r3, #16
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	43d9      	mvns	r1, r3
 8002d30:	887b      	ldrh	r3, [r7, #2]
 8002d32:	400b      	ands	r3, r1
 8002d34:	431a      	orrs	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	619a      	str	r2, [r3, #24]
}
 8002d3a:	bf00      	nop
 8002d3c:	3714      	adds	r7, #20
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b086      	sub	sp, #24
 8002d4a:	af02      	add	r7, sp, #8
 8002d4c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e101      	b.n	8002f5c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d106      	bne.n	8002d78 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7fe f80a 	bl	8000d8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2203      	movs	r2, #3
 8002d7c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d86:	d102      	bne.n	8002d8e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f002 fa64 	bl	8005260 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6818      	ldr	r0, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	7c1a      	ldrb	r2, [r3, #16]
 8002da0:	f88d 2000 	strb.w	r2, [sp]
 8002da4:	3304      	adds	r3, #4
 8002da6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002da8:	f002 f9f6 	bl	8005198 <USB_CoreInit>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d005      	beq.n	8002dbe <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2202      	movs	r2, #2
 8002db6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e0ce      	b.n	8002f5c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f002 fa5c 	bl	8005282 <USB_SetCurrentMode>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0bf      	b.n	8002f5c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ddc:	2300      	movs	r3, #0
 8002dde:	73fb      	strb	r3, [r7, #15]
 8002de0:	e04a      	b.n	8002e78 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002de2:	7bfa      	ldrb	r2, [r7, #15]
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	4613      	mov	r3, r2
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	4413      	add	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	440b      	add	r3, r1
 8002df0:	3315      	adds	r3, #21
 8002df2:	2201      	movs	r2, #1
 8002df4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002df6:	7bfa      	ldrb	r2, [r7, #15]
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	4413      	add	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	440b      	add	r3, r1
 8002e04:	3314      	adds	r3, #20
 8002e06:	7bfa      	ldrb	r2, [r7, #15]
 8002e08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e0a:	7bfa      	ldrb	r2, [r7, #15]
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
 8002e0e:	b298      	uxth	r0, r3
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	4613      	mov	r3, r2
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	4413      	add	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	440b      	add	r3, r1
 8002e1c:	332e      	adds	r3, #46	; 0x2e
 8002e1e:	4602      	mov	r2, r0
 8002e20:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e22:	7bfa      	ldrb	r2, [r7, #15]
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	4413      	add	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	440b      	add	r3, r1
 8002e30:	3318      	adds	r3, #24
 8002e32:	2200      	movs	r2, #0
 8002e34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e36:	7bfa      	ldrb	r2, [r7, #15]
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	4413      	add	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	440b      	add	r3, r1
 8002e44:	331c      	adds	r3, #28
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e4a:	7bfa      	ldrb	r2, [r7, #15]
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	4413      	add	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	440b      	add	r3, r1
 8002e58:	3320      	adds	r3, #32
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e5e:	7bfa      	ldrb	r2, [r7, #15]
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	4613      	mov	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	4413      	add	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	3324      	adds	r3, #36	; 0x24
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e72:	7bfb      	ldrb	r3, [r7, #15]
 8002e74:	3301      	adds	r3, #1
 8002e76:	73fb      	strb	r3, [r7, #15]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	791b      	ldrb	r3, [r3, #4]
 8002e7c:	7bfa      	ldrb	r2, [r7, #15]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d3af      	bcc.n	8002de2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e82:	2300      	movs	r3, #0
 8002e84:	73fb      	strb	r3, [r7, #15]
 8002e86:	e044      	b.n	8002f12 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e88:	7bfa      	ldrb	r2, [r7, #15]
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	4413      	add	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	4413      	add	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002eb0:	7bfa      	ldrb	r2, [r7, #15]
 8002eb2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002eb4:	7bfa      	ldrb	r2, [r7, #15]
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002eca:	7bfa      	ldrb	r2, [r7, #15]
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ee0:	7bfa      	ldrb	r2, [r7, #15]
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	4413      	add	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ef6:	7bfa      	ldrb	r2, [r7, #15]
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	4613      	mov	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	4413      	add	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	440b      	add	r3, r1
 8002f04:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	73fb      	strb	r3, [r7, #15]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	791b      	ldrb	r3, [r3, #4]
 8002f16:	7bfa      	ldrb	r2, [r7, #15]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d3b5      	bcc.n	8002e88 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6818      	ldr	r0, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	7c1a      	ldrb	r2, [r3, #16]
 8002f24:	f88d 2000 	strb.w	r2, [sp]
 8002f28:	3304      	adds	r3, #4
 8002f2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f2c:	f002 f9f6 	bl	800531c <USB_DevInit>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d005      	beq.n	8002f42 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2202      	movs	r2, #2
 8002f3a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e00c      	b.n	8002f5c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f002 fbbe 	bl	80056d6 <USB_DevDisconnect>

  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e267      	b.n	8003446 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d075      	beq.n	800306e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f82:	4b88      	ldr	r3, [pc, #544]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 030c 	and.w	r3, r3, #12
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	d00c      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f8e:	4b85      	ldr	r3, [pc, #532]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f96:	2b08      	cmp	r3, #8
 8002f98:	d112      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f9a:	4b82      	ldr	r3, [pc, #520]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fa6:	d10b      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa8:	4b7e      	ldr	r3, [pc, #504]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d05b      	beq.n	800306c <HAL_RCC_OscConfig+0x108>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d157      	bne.n	800306c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e242      	b.n	8003446 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fc8:	d106      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x74>
 8002fca:	4b76      	ldr	r3, [pc, #472]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a75      	ldr	r2, [pc, #468]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 8002fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd4:	6013      	str	r3, [r2, #0]
 8002fd6:	e01d      	b.n	8003014 <HAL_RCC_OscConfig+0xb0>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fe0:	d10c      	bne.n	8002ffc <HAL_RCC_OscConfig+0x98>
 8002fe2:	4b70      	ldr	r3, [pc, #448]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a6f      	ldr	r2, [pc, #444]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 8002fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	4b6d      	ldr	r3, [pc, #436]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a6c      	ldr	r2, [pc, #432]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 8002ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff8:	6013      	str	r3, [r2, #0]
 8002ffa:	e00b      	b.n	8003014 <HAL_RCC_OscConfig+0xb0>
 8002ffc:	4b69      	ldr	r3, [pc, #420]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a68      	ldr	r2, [pc, #416]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 8003002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003006:	6013      	str	r3, [r2, #0]
 8003008:	4b66      	ldr	r3, [pc, #408]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a65      	ldr	r2, [pc, #404]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 800300e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003012:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d013      	beq.n	8003044 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301c:	f7fe ffa0 	bl	8001f60 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003024:	f7fe ff9c 	bl	8001f60 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b64      	cmp	r3, #100	; 0x64
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e207      	b.n	8003446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003036:	4b5b      	ldr	r3, [pc, #364]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f0      	beq.n	8003024 <HAL_RCC_OscConfig+0xc0>
 8003042:	e014      	b.n	800306e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003044:	f7fe ff8c 	bl	8001f60 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800304c:	f7fe ff88 	bl	8001f60 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b64      	cmp	r3, #100	; 0x64
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e1f3      	b.n	8003446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800305e:	4b51      	ldr	r3, [pc, #324]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1f0      	bne.n	800304c <HAL_RCC_OscConfig+0xe8>
 800306a:	e000      	b.n	800306e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800306c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d063      	beq.n	8003142 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800307a:	4b4a      	ldr	r3, [pc, #296]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 030c 	and.w	r3, r3, #12
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00b      	beq.n	800309e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003086:	4b47      	ldr	r3, [pc, #284]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800308e:	2b08      	cmp	r3, #8
 8003090:	d11c      	bne.n	80030cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003092:	4b44      	ldr	r3, [pc, #272]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d116      	bne.n	80030cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800309e:	4b41      	ldr	r3, [pc, #260]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d005      	beq.n	80030b6 <HAL_RCC_OscConfig+0x152>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d001      	beq.n	80030b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e1c7      	b.n	8003446 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b6:	4b3b      	ldr	r3, [pc, #236]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	4937      	ldr	r1, [pc, #220]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ca:	e03a      	b.n	8003142 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d020      	beq.n	8003116 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030d4:	4b34      	ldr	r3, [pc, #208]	; (80031a8 <HAL_RCC_OscConfig+0x244>)
 80030d6:	2201      	movs	r2, #1
 80030d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030da:	f7fe ff41 	bl	8001f60 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030e2:	f7fe ff3d 	bl	8001f60 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e1a8      	b.n	8003446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f4:	4b2b      	ldr	r3, [pc, #172]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0f0      	beq.n	80030e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003100:	4b28      	ldr	r3, [pc, #160]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	4925      	ldr	r1, [pc, #148]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 8003110:	4313      	orrs	r3, r2
 8003112:	600b      	str	r3, [r1, #0]
 8003114:	e015      	b.n	8003142 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003116:	4b24      	ldr	r3, [pc, #144]	; (80031a8 <HAL_RCC_OscConfig+0x244>)
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311c:	f7fe ff20 	bl	8001f60 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003124:	f7fe ff1c 	bl	8001f60 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e187      	b.n	8003446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003136:	4b1b      	ldr	r3, [pc, #108]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1f0      	bne.n	8003124 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0308 	and.w	r3, r3, #8
 800314a:	2b00      	cmp	r3, #0
 800314c:	d036      	beq.n	80031bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d016      	beq.n	8003184 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003156:	4b15      	ldr	r3, [pc, #84]	; (80031ac <HAL_RCC_OscConfig+0x248>)
 8003158:	2201      	movs	r2, #1
 800315a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315c:	f7fe ff00 	bl	8001f60 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003164:	f7fe fefc 	bl	8001f60 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e167      	b.n	8003446 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003176:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 8003178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0f0      	beq.n	8003164 <HAL_RCC_OscConfig+0x200>
 8003182:	e01b      	b.n	80031bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003184:	4b09      	ldr	r3, [pc, #36]	; (80031ac <HAL_RCC_OscConfig+0x248>)
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800318a:	f7fe fee9 	bl	8001f60 <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003190:	e00e      	b.n	80031b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003192:	f7fe fee5 	bl	8001f60 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d907      	bls.n	80031b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e150      	b.n	8003446 <HAL_RCC_OscConfig+0x4e2>
 80031a4:	40023800 	.word	0x40023800
 80031a8:	42470000 	.word	0x42470000
 80031ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b0:	4b88      	ldr	r3, [pc, #544]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 80031b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1ea      	bne.n	8003192 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 8097 	beq.w	80032f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ca:	2300      	movs	r3, #0
 80031cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ce:	4b81      	ldr	r3, [pc, #516]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10f      	bne.n	80031fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031da:	2300      	movs	r3, #0
 80031dc:	60bb      	str	r3, [r7, #8]
 80031de:	4b7d      	ldr	r3, [pc, #500]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	4a7c      	ldr	r2, [pc, #496]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 80031e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e8:	6413      	str	r3, [r2, #64]	; 0x40
 80031ea:	4b7a      	ldr	r3, [pc, #488]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f2:	60bb      	str	r3, [r7, #8]
 80031f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031f6:	2301      	movs	r3, #1
 80031f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031fa:	4b77      	ldr	r3, [pc, #476]	; (80033d8 <HAL_RCC_OscConfig+0x474>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003202:	2b00      	cmp	r3, #0
 8003204:	d118      	bne.n	8003238 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003206:	4b74      	ldr	r3, [pc, #464]	; (80033d8 <HAL_RCC_OscConfig+0x474>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a73      	ldr	r2, [pc, #460]	; (80033d8 <HAL_RCC_OscConfig+0x474>)
 800320c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003210:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003212:	f7fe fea5 	bl	8001f60 <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003218:	e008      	b.n	800322c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800321a:	f7fe fea1 	bl	8001f60 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e10c      	b.n	8003446 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800322c:	4b6a      	ldr	r3, [pc, #424]	; (80033d8 <HAL_RCC_OscConfig+0x474>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0f0      	beq.n	800321a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d106      	bne.n	800324e <HAL_RCC_OscConfig+0x2ea>
 8003240:	4b64      	ldr	r3, [pc, #400]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 8003242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003244:	4a63      	ldr	r2, [pc, #396]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 8003246:	f043 0301 	orr.w	r3, r3, #1
 800324a:	6713      	str	r3, [r2, #112]	; 0x70
 800324c:	e01c      	b.n	8003288 <HAL_RCC_OscConfig+0x324>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	2b05      	cmp	r3, #5
 8003254:	d10c      	bne.n	8003270 <HAL_RCC_OscConfig+0x30c>
 8003256:	4b5f      	ldr	r3, [pc, #380]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 8003258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325a:	4a5e      	ldr	r2, [pc, #376]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 800325c:	f043 0304 	orr.w	r3, r3, #4
 8003260:	6713      	str	r3, [r2, #112]	; 0x70
 8003262:	4b5c      	ldr	r3, [pc, #368]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 8003264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003266:	4a5b      	ldr	r2, [pc, #364]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 8003268:	f043 0301 	orr.w	r3, r3, #1
 800326c:	6713      	str	r3, [r2, #112]	; 0x70
 800326e:	e00b      	b.n	8003288 <HAL_RCC_OscConfig+0x324>
 8003270:	4b58      	ldr	r3, [pc, #352]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 8003272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003274:	4a57      	ldr	r2, [pc, #348]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 8003276:	f023 0301 	bic.w	r3, r3, #1
 800327a:	6713      	str	r3, [r2, #112]	; 0x70
 800327c:	4b55      	ldr	r3, [pc, #340]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 800327e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003280:	4a54      	ldr	r2, [pc, #336]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 8003282:	f023 0304 	bic.w	r3, r3, #4
 8003286:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d015      	beq.n	80032bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003290:	f7fe fe66 	bl	8001f60 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003296:	e00a      	b.n	80032ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003298:	f7fe fe62 	bl	8001f60 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e0cb      	b.n	8003446 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ae:	4b49      	ldr	r3, [pc, #292]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 80032b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0ee      	beq.n	8003298 <HAL_RCC_OscConfig+0x334>
 80032ba:	e014      	b.n	80032e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032bc:	f7fe fe50 	bl	8001f60 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c2:	e00a      	b.n	80032da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032c4:	f7fe fe4c 	bl	8001f60 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e0b5      	b.n	8003446 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032da:	4b3e      	ldr	r3, [pc, #248]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 80032dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1ee      	bne.n	80032c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032e6:	7dfb      	ldrb	r3, [r7, #23]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d105      	bne.n	80032f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ec:	4b39      	ldr	r3, [pc, #228]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 80032ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f0:	4a38      	ldr	r2, [pc, #224]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 80032f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 80a1 	beq.w	8003444 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003302:	4b34      	ldr	r3, [pc, #208]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 030c 	and.w	r3, r3, #12
 800330a:	2b08      	cmp	r3, #8
 800330c:	d05c      	beq.n	80033c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	2b02      	cmp	r3, #2
 8003314:	d141      	bne.n	800339a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003316:	4b31      	ldr	r3, [pc, #196]	; (80033dc <HAL_RCC_OscConfig+0x478>)
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331c:	f7fe fe20 	bl	8001f60 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003324:	f7fe fe1c 	bl	8001f60 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e087      	b.n	8003446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003336:	4b27      	ldr	r3, [pc, #156]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f0      	bne.n	8003324 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69da      	ldr	r2, [r3, #28]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	019b      	lsls	r3, r3, #6
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003358:	085b      	lsrs	r3, r3, #1
 800335a:	3b01      	subs	r3, #1
 800335c:	041b      	lsls	r3, r3, #16
 800335e:	431a      	orrs	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003364:	061b      	lsls	r3, r3, #24
 8003366:	491b      	ldr	r1, [pc, #108]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 8003368:	4313      	orrs	r3, r2
 800336a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800336c:	4b1b      	ldr	r3, [pc, #108]	; (80033dc <HAL_RCC_OscConfig+0x478>)
 800336e:	2201      	movs	r2, #1
 8003370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003372:	f7fe fdf5 	bl	8001f60 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800337a:	f7fe fdf1 	bl	8001f60 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e05c      	b.n	8003446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800338c:	4b11      	ldr	r3, [pc, #68]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0f0      	beq.n	800337a <HAL_RCC_OscConfig+0x416>
 8003398:	e054      	b.n	8003444 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800339a:	4b10      	ldr	r3, [pc, #64]	; (80033dc <HAL_RCC_OscConfig+0x478>)
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a0:	f7fe fdde 	bl	8001f60 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033a8:	f7fe fdda 	bl	8001f60 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e045      	b.n	8003446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ba:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1f0      	bne.n	80033a8 <HAL_RCC_OscConfig+0x444>
 80033c6:	e03d      	b.n	8003444 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d107      	bne.n	80033e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e038      	b.n	8003446 <HAL_RCC_OscConfig+0x4e2>
 80033d4:	40023800 	.word	0x40023800
 80033d8:	40007000 	.word	0x40007000
 80033dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033e0:	4b1b      	ldr	r3, [pc, #108]	; (8003450 <HAL_RCC_OscConfig+0x4ec>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d028      	beq.n	8003440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d121      	bne.n	8003440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003406:	429a      	cmp	r2, r3
 8003408:	d11a      	bne.n	8003440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003410:	4013      	ands	r3, r2
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003416:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003418:	4293      	cmp	r3, r2
 800341a:	d111      	bne.n	8003440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003426:	085b      	lsrs	r3, r3, #1
 8003428:	3b01      	subs	r3, #1
 800342a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800342c:	429a      	cmp	r2, r3
 800342e:	d107      	bne.n	8003440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800343c:	429a      	cmp	r2, r3
 800343e:	d001      	beq.n	8003444 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e000      	b.n	8003446 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40023800 	.word	0x40023800

08003454 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e0cc      	b.n	8003602 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003468:	4b68      	ldr	r3, [pc, #416]	; (800360c <HAL_RCC_ClockConfig+0x1b8>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 030f 	and.w	r3, r3, #15
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	429a      	cmp	r2, r3
 8003474:	d90c      	bls.n	8003490 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003476:	4b65      	ldr	r3, [pc, #404]	; (800360c <HAL_RCC_ClockConfig+0x1b8>)
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	b2d2      	uxtb	r2, r2
 800347c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800347e:	4b63      	ldr	r3, [pc, #396]	; (800360c <HAL_RCC_ClockConfig+0x1b8>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	429a      	cmp	r2, r3
 800348a:	d001      	beq.n	8003490 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e0b8      	b.n	8003602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d020      	beq.n	80034de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0304 	and.w	r3, r3, #4
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d005      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034a8:	4b59      	ldr	r3, [pc, #356]	; (8003610 <HAL_RCC_ClockConfig+0x1bc>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	4a58      	ldr	r2, [pc, #352]	; (8003610 <HAL_RCC_ClockConfig+0x1bc>)
 80034ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0308 	and.w	r3, r3, #8
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d005      	beq.n	80034cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034c0:	4b53      	ldr	r3, [pc, #332]	; (8003610 <HAL_RCC_ClockConfig+0x1bc>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	4a52      	ldr	r2, [pc, #328]	; (8003610 <HAL_RCC_ClockConfig+0x1bc>)
 80034c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034cc:	4b50      	ldr	r3, [pc, #320]	; (8003610 <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	494d      	ldr	r1, [pc, #308]	; (8003610 <HAL_RCC_ClockConfig+0x1bc>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d044      	beq.n	8003574 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d107      	bne.n	8003502 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034f2:	4b47      	ldr	r3, [pc, #284]	; (8003610 <HAL_RCC_ClockConfig+0x1bc>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d119      	bne.n	8003532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e07f      	b.n	8003602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2b02      	cmp	r3, #2
 8003508:	d003      	beq.n	8003512 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800350e:	2b03      	cmp	r3, #3
 8003510:	d107      	bne.n	8003522 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003512:	4b3f      	ldr	r3, [pc, #252]	; (8003610 <HAL_RCC_ClockConfig+0x1bc>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d109      	bne.n	8003532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e06f      	b.n	8003602 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003522:	4b3b      	ldr	r3, [pc, #236]	; (8003610 <HAL_RCC_ClockConfig+0x1bc>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e067      	b.n	8003602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003532:	4b37      	ldr	r3, [pc, #220]	; (8003610 <HAL_RCC_ClockConfig+0x1bc>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f023 0203 	bic.w	r2, r3, #3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	4934      	ldr	r1, [pc, #208]	; (8003610 <HAL_RCC_ClockConfig+0x1bc>)
 8003540:	4313      	orrs	r3, r2
 8003542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003544:	f7fe fd0c 	bl	8001f60 <HAL_GetTick>
 8003548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800354a:	e00a      	b.n	8003562 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800354c:	f7fe fd08 	bl	8001f60 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	f241 3288 	movw	r2, #5000	; 0x1388
 800355a:	4293      	cmp	r3, r2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e04f      	b.n	8003602 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003562:	4b2b      	ldr	r3, [pc, #172]	; (8003610 <HAL_RCC_ClockConfig+0x1bc>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 020c 	and.w	r2, r3, #12
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	429a      	cmp	r2, r3
 8003572:	d1eb      	bne.n	800354c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003574:	4b25      	ldr	r3, [pc, #148]	; (800360c <HAL_RCC_ClockConfig+0x1b8>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 030f 	and.w	r3, r3, #15
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	429a      	cmp	r2, r3
 8003580:	d20c      	bcs.n	800359c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003582:	4b22      	ldr	r3, [pc, #136]	; (800360c <HAL_RCC_ClockConfig+0x1b8>)
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800358a:	4b20      	ldr	r3, [pc, #128]	; (800360c <HAL_RCC_ClockConfig+0x1b8>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 030f 	and.w	r3, r3, #15
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	429a      	cmp	r2, r3
 8003596:	d001      	beq.n	800359c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e032      	b.n	8003602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d008      	beq.n	80035ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035a8:	4b19      	ldr	r3, [pc, #100]	; (8003610 <HAL_RCC_ClockConfig+0x1bc>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	4916      	ldr	r1, [pc, #88]	; (8003610 <HAL_RCC_ClockConfig+0x1bc>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0308 	and.w	r3, r3, #8
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d009      	beq.n	80035da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035c6:	4b12      	ldr	r3, [pc, #72]	; (8003610 <HAL_RCC_ClockConfig+0x1bc>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	490e      	ldr	r1, [pc, #56]	; (8003610 <HAL_RCC_ClockConfig+0x1bc>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035da:	f000 f821 	bl	8003620 <HAL_RCC_GetSysClockFreq>
 80035de:	4602      	mov	r2, r0
 80035e0:	4b0b      	ldr	r3, [pc, #44]	; (8003610 <HAL_RCC_ClockConfig+0x1bc>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	091b      	lsrs	r3, r3, #4
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	490a      	ldr	r1, [pc, #40]	; (8003614 <HAL_RCC_ClockConfig+0x1c0>)
 80035ec:	5ccb      	ldrb	r3, [r1, r3]
 80035ee:	fa22 f303 	lsr.w	r3, r2, r3
 80035f2:	4a09      	ldr	r2, [pc, #36]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 80035f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035f6:	4b09      	ldr	r3, [pc, #36]	; (800361c <HAL_RCC_ClockConfig+0x1c8>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fe fc6c 	bl	8001ed8 <HAL_InitTick>

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	40023c00 	.word	0x40023c00
 8003610:	40023800 	.word	0x40023800
 8003614:	08005824 	.word	0x08005824
 8003618:	20000000 	.word	0x20000000
 800361c:	20000004 	.word	0x20000004

08003620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003624:	b094      	sub	sp, #80	; 0x50
 8003626:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003628:	2300      	movs	r3, #0
 800362a:	647b      	str	r3, [r7, #68]	; 0x44
 800362c:	2300      	movs	r3, #0
 800362e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003630:	2300      	movs	r3, #0
 8003632:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003638:	4b79      	ldr	r3, [pc, #484]	; (8003820 <HAL_RCC_GetSysClockFreq+0x200>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f003 030c 	and.w	r3, r3, #12
 8003640:	2b08      	cmp	r3, #8
 8003642:	d00d      	beq.n	8003660 <HAL_RCC_GetSysClockFreq+0x40>
 8003644:	2b08      	cmp	r3, #8
 8003646:	f200 80e1 	bhi.w	800380c <HAL_RCC_GetSysClockFreq+0x1ec>
 800364a:	2b00      	cmp	r3, #0
 800364c:	d002      	beq.n	8003654 <HAL_RCC_GetSysClockFreq+0x34>
 800364e:	2b04      	cmp	r3, #4
 8003650:	d003      	beq.n	800365a <HAL_RCC_GetSysClockFreq+0x3a>
 8003652:	e0db      	b.n	800380c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003654:	4b73      	ldr	r3, [pc, #460]	; (8003824 <HAL_RCC_GetSysClockFreq+0x204>)
 8003656:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003658:	e0db      	b.n	8003812 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800365a:	4b73      	ldr	r3, [pc, #460]	; (8003828 <HAL_RCC_GetSysClockFreq+0x208>)
 800365c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800365e:	e0d8      	b.n	8003812 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003660:	4b6f      	ldr	r3, [pc, #444]	; (8003820 <HAL_RCC_GetSysClockFreq+0x200>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003668:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800366a:	4b6d      	ldr	r3, [pc, #436]	; (8003820 <HAL_RCC_GetSysClockFreq+0x200>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d063      	beq.n	800373e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003676:	4b6a      	ldr	r3, [pc, #424]	; (8003820 <HAL_RCC_GetSysClockFreq+0x200>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	099b      	lsrs	r3, r3, #6
 800367c:	2200      	movs	r2, #0
 800367e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003680:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003688:	633b      	str	r3, [r7, #48]	; 0x30
 800368a:	2300      	movs	r3, #0
 800368c:	637b      	str	r3, [r7, #52]	; 0x34
 800368e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003692:	4622      	mov	r2, r4
 8003694:	462b      	mov	r3, r5
 8003696:	f04f 0000 	mov.w	r0, #0
 800369a:	f04f 0100 	mov.w	r1, #0
 800369e:	0159      	lsls	r1, r3, #5
 80036a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036a4:	0150      	lsls	r0, r2, #5
 80036a6:	4602      	mov	r2, r0
 80036a8:	460b      	mov	r3, r1
 80036aa:	4621      	mov	r1, r4
 80036ac:	1a51      	subs	r1, r2, r1
 80036ae:	6139      	str	r1, [r7, #16]
 80036b0:	4629      	mov	r1, r5
 80036b2:	eb63 0301 	sbc.w	r3, r3, r1
 80036b6:	617b      	str	r3, [r7, #20]
 80036b8:	f04f 0200 	mov.w	r2, #0
 80036bc:	f04f 0300 	mov.w	r3, #0
 80036c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036c4:	4659      	mov	r1, fp
 80036c6:	018b      	lsls	r3, r1, #6
 80036c8:	4651      	mov	r1, sl
 80036ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036ce:	4651      	mov	r1, sl
 80036d0:	018a      	lsls	r2, r1, #6
 80036d2:	4651      	mov	r1, sl
 80036d4:	ebb2 0801 	subs.w	r8, r2, r1
 80036d8:	4659      	mov	r1, fp
 80036da:	eb63 0901 	sbc.w	r9, r3, r1
 80036de:	f04f 0200 	mov.w	r2, #0
 80036e2:	f04f 0300 	mov.w	r3, #0
 80036e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036f2:	4690      	mov	r8, r2
 80036f4:	4699      	mov	r9, r3
 80036f6:	4623      	mov	r3, r4
 80036f8:	eb18 0303 	adds.w	r3, r8, r3
 80036fc:	60bb      	str	r3, [r7, #8]
 80036fe:	462b      	mov	r3, r5
 8003700:	eb49 0303 	adc.w	r3, r9, r3
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	f04f 0200 	mov.w	r2, #0
 800370a:	f04f 0300 	mov.w	r3, #0
 800370e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003712:	4629      	mov	r1, r5
 8003714:	024b      	lsls	r3, r1, #9
 8003716:	4621      	mov	r1, r4
 8003718:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800371c:	4621      	mov	r1, r4
 800371e:	024a      	lsls	r2, r1, #9
 8003720:	4610      	mov	r0, r2
 8003722:	4619      	mov	r1, r3
 8003724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003726:	2200      	movs	r2, #0
 8003728:	62bb      	str	r3, [r7, #40]	; 0x28
 800372a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800372c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003730:	f7fc fd5c 	bl	80001ec <__aeabi_uldivmod>
 8003734:	4602      	mov	r2, r0
 8003736:	460b      	mov	r3, r1
 8003738:	4613      	mov	r3, r2
 800373a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800373c:	e058      	b.n	80037f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800373e:	4b38      	ldr	r3, [pc, #224]	; (8003820 <HAL_RCC_GetSysClockFreq+0x200>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	099b      	lsrs	r3, r3, #6
 8003744:	2200      	movs	r2, #0
 8003746:	4618      	mov	r0, r3
 8003748:	4611      	mov	r1, r2
 800374a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800374e:	623b      	str	r3, [r7, #32]
 8003750:	2300      	movs	r3, #0
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
 8003754:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003758:	4642      	mov	r2, r8
 800375a:	464b      	mov	r3, r9
 800375c:	f04f 0000 	mov.w	r0, #0
 8003760:	f04f 0100 	mov.w	r1, #0
 8003764:	0159      	lsls	r1, r3, #5
 8003766:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800376a:	0150      	lsls	r0, r2, #5
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	4641      	mov	r1, r8
 8003772:	ebb2 0a01 	subs.w	sl, r2, r1
 8003776:	4649      	mov	r1, r9
 8003778:	eb63 0b01 	sbc.w	fp, r3, r1
 800377c:	f04f 0200 	mov.w	r2, #0
 8003780:	f04f 0300 	mov.w	r3, #0
 8003784:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003788:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800378c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003790:	ebb2 040a 	subs.w	r4, r2, sl
 8003794:	eb63 050b 	sbc.w	r5, r3, fp
 8003798:	f04f 0200 	mov.w	r2, #0
 800379c:	f04f 0300 	mov.w	r3, #0
 80037a0:	00eb      	lsls	r3, r5, #3
 80037a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037a6:	00e2      	lsls	r2, r4, #3
 80037a8:	4614      	mov	r4, r2
 80037aa:	461d      	mov	r5, r3
 80037ac:	4643      	mov	r3, r8
 80037ae:	18e3      	adds	r3, r4, r3
 80037b0:	603b      	str	r3, [r7, #0]
 80037b2:	464b      	mov	r3, r9
 80037b4:	eb45 0303 	adc.w	r3, r5, r3
 80037b8:	607b      	str	r3, [r7, #4]
 80037ba:	f04f 0200 	mov.w	r2, #0
 80037be:	f04f 0300 	mov.w	r3, #0
 80037c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037c6:	4629      	mov	r1, r5
 80037c8:	028b      	lsls	r3, r1, #10
 80037ca:	4621      	mov	r1, r4
 80037cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037d0:	4621      	mov	r1, r4
 80037d2:	028a      	lsls	r2, r1, #10
 80037d4:	4610      	mov	r0, r2
 80037d6:	4619      	mov	r1, r3
 80037d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037da:	2200      	movs	r2, #0
 80037dc:	61bb      	str	r3, [r7, #24]
 80037de:	61fa      	str	r2, [r7, #28]
 80037e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037e4:	f7fc fd02 	bl	80001ec <__aeabi_uldivmod>
 80037e8:	4602      	mov	r2, r0
 80037ea:	460b      	mov	r3, r1
 80037ec:	4613      	mov	r3, r2
 80037ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037f0:	4b0b      	ldr	r3, [pc, #44]	; (8003820 <HAL_RCC_GetSysClockFreq+0x200>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	0c1b      	lsrs	r3, r3, #16
 80037f6:	f003 0303 	and.w	r3, r3, #3
 80037fa:	3301      	adds	r3, #1
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003800:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003804:	fbb2 f3f3 	udiv	r3, r2, r3
 8003808:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800380a:	e002      	b.n	8003812 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800380c:	4b05      	ldr	r3, [pc, #20]	; (8003824 <HAL_RCC_GetSysClockFreq+0x204>)
 800380e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003810:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003814:	4618      	mov	r0, r3
 8003816:	3750      	adds	r7, #80	; 0x50
 8003818:	46bd      	mov	sp, r7
 800381a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800381e:	bf00      	nop
 8003820:	40023800 	.word	0x40023800
 8003824:	00f42400 	.word	0x00f42400
 8003828:	007a1200 	.word	0x007a1200

0800382c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003830:	4b03      	ldr	r3, [pc, #12]	; (8003840 <HAL_RCC_GetHCLKFreq+0x14>)
 8003832:	681b      	ldr	r3, [r3, #0]
}
 8003834:	4618      	mov	r0, r3
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	20000000 	.word	0x20000000

08003844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003848:	f7ff fff0 	bl	800382c <HAL_RCC_GetHCLKFreq>
 800384c:	4602      	mov	r2, r0
 800384e:	4b05      	ldr	r3, [pc, #20]	; (8003864 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	0a9b      	lsrs	r3, r3, #10
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	4903      	ldr	r1, [pc, #12]	; (8003868 <HAL_RCC_GetPCLK1Freq+0x24>)
 800385a:	5ccb      	ldrb	r3, [r1, r3]
 800385c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003860:	4618      	mov	r0, r3
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40023800 	.word	0x40023800
 8003868:	08005834 	.word	0x08005834

0800386c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003870:	f7ff ffdc 	bl	800382c <HAL_RCC_GetHCLKFreq>
 8003874:	4602      	mov	r2, r0
 8003876:	4b05      	ldr	r3, [pc, #20]	; (800388c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	0b5b      	lsrs	r3, r3, #13
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	4903      	ldr	r1, [pc, #12]	; (8003890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003882:	5ccb      	ldrb	r3, [r1, r3]
 8003884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003888:	4618      	mov	r0, r3
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40023800 	.word	0x40023800
 8003890:	08005834 	.word	0x08005834

08003894 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e041      	b.n	800392a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d106      	bne.n	80038c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7fd f99c 	bl	8000bf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2202      	movs	r2, #2
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3304      	adds	r3, #4
 80038d0:	4619      	mov	r1, r3
 80038d2:	4610      	mov	r0, r2
 80038d4:	f000 fa88 	bl	8003de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
	...

08003934 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b01      	cmp	r3, #1
 8003946:	d001      	beq.n	800394c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e04e      	b.n	80039ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2202      	movs	r2, #2
 8003950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0201 	orr.w	r2, r2, #1
 8003962:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a23      	ldr	r2, [pc, #140]	; (80039f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d022      	beq.n	80039b4 <HAL_TIM_Base_Start_IT+0x80>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003976:	d01d      	beq.n	80039b4 <HAL_TIM_Base_Start_IT+0x80>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a1f      	ldr	r2, [pc, #124]	; (80039fc <HAL_TIM_Base_Start_IT+0xc8>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d018      	beq.n	80039b4 <HAL_TIM_Base_Start_IT+0x80>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a1e      	ldr	r2, [pc, #120]	; (8003a00 <HAL_TIM_Base_Start_IT+0xcc>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d013      	beq.n	80039b4 <HAL_TIM_Base_Start_IT+0x80>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a1c      	ldr	r2, [pc, #112]	; (8003a04 <HAL_TIM_Base_Start_IT+0xd0>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d00e      	beq.n	80039b4 <HAL_TIM_Base_Start_IT+0x80>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a1b      	ldr	r2, [pc, #108]	; (8003a08 <HAL_TIM_Base_Start_IT+0xd4>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d009      	beq.n	80039b4 <HAL_TIM_Base_Start_IT+0x80>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a19      	ldr	r2, [pc, #100]	; (8003a0c <HAL_TIM_Base_Start_IT+0xd8>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d004      	beq.n	80039b4 <HAL_TIM_Base_Start_IT+0x80>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a18      	ldr	r2, [pc, #96]	; (8003a10 <HAL_TIM_Base_Start_IT+0xdc>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d111      	bne.n	80039d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2b06      	cmp	r3, #6
 80039c4:	d010      	beq.n	80039e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f042 0201 	orr.w	r2, r2, #1
 80039d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039d6:	e007      	b.n	80039e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f042 0201 	orr.w	r2, r2, #1
 80039e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	40010000 	.word	0x40010000
 80039fc:	40000400 	.word	0x40000400
 8003a00:	40000800 	.word	0x40000800
 8003a04:	40000c00 	.word	0x40000c00
 8003a08:	40010400 	.word	0x40010400
 8003a0c:	40014000 	.word	0x40014000
 8003a10:	40001800 	.word	0x40001800

08003a14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d020      	beq.n	8003a78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d01b      	beq.n	8003a78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f06f 0202 	mvn.w	r2, #2
 8003a48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	f003 0303 	and.w	r3, r3, #3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f9a3 	bl	8003daa <HAL_TIM_IC_CaptureCallback>
 8003a64:	e005      	b.n	8003a72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f995 	bl	8003d96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 f9a6 	bl	8003dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	f003 0304 	and.w	r3, r3, #4
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d020      	beq.n	8003ac4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d01b      	beq.n	8003ac4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f06f 0204 	mvn.w	r2, #4
 8003a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2202      	movs	r2, #2
 8003a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f97d 	bl	8003daa <HAL_TIM_IC_CaptureCallback>
 8003ab0:	e005      	b.n	8003abe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f96f 	bl	8003d96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 f980 	bl	8003dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	f003 0308 	and.w	r3, r3, #8
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d020      	beq.n	8003b10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f003 0308 	and.w	r3, r3, #8
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d01b      	beq.n	8003b10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f06f 0208 	mvn.w	r2, #8
 8003ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2204      	movs	r2, #4
 8003ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	f003 0303 	and.w	r3, r3, #3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f957 	bl	8003daa <HAL_TIM_IC_CaptureCallback>
 8003afc:	e005      	b.n	8003b0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f949 	bl	8003d96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 f95a 	bl	8003dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	f003 0310 	and.w	r3, r3, #16
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d020      	beq.n	8003b5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f003 0310 	and.w	r3, r3, #16
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d01b      	beq.n	8003b5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f06f 0210 	mvn.w	r2, #16
 8003b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2208      	movs	r2, #8
 8003b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	69db      	ldr	r3, [r3, #28]
 8003b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f931 	bl	8003daa <HAL_TIM_IC_CaptureCallback>
 8003b48:	e005      	b.n	8003b56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f923 	bl	8003d96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f934 	bl	8003dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00c      	beq.n	8003b80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d007      	beq.n	8003b80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f06f 0201 	mvn.w	r2, #1
 8003b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f901 	bl	8003d82 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00c      	beq.n	8003ba4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d007      	beq.n	8003ba4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 faee 	bl	8004180 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00c      	beq.n	8003bc8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d007      	beq.n	8003bc8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f905 	bl	8003dd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	f003 0320 	and.w	r3, r3, #32
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00c      	beq.n	8003bec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f003 0320 	and.w	r3, r3, #32
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d007      	beq.n	8003bec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f06f 0220 	mvn.w	r2, #32
 8003be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 fac0 	bl	800416c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bec:	bf00      	nop
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d101      	bne.n	8003c10 <HAL_TIM_ConfigClockSource+0x1c>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	e0b4      	b.n	8003d7a <HAL_TIM_ConfigClockSource+0x186>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c48:	d03e      	beq.n	8003cc8 <HAL_TIM_ConfigClockSource+0xd4>
 8003c4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c4e:	f200 8087 	bhi.w	8003d60 <HAL_TIM_ConfigClockSource+0x16c>
 8003c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c56:	f000 8086 	beq.w	8003d66 <HAL_TIM_ConfigClockSource+0x172>
 8003c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c5e:	d87f      	bhi.n	8003d60 <HAL_TIM_ConfigClockSource+0x16c>
 8003c60:	2b70      	cmp	r3, #112	; 0x70
 8003c62:	d01a      	beq.n	8003c9a <HAL_TIM_ConfigClockSource+0xa6>
 8003c64:	2b70      	cmp	r3, #112	; 0x70
 8003c66:	d87b      	bhi.n	8003d60 <HAL_TIM_ConfigClockSource+0x16c>
 8003c68:	2b60      	cmp	r3, #96	; 0x60
 8003c6a:	d050      	beq.n	8003d0e <HAL_TIM_ConfigClockSource+0x11a>
 8003c6c:	2b60      	cmp	r3, #96	; 0x60
 8003c6e:	d877      	bhi.n	8003d60 <HAL_TIM_ConfigClockSource+0x16c>
 8003c70:	2b50      	cmp	r3, #80	; 0x50
 8003c72:	d03c      	beq.n	8003cee <HAL_TIM_ConfigClockSource+0xfa>
 8003c74:	2b50      	cmp	r3, #80	; 0x50
 8003c76:	d873      	bhi.n	8003d60 <HAL_TIM_ConfigClockSource+0x16c>
 8003c78:	2b40      	cmp	r3, #64	; 0x40
 8003c7a:	d058      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0x13a>
 8003c7c:	2b40      	cmp	r3, #64	; 0x40
 8003c7e:	d86f      	bhi.n	8003d60 <HAL_TIM_ConfigClockSource+0x16c>
 8003c80:	2b30      	cmp	r3, #48	; 0x30
 8003c82:	d064      	beq.n	8003d4e <HAL_TIM_ConfigClockSource+0x15a>
 8003c84:	2b30      	cmp	r3, #48	; 0x30
 8003c86:	d86b      	bhi.n	8003d60 <HAL_TIM_ConfigClockSource+0x16c>
 8003c88:	2b20      	cmp	r3, #32
 8003c8a:	d060      	beq.n	8003d4e <HAL_TIM_ConfigClockSource+0x15a>
 8003c8c:	2b20      	cmp	r3, #32
 8003c8e:	d867      	bhi.n	8003d60 <HAL_TIM_ConfigClockSource+0x16c>
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d05c      	beq.n	8003d4e <HAL_TIM_ConfigClockSource+0x15a>
 8003c94:	2b10      	cmp	r3, #16
 8003c96:	d05a      	beq.n	8003d4e <HAL_TIM_ConfigClockSource+0x15a>
 8003c98:	e062      	b.n	8003d60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003caa:	f000 f9c3 	bl	8004034 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	609a      	str	r2, [r3, #8]
      break;
 8003cc6:	e04f      	b.n	8003d68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cd8:	f000 f9ac 	bl	8004034 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689a      	ldr	r2, [r3, #8]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cea:	609a      	str	r2, [r3, #8]
      break;
 8003cec:	e03c      	b.n	8003d68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	f000 f920 	bl	8003f40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2150      	movs	r1, #80	; 0x50
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 f979 	bl	8003ffe <TIM_ITRx_SetConfig>
      break;
 8003d0c:	e02c      	b.n	8003d68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	f000 f93f 	bl	8003f9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2160      	movs	r1, #96	; 0x60
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 f969 	bl	8003ffe <TIM_ITRx_SetConfig>
      break;
 8003d2c:	e01c      	b.n	8003d68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	f000 f900 	bl	8003f40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2140      	movs	r1, #64	; 0x40
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 f959 	bl	8003ffe <TIM_ITRx_SetConfig>
      break;
 8003d4c:	e00c      	b.n	8003d68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4619      	mov	r1, r3
 8003d58:	4610      	mov	r0, r2
 8003d5a:	f000 f950 	bl	8003ffe <TIM_ITRx_SetConfig>
      break;
 8003d5e:	e003      	b.n	8003d68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	73fb      	strb	r3, [r7, #15]
      break;
 8003d64:	e000      	b.n	8003d68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003d8a:	bf00      	nop
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
	...

08003de8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a46      	ldr	r2, [pc, #280]	; (8003f14 <TIM_Base_SetConfig+0x12c>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d013      	beq.n	8003e28 <TIM_Base_SetConfig+0x40>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e06:	d00f      	beq.n	8003e28 <TIM_Base_SetConfig+0x40>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a43      	ldr	r2, [pc, #268]	; (8003f18 <TIM_Base_SetConfig+0x130>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d00b      	beq.n	8003e28 <TIM_Base_SetConfig+0x40>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a42      	ldr	r2, [pc, #264]	; (8003f1c <TIM_Base_SetConfig+0x134>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d007      	beq.n	8003e28 <TIM_Base_SetConfig+0x40>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a41      	ldr	r2, [pc, #260]	; (8003f20 <TIM_Base_SetConfig+0x138>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d003      	beq.n	8003e28 <TIM_Base_SetConfig+0x40>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a40      	ldr	r2, [pc, #256]	; (8003f24 <TIM_Base_SetConfig+0x13c>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d108      	bne.n	8003e3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a35      	ldr	r2, [pc, #212]	; (8003f14 <TIM_Base_SetConfig+0x12c>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d02b      	beq.n	8003e9a <TIM_Base_SetConfig+0xb2>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e48:	d027      	beq.n	8003e9a <TIM_Base_SetConfig+0xb2>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a32      	ldr	r2, [pc, #200]	; (8003f18 <TIM_Base_SetConfig+0x130>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d023      	beq.n	8003e9a <TIM_Base_SetConfig+0xb2>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a31      	ldr	r2, [pc, #196]	; (8003f1c <TIM_Base_SetConfig+0x134>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d01f      	beq.n	8003e9a <TIM_Base_SetConfig+0xb2>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a30      	ldr	r2, [pc, #192]	; (8003f20 <TIM_Base_SetConfig+0x138>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d01b      	beq.n	8003e9a <TIM_Base_SetConfig+0xb2>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a2f      	ldr	r2, [pc, #188]	; (8003f24 <TIM_Base_SetConfig+0x13c>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d017      	beq.n	8003e9a <TIM_Base_SetConfig+0xb2>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a2e      	ldr	r2, [pc, #184]	; (8003f28 <TIM_Base_SetConfig+0x140>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d013      	beq.n	8003e9a <TIM_Base_SetConfig+0xb2>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a2d      	ldr	r2, [pc, #180]	; (8003f2c <TIM_Base_SetConfig+0x144>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d00f      	beq.n	8003e9a <TIM_Base_SetConfig+0xb2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a2c      	ldr	r2, [pc, #176]	; (8003f30 <TIM_Base_SetConfig+0x148>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d00b      	beq.n	8003e9a <TIM_Base_SetConfig+0xb2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a2b      	ldr	r2, [pc, #172]	; (8003f34 <TIM_Base_SetConfig+0x14c>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d007      	beq.n	8003e9a <TIM_Base_SetConfig+0xb2>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a2a      	ldr	r2, [pc, #168]	; (8003f38 <TIM_Base_SetConfig+0x150>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d003      	beq.n	8003e9a <TIM_Base_SetConfig+0xb2>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a29      	ldr	r2, [pc, #164]	; (8003f3c <TIM_Base_SetConfig+0x154>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d108      	bne.n	8003eac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ea0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	689a      	ldr	r2, [r3, #8]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a10      	ldr	r2, [pc, #64]	; (8003f14 <TIM_Base_SetConfig+0x12c>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d003      	beq.n	8003ee0 <TIM_Base_SetConfig+0xf8>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a12      	ldr	r2, [pc, #72]	; (8003f24 <TIM_Base_SetConfig+0x13c>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d103      	bne.n	8003ee8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	691a      	ldr	r2, [r3, #16]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d105      	bne.n	8003f06 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f023 0201 	bic.w	r2, r3, #1
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	611a      	str	r2, [r3, #16]
  }
}
 8003f06:	bf00      	nop
 8003f08:	3714      	adds	r7, #20
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	40010000 	.word	0x40010000
 8003f18:	40000400 	.word	0x40000400
 8003f1c:	40000800 	.word	0x40000800
 8003f20:	40000c00 	.word	0x40000c00
 8003f24:	40010400 	.word	0x40010400
 8003f28:	40014000 	.word	0x40014000
 8003f2c:	40014400 	.word	0x40014400
 8003f30:	40014800 	.word	0x40014800
 8003f34:	40001800 	.word	0x40001800
 8003f38:	40001c00 	.word	0x40001c00
 8003f3c:	40002000 	.word	0x40002000

08003f40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	f023 0201 	bic.w	r2, r3, #1
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	011b      	lsls	r3, r3, #4
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f023 030a 	bic.w	r3, r3, #10
 8003f7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	621a      	str	r2, [r3, #32]
}
 8003f92:	bf00      	nop
 8003f94:	371c      	adds	r7, #28
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b087      	sub	sp, #28
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	60f8      	str	r0, [r7, #12]
 8003fa6:	60b9      	str	r1, [r7, #8]
 8003fa8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	f023 0210 	bic.w	r2, r3, #16
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	031b      	lsls	r3, r3, #12
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fda:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	621a      	str	r2, [r3, #32]
}
 8003ff2:	bf00      	nop
 8003ff4:	371c      	adds	r7, #28
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b085      	sub	sp, #20
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
 8004006:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004014:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4313      	orrs	r3, r2
 800401c:	f043 0307 	orr.w	r3, r3, #7
 8004020:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	609a      	str	r2, [r3, #8]
}
 8004028:	bf00      	nop
 800402a:	3714      	adds	r7, #20
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004034:	b480      	push	{r7}
 8004036:	b087      	sub	sp, #28
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
 8004040:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800404e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	021a      	lsls	r2, r3, #8
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	431a      	orrs	r2, r3
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	4313      	orrs	r3, r2
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	4313      	orrs	r3, r2
 8004060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	609a      	str	r2, [r3, #8]
}
 8004068:	bf00      	nop
 800406a:	371c      	adds	r7, #28
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004084:	2b01      	cmp	r3, #1
 8004086:	d101      	bne.n	800408c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004088:	2302      	movs	r3, #2
 800408a:	e05a      	b.n	8004142 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2202      	movs	r2, #2
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a21      	ldr	r2, [pc, #132]	; (8004150 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d022      	beq.n	8004116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040d8:	d01d      	beq.n	8004116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a1d      	ldr	r2, [pc, #116]	; (8004154 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d018      	beq.n	8004116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a1b      	ldr	r2, [pc, #108]	; (8004158 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d013      	beq.n	8004116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a1a      	ldr	r2, [pc, #104]	; (800415c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d00e      	beq.n	8004116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a18      	ldr	r2, [pc, #96]	; (8004160 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d009      	beq.n	8004116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a17      	ldr	r2, [pc, #92]	; (8004164 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d004      	beq.n	8004116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a15      	ldr	r2, [pc, #84]	; (8004168 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d10c      	bne.n	8004130 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800411c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	4313      	orrs	r3, r2
 8004126:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	40010000 	.word	0x40010000
 8004154:	40000400 	.word	0x40000400
 8004158:	40000800 	.word	0x40000800
 800415c:	40000c00 	.word	0x40000c00
 8004160:	40010400 	.word	0x40010400
 8004164:	40014000 	.word	0x40014000
 8004168:	40001800 	.word	0x40001800

0800416c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e042      	b.n	800422c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d106      	bne.n	80041c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7fc fd42 	bl	8000c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2224      	movs	r2, #36	; 0x24
 80041c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68da      	ldr	r2, [r3, #12]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 fd69 	bl	8004cb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	691a      	ldr	r2, [r3, #16]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	695a      	ldr	r2, [r3, #20]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68da      	ldr	r2, [r3, #12]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800420c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2220      	movs	r2, #32
 8004218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2220      	movs	r2, #32
 8004220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b08a      	sub	sp, #40	; 0x28
 8004238:	af02      	add	r7, sp, #8
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	603b      	str	r3, [r7, #0]
 8004240:	4613      	mov	r3, r2
 8004242:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004244:	2300      	movs	r3, #0
 8004246:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b20      	cmp	r3, #32
 8004252:	d175      	bne.n	8004340 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d002      	beq.n	8004260 <HAL_UART_Transmit+0x2c>
 800425a:	88fb      	ldrh	r3, [r7, #6]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e06e      	b.n	8004342 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2221      	movs	r2, #33	; 0x21
 800426e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004272:	f7fd fe75 	bl	8001f60 <HAL_GetTick>
 8004276:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	88fa      	ldrh	r2, [r7, #6]
 800427c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	88fa      	ldrh	r2, [r7, #6]
 8004282:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800428c:	d108      	bne.n	80042a0 <HAL_UART_Transmit+0x6c>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d104      	bne.n	80042a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004296:	2300      	movs	r3, #0
 8004298:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	61bb      	str	r3, [r7, #24]
 800429e:	e003      	b.n	80042a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042a4:	2300      	movs	r3, #0
 80042a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042a8:	e02e      	b.n	8004308 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	2200      	movs	r2, #0
 80042b2:	2180      	movs	r1, #128	; 0x80
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 fb05 	bl	80048c4 <UART_WaitOnFlagUntilTimeout>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d005      	beq.n	80042cc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2220      	movs	r2, #32
 80042c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e03a      	b.n	8004342 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10b      	bne.n	80042ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	881b      	ldrh	r3, [r3, #0]
 80042d6:	461a      	mov	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	3302      	adds	r3, #2
 80042e6:	61bb      	str	r3, [r7, #24]
 80042e8:	e007      	b.n	80042fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	781a      	ldrb	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	3301      	adds	r3, #1
 80042f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042fe:	b29b      	uxth	r3, r3
 8004300:	3b01      	subs	r3, #1
 8004302:	b29a      	uxth	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800430c:	b29b      	uxth	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1cb      	bne.n	80042aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2200      	movs	r2, #0
 800431a:	2140      	movs	r1, #64	; 0x40
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f000 fad1 	bl	80048c4 <UART_WaitOnFlagUntilTimeout>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d005      	beq.n	8004334 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2220      	movs	r2, #32
 800432c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e006      	b.n	8004342 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2220      	movs	r2, #32
 8004338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800433c:	2300      	movs	r3, #0
 800433e:	e000      	b.n	8004342 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004340:	2302      	movs	r3, #2
  }
}
 8004342:	4618      	mov	r0, r3
 8004344:	3720      	adds	r7, #32
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
	...

0800434c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b0ba      	sub	sp, #232	; 0xe8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004372:	2300      	movs	r3, #0
 8004374:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004378:	2300      	movs	r3, #0
 800437a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800437e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800438a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10f      	bne.n	80043b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004396:	f003 0320 	and.w	r3, r3, #32
 800439a:	2b00      	cmp	r3, #0
 800439c:	d009      	beq.n	80043b2 <HAL_UART_IRQHandler+0x66>
 800439e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043a2:	f003 0320 	and.w	r3, r3, #32
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 fbc2 	bl	8004b34 <UART_Receive_IT>
      return;
 80043b0:	e25b      	b.n	800486a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80043b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 80de 	beq.w	8004578 <HAL_UART_IRQHandler+0x22c>
 80043bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d106      	bne.n	80043d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80043c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 80d1 	beq.w	8004578 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80043d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00b      	beq.n	80043fa <HAL_UART_IRQHandler+0xae>
 80043e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d005      	beq.n	80043fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f2:	f043 0201 	orr.w	r2, r3, #1
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043fe:	f003 0304 	and.w	r3, r3, #4
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00b      	beq.n	800441e <HAL_UART_IRQHandler+0xd2>
 8004406:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b00      	cmp	r3, #0
 8004410:	d005      	beq.n	800441e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004416:	f043 0202 	orr.w	r2, r3, #2
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800441e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00b      	beq.n	8004442 <HAL_UART_IRQHandler+0xf6>
 800442a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	d005      	beq.n	8004442 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443a:	f043 0204 	orr.w	r2, r3, #4
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004446:	f003 0308 	and.w	r3, r3, #8
 800444a:	2b00      	cmp	r3, #0
 800444c:	d011      	beq.n	8004472 <HAL_UART_IRQHandler+0x126>
 800444e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004452:	f003 0320 	and.w	r3, r3, #32
 8004456:	2b00      	cmp	r3, #0
 8004458:	d105      	bne.n	8004466 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800445a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d005      	beq.n	8004472 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446a:	f043 0208 	orr.w	r2, r3, #8
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 81f2 	beq.w	8004860 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800447c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004480:	f003 0320 	and.w	r3, r3, #32
 8004484:	2b00      	cmp	r3, #0
 8004486:	d008      	beq.n	800449a <HAL_UART_IRQHandler+0x14e>
 8004488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800448c:	f003 0320 	and.w	r3, r3, #32
 8004490:	2b00      	cmp	r3, #0
 8004492:	d002      	beq.n	800449a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 fb4d 	bl	8004b34 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a4:	2b40      	cmp	r3, #64	; 0x40
 80044a6:	bf0c      	ite	eq
 80044a8:	2301      	moveq	r3, #1
 80044aa:	2300      	movne	r3, #0
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b6:	f003 0308 	and.w	r3, r3, #8
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d103      	bne.n	80044c6 <HAL_UART_IRQHandler+0x17a>
 80044be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d04f      	beq.n	8004566 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 fa55 	bl	8004976 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d6:	2b40      	cmp	r3, #64	; 0x40
 80044d8:	d141      	bne.n	800455e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	3314      	adds	r3, #20
 80044e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044e8:	e853 3f00 	ldrex	r3, [r3]
 80044ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80044f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	3314      	adds	r3, #20
 8004502:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004506:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800450a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004512:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004516:	e841 2300 	strex	r3, r2, [r1]
 800451a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800451e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1d9      	bne.n	80044da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800452a:	2b00      	cmp	r3, #0
 800452c:	d013      	beq.n	8004556 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004532:	4a7e      	ldr	r2, [pc, #504]	; (800472c <HAL_UART_IRQHandler+0x3e0>)
 8004534:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453a:	4618      	mov	r0, r3
 800453c:	f7fd fec1 	bl	80022c2 <HAL_DMA_Abort_IT>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d016      	beq.n	8004574 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800454a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004550:	4610      	mov	r0, r2
 8004552:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004554:	e00e      	b.n	8004574 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f99e 	bl	8004898 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800455c:	e00a      	b.n	8004574 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f99a 	bl	8004898 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004564:	e006      	b.n	8004574 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f996 	bl	8004898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004572:	e175      	b.n	8004860 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004574:	bf00      	nop
    return;
 8004576:	e173      	b.n	8004860 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457c:	2b01      	cmp	r3, #1
 800457e:	f040 814f 	bne.w	8004820 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004586:	f003 0310 	and.w	r3, r3, #16
 800458a:	2b00      	cmp	r3, #0
 800458c:	f000 8148 	beq.w	8004820 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004594:	f003 0310 	and.w	r3, r3, #16
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 8141 	beq.w	8004820 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800459e:	2300      	movs	r3, #0
 80045a0:	60bb      	str	r3, [r7, #8]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	60bb      	str	r3, [r7, #8]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	60bb      	str	r3, [r7, #8]
 80045b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045be:	2b40      	cmp	r3, #64	; 0x40
 80045c0:	f040 80b6 	bne.w	8004730 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80045d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f000 8145 	beq.w	8004864 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045e2:	429a      	cmp	r2, r3
 80045e4:	f080 813e 	bcs.w	8004864 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045fa:	f000 8088 	beq.w	800470e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	330c      	adds	r3, #12
 8004604:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004608:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800460c:	e853 3f00 	ldrex	r3, [r3]
 8004610:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004614:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004618:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800461c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	330c      	adds	r3, #12
 8004626:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800462a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800462e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004632:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004636:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800463a:	e841 2300 	strex	r3, r2, [r1]
 800463e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004642:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1d9      	bne.n	80045fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	3314      	adds	r3, #20
 8004650:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004652:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004654:	e853 3f00 	ldrex	r3, [r3]
 8004658:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800465a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800465c:	f023 0301 	bic.w	r3, r3, #1
 8004660:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	3314      	adds	r3, #20
 800466a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800466e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004672:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004674:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004676:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800467a:	e841 2300 	strex	r3, r2, [r1]
 800467e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004680:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1e1      	bne.n	800464a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	3314      	adds	r3, #20
 800468c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004690:	e853 3f00 	ldrex	r3, [r3]
 8004694:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004696:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004698:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800469c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	3314      	adds	r3, #20
 80046a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80046aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80046ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80046b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80046b2:	e841 2300 	strex	r3, r2, [r1]
 80046b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80046b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1e3      	bne.n	8004686 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2220      	movs	r2, #32
 80046c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	330c      	adds	r3, #12
 80046d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046d6:	e853 3f00 	ldrex	r3, [r3]
 80046da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80046dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046de:	f023 0310 	bic.w	r3, r3, #16
 80046e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	330c      	adds	r3, #12
 80046ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80046f0:	65ba      	str	r2, [r7, #88]	; 0x58
 80046f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80046f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046f8:	e841 2300 	strex	r3, r2, [r1]
 80046fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80046fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1e3      	bne.n	80046cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004708:	4618      	mov	r0, r3
 800470a:	f7fd fd6a 	bl	80021e2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2202      	movs	r2, #2
 8004712:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800471c:	b29b      	uxth	r3, r3
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	b29b      	uxth	r3, r3
 8004722:	4619      	mov	r1, r3
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 f8c1 	bl	80048ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800472a:	e09b      	b.n	8004864 <HAL_UART_IRQHandler+0x518>
 800472c:	08004a3d 	.word	0x08004a3d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004738:	b29b      	uxth	r3, r3
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004744:	b29b      	uxth	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	f000 808e 	beq.w	8004868 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800474c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 8089 	beq.w	8004868 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	330c      	adds	r3, #12
 800475c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004760:	e853 3f00 	ldrex	r3, [r3]
 8004764:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004768:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800476c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	330c      	adds	r3, #12
 8004776:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800477a:	647a      	str	r2, [r7, #68]	; 0x44
 800477c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004780:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004782:	e841 2300 	strex	r3, r2, [r1]
 8004786:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1e3      	bne.n	8004756 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	3314      	adds	r3, #20
 8004794:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004798:	e853 3f00 	ldrex	r3, [r3]
 800479c:	623b      	str	r3, [r7, #32]
   return(result);
 800479e:	6a3b      	ldr	r3, [r7, #32]
 80047a0:	f023 0301 	bic.w	r3, r3, #1
 80047a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	3314      	adds	r3, #20
 80047ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80047b2:	633a      	str	r2, [r7, #48]	; 0x30
 80047b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047ba:	e841 2300 	strex	r3, r2, [r1]
 80047be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1e3      	bne.n	800478e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2220      	movs	r2, #32
 80047ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	330c      	adds	r3, #12
 80047da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	e853 3f00 	ldrex	r3, [r3]
 80047e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f023 0310 	bic.w	r3, r3, #16
 80047ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	330c      	adds	r3, #12
 80047f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80047f8:	61fa      	str	r2, [r7, #28]
 80047fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fc:	69b9      	ldr	r1, [r7, #24]
 80047fe:	69fa      	ldr	r2, [r7, #28]
 8004800:	e841 2300 	strex	r3, r2, [r1]
 8004804:	617b      	str	r3, [r7, #20]
   return(result);
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1e3      	bne.n	80047d4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2202      	movs	r2, #2
 8004810:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004812:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004816:	4619      	mov	r1, r3
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 f847 	bl	80048ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800481e:	e023      	b.n	8004868 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004828:	2b00      	cmp	r3, #0
 800482a:	d009      	beq.n	8004840 <HAL_UART_IRQHandler+0x4f4>
 800482c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004834:	2b00      	cmp	r3, #0
 8004836:	d003      	beq.n	8004840 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 f913 	bl	8004a64 <UART_Transmit_IT>
    return;
 800483e:	e014      	b.n	800486a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00e      	beq.n	800486a <HAL_UART_IRQHandler+0x51e>
 800484c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004854:	2b00      	cmp	r3, #0
 8004856:	d008      	beq.n	800486a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 f953 	bl	8004b04 <UART_EndTransmit_IT>
    return;
 800485e:	e004      	b.n	800486a <HAL_UART_IRQHandler+0x51e>
    return;
 8004860:	bf00      	nop
 8004862:	e002      	b.n	800486a <HAL_UART_IRQHandler+0x51e>
      return;
 8004864:	bf00      	nop
 8004866:	e000      	b.n	800486a <HAL_UART_IRQHandler+0x51e>
      return;
 8004868:	bf00      	nop
  }
}
 800486a:	37e8      	adds	r7, #232	; 0xe8
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	460b      	mov	r3, r1
 80048b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	603b      	str	r3, [r7, #0]
 80048d0:	4613      	mov	r3, r2
 80048d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048d4:	e03b      	b.n	800494e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048dc:	d037      	beq.n	800494e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048de:	f7fd fb3f 	bl	8001f60 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	6a3a      	ldr	r2, [r7, #32]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d302      	bcc.n	80048f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80048ee:	6a3b      	ldr	r3, [r7, #32]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e03a      	b.n	800496e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f003 0304 	and.w	r3, r3, #4
 8004902:	2b00      	cmp	r3, #0
 8004904:	d023      	beq.n	800494e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	2b80      	cmp	r3, #128	; 0x80
 800490a:	d020      	beq.n	800494e <UART_WaitOnFlagUntilTimeout+0x8a>
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2b40      	cmp	r3, #64	; 0x40
 8004910:	d01d      	beq.n	800494e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0308 	and.w	r3, r3, #8
 800491c:	2b08      	cmp	r3, #8
 800491e:	d116      	bne.n	800494e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004920:	2300      	movs	r3, #0
 8004922:	617b      	str	r3, [r7, #20]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	617b      	str	r3, [r7, #20]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	617b      	str	r3, [r7, #20]
 8004934:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f000 f81d 	bl	8004976 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2208      	movs	r2, #8
 8004940:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e00f      	b.n	800496e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	4013      	ands	r3, r2
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	429a      	cmp	r2, r3
 800495c:	bf0c      	ite	eq
 800495e:	2301      	moveq	r3, #1
 8004960:	2300      	movne	r3, #0
 8004962:	b2db      	uxtb	r3, r3
 8004964:	461a      	mov	r2, r3
 8004966:	79fb      	ldrb	r3, [r7, #7]
 8004968:	429a      	cmp	r2, r3
 800496a:	d0b4      	beq.n	80048d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004976:	b480      	push	{r7}
 8004978:	b095      	sub	sp, #84	; 0x54
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	330c      	adds	r3, #12
 8004984:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004988:	e853 3f00 	ldrex	r3, [r3]
 800498c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800498e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004990:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004994:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	330c      	adds	r3, #12
 800499c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800499e:	643a      	str	r2, [r7, #64]	; 0x40
 80049a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049a6:	e841 2300 	strex	r3, r2, [r1]
 80049aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1e5      	bne.n	800497e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	3314      	adds	r3, #20
 80049b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ba:	6a3b      	ldr	r3, [r7, #32]
 80049bc:	e853 3f00 	ldrex	r3, [r3]
 80049c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	f023 0301 	bic.w	r3, r3, #1
 80049c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	3314      	adds	r3, #20
 80049d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049da:	e841 2300 	strex	r3, r2, [r1]
 80049de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1e5      	bne.n	80049b2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d119      	bne.n	8004a22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	330c      	adds	r3, #12
 80049f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	e853 3f00 	ldrex	r3, [r3]
 80049fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	f023 0310 	bic.w	r3, r3, #16
 8004a04:	647b      	str	r3, [r7, #68]	; 0x44
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	330c      	adds	r3, #12
 8004a0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a0e:	61ba      	str	r2, [r7, #24]
 8004a10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a12:	6979      	ldr	r1, [r7, #20]
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	e841 2300 	strex	r3, r2, [r1]
 8004a1a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1e5      	bne.n	80049ee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2220      	movs	r2, #32
 8004a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a30:	bf00      	nop
 8004a32:	3754      	adds	r7, #84	; 0x54
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f7ff ff1e 	bl	8004898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a5c:	bf00      	nop
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b21      	cmp	r3, #33	; 0x21
 8004a76:	d13e      	bne.n	8004af6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a80:	d114      	bne.n	8004aac <UART_Transmit_IT+0x48>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d110      	bne.n	8004aac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	881b      	ldrh	r3, [r3, #0]
 8004a94:	461a      	mov	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a9e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	1c9a      	adds	r2, r3, #2
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	621a      	str	r2, [r3, #32]
 8004aaa:	e008      	b.n	8004abe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	1c59      	adds	r1, r3, #1
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6211      	str	r1, [r2, #32]
 8004ab6:	781a      	ldrb	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	4619      	mov	r1, r3
 8004acc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10f      	bne.n	8004af2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68da      	ldr	r2, [r3, #12]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ae0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68da      	ldr	r2, [r3, #12]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004af0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004af2:	2300      	movs	r3, #0
 8004af4:	e000      	b.n	8004af8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004af6:	2302      	movs	r3, #2
  }
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3714      	adds	r7, #20
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b1a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2220      	movs	r2, #32
 8004b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7ff fea3 	bl	8004870 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b08c      	sub	sp, #48	; 0x30
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b22      	cmp	r3, #34	; 0x22
 8004b46:	f040 80ae 	bne.w	8004ca6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b52:	d117      	bne.n	8004b84 <UART_Receive_IT+0x50>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d113      	bne.n	8004b84 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b64:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b76:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7c:	1c9a      	adds	r2, r3, #2
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	629a      	str	r2, [r3, #40]	; 0x28
 8004b82:	e026      	b.n	8004bd2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b88:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b96:	d007      	beq.n	8004ba8 <UART_Receive_IT+0x74>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10a      	bne.n	8004bb6 <UART_Receive_IT+0x82>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d106      	bne.n	8004bb6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb2:	701a      	strb	r2, [r3, #0]
 8004bb4:	e008      	b.n	8004bc8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bcc:	1c5a      	adds	r2, r3, #1
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	4619      	mov	r1, r3
 8004be0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d15d      	bne.n	8004ca2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68da      	ldr	r2, [r3, #12]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 0220 	bic.w	r2, r2, #32
 8004bf4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68da      	ldr	r2, [r3, #12]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	695a      	ldr	r2, [r3, #20]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0201 	bic.w	r2, r2, #1
 8004c14:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d135      	bne.n	8004c98 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	330c      	adds	r3, #12
 8004c38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	e853 3f00 	ldrex	r3, [r3]
 8004c40:	613b      	str	r3, [r7, #16]
   return(result);
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f023 0310 	bic.w	r3, r3, #16
 8004c48:	627b      	str	r3, [r7, #36]	; 0x24
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	330c      	adds	r3, #12
 8004c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c52:	623a      	str	r2, [r7, #32]
 8004c54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c56:	69f9      	ldr	r1, [r7, #28]
 8004c58:	6a3a      	ldr	r2, [r7, #32]
 8004c5a:	e841 2300 	strex	r3, r2, [r1]
 8004c5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1e5      	bne.n	8004c32 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0310 	and.w	r3, r3, #16
 8004c70:	2b10      	cmp	r3, #16
 8004c72:	d10a      	bne.n	8004c8a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c74:	2300      	movs	r3, #0
 8004c76:	60fb      	str	r3, [r7, #12]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c8e:	4619      	mov	r1, r3
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7ff fe0b 	bl	80048ac <HAL_UARTEx_RxEventCallback>
 8004c96:	e002      	b.n	8004c9e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7ff fdf3 	bl	8004884 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	e002      	b.n	8004ca8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	e000      	b.n	8004ca8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004ca6:	2302      	movs	r3, #2
  }
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3730      	adds	r7, #48	; 0x30
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cb4:	b0c0      	sub	sp, #256	; 0x100
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ccc:	68d9      	ldr	r1, [r3, #12]
 8004cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	ea40 0301 	orr.w	r3, r0, r1
 8004cd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d08:	f021 010c 	bic.w	r1, r1, #12
 8004d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d16:	430b      	orrs	r3, r1
 8004d18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d2a:	6999      	ldr	r1, [r3, #24]
 8004d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	ea40 0301 	orr.w	r3, r0, r1
 8004d36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	4b8f      	ldr	r3, [pc, #572]	; (8004f7c <UART_SetConfig+0x2cc>)
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d005      	beq.n	8004d50 <UART_SetConfig+0xa0>
 8004d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	4b8d      	ldr	r3, [pc, #564]	; (8004f80 <UART_SetConfig+0x2d0>)
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d104      	bne.n	8004d5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d50:	f7fe fd8c 	bl	800386c <HAL_RCC_GetPCLK2Freq>
 8004d54:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d58:	e003      	b.n	8004d62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d5a:	f7fe fd73 	bl	8003844 <HAL_RCC_GetPCLK1Freq>
 8004d5e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d66:	69db      	ldr	r3, [r3, #28]
 8004d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d6c:	f040 810c 	bne.w	8004f88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d74:	2200      	movs	r2, #0
 8004d76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d7a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d82:	4622      	mov	r2, r4
 8004d84:	462b      	mov	r3, r5
 8004d86:	1891      	adds	r1, r2, r2
 8004d88:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d8a:	415b      	adcs	r3, r3
 8004d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d92:	4621      	mov	r1, r4
 8004d94:	eb12 0801 	adds.w	r8, r2, r1
 8004d98:	4629      	mov	r1, r5
 8004d9a:	eb43 0901 	adc.w	r9, r3, r1
 8004d9e:	f04f 0200 	mov.w	r2, #0
 8004da2:	f04f 0300 	mov.w	r3, #0
 8004da6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004daa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004db2:	4690      	mov	r8, r2
 8004db4:	4699      	mov	r9, r3
 8004db6:	4623      	mov	r3, r4
 8004db8:	eb18 0303 	adds.w	r3, r8, r3
 8004dbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004dc0:	462b      	mov	r3, r5
 8004dc2:	eb49 0303 	adc.w	r3, r9, r3
 8004dc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004dd6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004dda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004dde:	460b      	mov	r3, r1
 8004de0:	18db      	adds	r3, r3, r3
 8004de2:	653b      	str	r3, [r7, #80]	; 0x50
 8004de4:	4613      	mov	r3, r2
 8004de6:	eb42 0303 	adc.w	r3, r2, r3
 8004dea:	657b      	str	r3, [r7, #84]	; 0x54
 8004dec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004df0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004df4:	f7fb f9fa 	bl	80001ec <__aeabi_uldivmod>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4b61      	ldr	r3, [pc, #388]	; (8004f84 <UART_SetConfig+0x2d4>)
 8004dfe:	fba3 2302 	umull	r2, r3, r3, r2
 8004e02:	095b      	lsrs	r3, r3, #5
 8004e04:	011c      	lsls	r4, r3, #4
 8004e06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e10:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e18:	4642      	mov	r2, r8
 8004e1a:	464b      	mov	r3, r9
 8004e1c:	1891      	adds	r1, r2, r2
 8004e1e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e20:	415b      	adcs	r3, r3
 8004e22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e28:	4641      	mov	r1, r8
 8004e2a:	eb12 0a01 	adds.w	sl, r2, r1
 8004e2e:	4649      	mov	r1, r9
 8004e30:	eb43 0b01 	adc.w	fp, r3, r1
 8004e34:	f04f 0200 	mov.w	r2, #0
 8004e38:	f04f 0300 	mov.w	r3, #0
 8004e3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e48:	4692      	mov	sl, r2
 8004e4a:	469b      	mov	fp, r3
 8004e4c:	4643      	mov	r3, r8
 8004e4e:	eb1a 0303 	adds.w	r3, sl, r3
 8004e52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e56:	464b      	mov	r3, r9
 8004e58:	eb4b 0303 	adc.w	r3, fp, r3
 8004e5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e6c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e74:	460b      	mov	r3, r1
 8004e76:	18db      	adds	r3, r3, r3
 8004e78:	643b      	str	r3, [r7, #64]	; 0x40
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	eb42 0303 	adc.w	r3, r2, r3
 8004e80:	647b      	str	r3, [r7, #68]	; 0x44
 8004e82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004e8a:	f7fb f9af 	bl	80001ec <__aeabi_uldivmod>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	460b      	mov	r3, r1
 8004e92:	4611      	mov	r1, r2
 8004e94:	4b3b      	ldr	r3, [pc, #236]	; (8004f84 <UART_SetConfig+0x2d4>)
 8004e96:	fba3 2301 	umull	r2, r3, r3, r1
 8004e9a:	095b      	lsrs	r3, r3, #5
 8004e9c:	2264      	movs	r2, #100	; 0x64
 8004e9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ea2:	1acb      	subs	r3, r1, r3
 8004ea4:	00db      	lsls	r3, r3, #3
 8004ea6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004eaa:	4b36      	ldr	r3, [pc, #216]	; (8004f84 <UART_SetConfig+0x2d4>)
 8004eac:	fba3 2302 	umull	r2, r3, r3, r2
 8004eb0:	095b      	lsrs	r3, r3, #5
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004eb8:	441c      	add	r4, r3
 8004eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ec4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ec8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ecc:	4642      	mov	r2, r8
 8004ece:	464b      	mov	r3, r9
 8004ed0:	1891      	adds	r1, r2, r2
 8004ed2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ed4:	415b      	adcs	r3, r3
 8004ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ed8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004edc:	4641      	mov	r1, r8
 8004ede:	1851      	adds	r1, r2, r1
 8004ee0:	6339      	str	r1, [r7, #48]	; 0x30
 8004ee2:	4649      	mov	r1, r9
 8004ee4:	414b      	adcs	r3, r1
 8004ee6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ee8:	f04f 0200 	mov.w	r2, #0
 8004eec:	f04f 0300 	mov.w	r3, #0
 8004ef0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ef4:	4659      	mov	r1, fp
 8004ef6:	00cb      	lsls	r3, r1, #3
 8004ef8:	4651      	mov	r1, sl
 8004efa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004efe:	4651      	mov	r1, sl
 8004f00:	00ca      	lsls	r2, r1, #3
 8004f02:	4610      	mov	r0, r2
 8004f04:	4619      	mov	r1, r3
 8004f06:	4603      	mov	r3, r0
 8004f08:	4642      	mov	r2, r8
 8004f0a:	189b      	adds	r3, r3, r2
 8004f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f10:	464b      	mov	r3, r9
 8004f12:	460a      	mov	r2, r1
 8004f14:	eb42 0303 	adc.w	r3, r2, r3
 8004f18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f28:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f30:	460b      	mov	r3, r1
 8004f32:	18db      	adds	r3, r3, r3
 8004f34:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f36:	4613      	mov	r3, r2
 8004f38:	eb42 0303 	adc.w	r3, r2, r3
 8004f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f46:	f7fb f951 	bl	80001ec <__aeabi_uldivmod>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	4b0d      	ldr	r3, [pc, #52]	; (8004f84 <UART_SetConfig+0x2d4>)
 8004f50:	fba3 1302 	umull	r1, r3, r3, r2
 8004f54:	095b      	lsrs	r3, r3, #5
 8004f56:	2164      	movs	r1, #100	; 0x64
 8004f58:	fb01 f303 	mul.w	r3, r1, r3
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	00db      	lsls	r3, r3, #3
 8004f60:	3332      	adds	r3, #50	; 0x32
 8004f62:	4a08      	ldr	r2, [pc, #32]	; (8004f84 <UART_SetConfig+0x2d4>)
 8004f64:	fba2 2303 	umull	r2, r3, r2, r3
 8004f68:	095b      	lsrs	r3, r3, #5
 8004f6a:	f003 0207 	and.w	r2, r3, #7
 8004f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4422      	add	r2, r4
 8004f76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f78:	e106      	b.n	8005188 <UART_SetConfig+0x4d8>
 8004f7a:	bf00      	nop
 8004f7c:	40011000 	.word	0x40011000
 8004f80:	40011400 	.word	0x40011400
 8004f84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004f96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004f9a:	4642      	mov	r2, r8
 8004f9c:	464b      	mov	r3, r9
 8004f9e:	1891      	adds	r1, r2, r2
 8004fa0:	6239      	str	r1, [r7, #32]
 8004fa2:	415b      	adcs	r3, r3
 8004fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004faa:	4641      	mov	r1, r8
 8004fac:	1854      	adds	r4, r2, r1
 8004fae:	4649      	mov	r1, r9
 8004fb0:	eb43 0501 	adc.w	r5, r3, r1
 8004fb4:	f04f 0200 	mov.w	r2, #0
 8004fb8:	f04f 0300 	mov.w	r3, #0
 8004fbc:	00eb      	lsls	r3, r5, #3
 8004fbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fc2:	00e2      	lsls	r2, r4, #3
 8004fc4:	4614      	mov	r4, r2
 8004fc6:	461d      	mov	r5, r3
 8004fc8:	4643      	mov	r3, r8
 8004fca:	18e3      	adds	r3, r4, r3
 8004fcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004fd0:	464b      	mov	r3, r9
 8004fd2:	eb45 0303 	adc.w	r3, r5, r3
 8004fd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004fe6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004fea:	f04f 0200 	mov.w	r2, #0
 8004fee:	f04f 0300 	mov.w	r3, #0
 8004ff2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004ff6:	4629      	mov	r1, r5
 8004ff8:	008b      	lsls	r3, r1, #2
 8004ffa:	4621      	mov	r1, r4
 8004ffc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005000:	4621      	mov	r1, r4
 8005002:	008a      	lsls	r2, r1, #2
 8005004:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005008:	f7fb f8f0 	bl	80001ec <__aeabi_uldivmod>
 800500c:	4602      	mov	r2, r0
 800500e:	460b      	mov	r3, r1
 8005010:	4b60      	ldr	r3, [pc, #384]	; (8005194 <UART_SetConfig+0x4e4>)
 8005012:	fba3 2302 	umull	r2, r3, r3, r2
 8005016:	095b      	lsrs	r3, r3, #5
 8005018:	011c      	lsls	r4, r3, #4
 800501a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800501e:	2200      	movs	r2, #0
 8005020:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005024:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005028:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800502c:	4642      	mov	r2, r8
 800502e:	464b      	mov	r3, r9
 8005030:	1891      	adds	r1, r2, r2
 8005032:	61b9      	str	r1, [r7, #24]
 8005034:	415b      	adcs	r3, r3
 8005036:	61fb      	str	r3, [r7, #28]
 8005038:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800503c:	4641      	mov	r1, r8
 800503e:	1851      	adds	r1, r2, r1
 8005040:	6139      	str	r1, [r7, #16]
 8005042:	4649      	mov	r1, r9
 8005044:	414b      	adcs	r3, r1
 8005046:	617b      	str	r3, [r7, #20]
 8005048:	f04f 0200 	mov.w	r2, #0
 800504c:	f04f 0300 	mov.w	r3, #0
 8005050:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005054:	4659      	mov	r1, fp
 8005056:	00cb      	lsls	r3, r1, #3
 8005058:	4651      	mov	r1, sl
 800505a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800505e:	4651      	mov	r1, sl
 8005060:	00ca      	lsls	r2, r1, #3
 8005062:	4610      	mov	r0, r2
 8005064:	4619      	mov	r1, r3
 8005066:	4603      	mov	r3, r0
 8005068:	4642      	mov	r2, r8
 800506a:	189b      	adds	r3, r3, r2
 800506c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005070:	464b      	mov	r3, r9
 8005072:	460a      	mov	r2, r1
 8005074:	eb42 0303 	adc.w	r3, r2, r3
 8005078:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800507c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	67bb      	str	r3, [r7, #120]	; 0x78
 8005086:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005088:	f04f 0200 	mov.w	r2, #0
 800508c:	f04f 0300 	mov.w	r3, #0
 8005090:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005094:	4649      	mov	r1, r9
 8005096:	008b      	lsls	r3, r1, #2
 8005098:	4641      	mov	r1, r8
 800509a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800509e:	4641      	mov	r1, r8
 80050a0:	008a      	lsls	r2, r1, #2
 80050a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80050a6:	f7fb f8a1 	bl	80001ec <__aeabi_uldivmod>
 80050aa:	4602      	mov	r2, r0
 80050ac:	460b      	mov	r3, r1
 80050ae:	4611      	mov	r1, r2
 80050b0:	4b38      	ldr	r3, [pc, #224]	; (8005194 <UART_SetConfig+0x4e4>)
 80050b2:	fba3 2301 	umull	r2, r3, r3, r1
 80050b6:	095b      	lsrs	r3, r3, #5
 80050b8:	2264      	movs	r2, #100	; 0x64
 80050ba:	fb02 f303 	mul.w	r3, r2, r3
 80050be:	1acb      	subs	r3, r1, r3
 80050c0:	011b      	lsls	r3, r3, #4
 80050c2:	3332      	adds	r3, #50	; 0x32
 80050c4:	4a33      	ldr	r2, [pc, #204]	; (8005194 <UART_SetConfig+0x4e4>)
 80050c6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ca:	095b      	lsrs	r3, r3, #5
 80050cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050d0:	441c      	add	r4, r3
 80050d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050d6:	2200      	movs	r2, #0
 80050d8:	673b      	str	r3, [r7, #112]	; 0x70
 80050da:	677a      	str	r2, [r7, #116]	; 0x74
 80050dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80050e0:	4642      	mov	r2, r8
 80050e2:	464b      	mov	r3, r9
 80050e4:	1891      	adds	r1, r2, r2
 80050e6:	60b9      	str	r1, [r7, #8]
 80050e8:	415b      	adcs	r3, r3
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050f0:	4641      	mov	r1, r8
 80050f2:	1851      	adds	r1, r2, r1
 80050f4:	6039      	str	r1, [r7, #0]
 80050f6:	4649      	mov	r1, r9
 80050f8:	414b      	adcs	r3, r1
 80050fa:	607b      	str	r3, [r7, #4]
 80050fc:	f04f 0200 	mov.w	r2, #0
 8005100:	f04f 0300 	mov.w	r3, #0
 8005104:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005108:	4659      	mov	r1, fp
 800510a:	00cb      	lsls	r3, r1, #3
 800510c:	4651      	mov	r1, sl
 800510e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005112:	4651      	mov	r1, sl
 8005114:	00ca      	lsls	r2, r1, #3
 8005116:	4610      	mov	r0, r2
 8005118:	4619      	mov	r1, r3
 800511a:	4603      	mov	r3, r0
 800511c:	4642      	mov	r2, r8
 800511e:	189b      	adds	r3, r3, r2
 8005120:	66bb      	str	r3, [r7, #104]	; 0x68
 8005122:	464b      	mov	r3, r9
 8005124:	460a      	mov	r2, r1
 8005126:	eb42 0303 	adc.w	r3, r2, r3
 800512a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800512c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	663b      	str	r3, [r7, #96]	; 0x60
 8005136:	667a      	str	r2, [r7, #100]	; 0x64
 8005138:	f04f 0200 	mov.w	r2, #0
 800513c:	f04f 0300 	mov.w	r3, #0
 8005140:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005144:	4649      	mov	r1, r9
 8005146:	008b      	lsls	r3, r1, #2
 8005148:	4641      	mov	r1, r8
 800514a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800514e:	4641      	mov	r1, r8
 8005150:	008a      	lsls	r2, r1, #2
 8005152:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005156:	f7fb f849 	bl	80001ec <__aeabi_uldivmod>
 800515a:	4602      	mov	r2, r0
 800515c:	460b      	mov	r3, r1
 800515e:	4b0d      	ldr	r3, [pc, #52]	; (8005194 <UART_SetConfig+0x4e4>)
 8005160:	fba3 1302 	umull	r1, r3, r3, r2
 8005164:	095b      	lsrs	r3, r3, #5
 8005166:	2164      	movs	r1, #100	; 0x64
 8005168:	fb01 f303 	mul.w	r3, r1, r3
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	011b      	lsls	r3, r3, #4
 8005170:	3332      	adds	r3, #50	; 0x32
 8005172:	4a08      	ldr	r2, [pc, #32]	; (8005194 <UART_SetConfig+0x4e4>)
 8005174:	fba2 2303 	umull	r2, r3, r2, r3
 8005178:	095b      	lsrs	r3, r3, #5
 800517a:	f003 020f 	and.w	r2, r3, #15
 800517e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4422      	add	r2, r4
 8005186:	609a      	str	r2, [r3, #8]
}
 8005188:	bf00      	nop
 800518a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800518e:	46bd      	mov	sp, r7
 8005190:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005194:	51eb851f 	.word	0x51eb851f

08005198 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005198:	b084      	sub	sp, #16
 800519a:	b580      	push	{r7, lr}
 800519c:	b084      	sub	sp, #16
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
 80051a2:	f107 001c 	add.w	r0, r7, #28
 80051a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051aa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d123      	bne.n	80051fa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80051c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80051da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d105      	bne.n	80051ee <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 faa0 	bl	8005734 <USB_CoreReset>
 80051f4:	4603      	mov	r3, r0
 80051f6:	73fb      	strb	r3, [r7, #15]
 80051f8:	e01b      	b.n	8005232 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fa94 	bl	8005734 <USB_CoreReset>
 800520c:	4603      	mov	r3, r0
 800520e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005210:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005214:	2b00      	cmp	r3, #0
 8005216:	d106      	bne.n	8005226 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	639a      	str	r2, [r3, #56]	; 0x38
 8005224:	e005      	b.n	8005232 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005232:	7fbb      	ldrb	r3, [r7, #30]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d10b      	bne.n	8005250 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f043 0206 	orr.w	r2, r3, #6
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f043 0220 	orr.w	r2, r3, #32
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005250:	7bfb      	ldrb	r3, [r7, #15]
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800525c:	b004      	add	sp, #16
 800525e:	4770      	bx	lr

08005260 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f023 0201 	bic.w	r2, r3, #1
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b084      	sub	sp, #16
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
 800528a:	460b      	mov	r3, r1
 800528c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800528e:	2300      	movs	r3, #0
 8005290:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800529e:	78fb      	ldrb	r3, [r7, #3]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d115      	bne.n	80052d0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80052b0:	200a      	movs	r0, #10
 80052b2:	f7fc fe61 	bl	8001f78 <HAL_Delay>
      ms += 10U;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	330a      	adds	r3, #10
 80052ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 fa2b 	bl	8005718 <USB_GetMode>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d01e      	beq.n	8005306 <USB_SetCurrentMode+0x84>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2bc7      	cmp	r3, #199	; 0xc7
 80052cc:	d9f0      	bls.n	80052b0 <USB_SetCurrentMode+0x2e>
 80052ce:	e01a      	b.n	8005306 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80052d0:	78fb      	ldrb	r3, [r7, #3]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d115      	bne.n	8005302 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80052e2:	200a      	movs	r0, #10
 80052e4:	f7fc fe48 	bl	8001f78 <HAL_Delay>
      ms += 10U;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	330a      	adds	r3, #10
 80052ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 fa12 	bl	8005718 <USB_GetMode>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d005      	beq.n	8005306 <USB_SetCurrentMode+0x84>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2bc7      	cmp	r3, #199	; 0xc7
 80052fe:	d9f0      	bls.n	80052e2 <USB_SetCurrentMode+0x60>
 8005300:	e001      	b.n	8005306 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e005      	b.n	8005312 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2bc8      	cmp	r3, #200	; 0xc8
 800530a:	d101      	bne.n	8005310 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e000      	b.n	8005312 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
	...

0800531c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800531c:	b084      	sub	sp, #16
 800531e:	b580      	push	{r7, lr}
 8005320:	b086      	sub	sp, #24
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
 8005326:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800532a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800532e:	2300      	movs	r3, #0
 8005330:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005336:	2300      	movs	r3, #0
 8005338:	613b      	str	r3, [r7, #16]
 800533a:	e009      	b.n	8005350 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	3340      	adds	r3, #64	; 0x40
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	4413      	add	r3, r2
 8005346:	2200      	movs	r2, #0
 8005348:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	3301      	adds	r3, #1
 800534e:	613b      	str	r3, [r7, #16]
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	2b0e      	cmp	r3, #14
 8005354:	d9f2      	bls.n	800533c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005356:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800535a:	2b00      	cmp	r3, #0
 800535c:	d11c      	bne.n	8005398 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800536c:	f043 0302 	orr.w	r3, r3, #2
 8005370:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005376:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005382:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	639a      	str	r2, [r3, #56]	; 0x38
 8005396:	e00b      	b.n	80053b0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053b6:	461a      	mov	r2, r3
 80053b8:	2300      	movs	r3, #0
 80053ba:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053bc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d10d      	bne.n	80053e0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80053c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d104      	bne.n	80053d6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80053cc:	2100      	movs	r1, #0
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f968 	bl	80056a4 <USB_SetDevSpeed>
 80053d4:	e008      	b.n	80053e8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80053d6:	2101      	movs	r1, #1
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f963 	bl	80056a4 <USB_SetDevSpeed>
 80053de:	e003      	b.n	80053e8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80053e0:	2103      	movs	r1, #3
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f95e 	bl	80056a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80053e8:	2110      	movs	r1, #16
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f8fa 	bl	80055e4 <USB_FlushTxFifo>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d001      	beq.n	80053fa <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f924 	bl	8005648 <USB_FlushRxFifo>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005410:	461a      	mov	r2, r3
 8005412:	2300      	movs	r3, #0
 8005414:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800541c:	461a      	mov	r2, r3
 800541e:	2300      	movs	r3, #0
 8005420:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005428:	461a      	mov	r2, r3
 800542a:	2300      	movs	r3, #0
 800542c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800542e:	2300      	movs	r3, #0
 8005430:	613b      	str	r3, [r7, #16]
 8005432:	e043      	b.n	80054bc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	4413      	add	r3, r2
 800543c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005446:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800544a:	d118      	bne.n	800547e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10a      	bne.n	8005468 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	015a      	lsls	r2, r3, #5
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	4413      	add	r3, r2
 800545a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800545e:	461a      	mov	r2, r3
 8005460:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005464:	6013      	str	r3, [r2, #0]
 8005466:	e013      	b.n	8005490 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	015a      	lsls	r2, r3, #5
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	4413      	add	r3, r2
 8005470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005474:	461a      	mov	r2, r3
 8005476:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800547a:	6013      	str	r3, [r2, #0]
 800547c:	e008      	b.n	8005490 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	4413      	add	r3, r2
 8005486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800548a:	461a      	mov	r2, r3
 800548c:	2300      	movs	r3, #0
 800548e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	015a      	lsls	r2, r3, #5
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	4413      	add	r3, r2
 8005498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549c:	461a      	mov	r2, r3
 800549e:	2300      	movs	r3, #0
 80054a0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	015a      	lsls	r2, r3, #5
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	4413      	add	r3, r2
 80054aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ae:	461a      	mov	r2, r3
 80054b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	3301      	adds	r3, #1
 80054ba:	613b      	str	r3, [r7, #16]
 80054bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80054c0:	461a      	mov	r2, r3
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d3b5      	bcc.n	8005434 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054c8:	2300      	movs	r3, #0
 80054ca:	613b      	str	r3, [r7, #16]
 80054cc:	e043      	b.n	8005556 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	015a      	lsls	r2, r3, #5
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	4413      	add	r3, r2
 80054d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054e4:	d118      	bne.n	8005518 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10a      	bne.n	8005502 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f8:	461a      	mov	r2, r3
 80054fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054fe:	6013      	str	r3, [r2, #0]
 8005500:	e013      	b.n	800552a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	015a      	lsls	r2, r3, #5
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	4413      	add	r3, r2
 800550a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800550e:	461a      	mov	r2, r3
 8005510:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005514:	6013      	str	r3, [r2, #0]
 8005516:	e008      	b.n	800552a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	4413      	add	r3, r2
 8005520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005524:	461a      	mov	r2, r3
 8005526:	2300      	movs	r3, #0
 8005528:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	4413      	add	r3, r2
 8005532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005536:	461a      	mov	r2, r3
 8005538:	2300      	movs	r3, #0
 800553a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4413      	add	r3, r2
 8005544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005548:	461a      	mov	r2, r3
 800554a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800554e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	3301      	adds	r3, #1
 8005554:	613b      	str	r3, [r7, #16]
 8005556:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800555a:	461a      	mov	r2, r3
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	4293      	cmp	r3, r2
 8005560:	d3b5      	bcc.n	80054ce <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005570:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005574:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005582:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005584:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005588:	2b00      	cmp	r3, #0
 800558a:	d105      	bne.n	8005598 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	f043 0210 	orr.w	r2, r3, #16
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	699a      	ldr	r2, [r3, #24]
 800559c:	4b10      	ldr	r3, [pc, #64]	; (80055e0 <USB_DevInit+0x2c4>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80055a4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d005      	beq.n	80055b8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	f043 0208 	orr.w	r2, r3, #8
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80055b8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d107      	bne.n	80055d0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055c8:	f043 0304 	orr.w	r3, r3, #4
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80055d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3718      	adds	r7, #24
 80055d6:	46bd      	mov	sp, r7
 80055d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055dc:	b004      	add	sp, #16
 80055de:	4770      	bx	lr
 80055e0:	803c3800 	.word	0x803c3800

080055e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	3301      	adds	r3, #1
 80055f6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80055fe:	d901      	bls.n	8005604 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e01b      	b.n	800563c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	2b00      	cmp	r3, #0
 800560a:	daf2      	bge.n	80055f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800560c:	2300      	movs	r3, #0
 800560e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	019b      	lsls	r3, r3, #6
 8005614:	f043 0220 	orr.w	r2, r3, #32
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	3301      	adds	r3, #1
 8005620:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005628:	d901      	bls.n	800562e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e006      	b.n	800563c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	f003 0320 	and.w	r3, r3, #32
 8005636:	2b20      	cmp	r3, #32
 8005638:	d0f0      	beq.n	800561c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3714      	adds	r7, #20
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005650:	2300      	movs	r3, #0
 8005652:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	3301      	adds	r3, #1
 8005658:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005660:	d901      	bls.n	8005666 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e018      	b.n	8005698 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	2b00      	cmp	r3, #0
 800566c:	daf2      	bge.n	8005654 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800566e:	2300      	movs	r3, #0
 8005670:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2210      	movs	r2, #16
 8005676:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	3301      	adds	r3, #1
 800567c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005684:	d901      	bls.n	800568a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e006      	b.n	8005698 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	f003 0310 	and.w	r3, r3, #16
 8005692:	2b10      	cmp	r3, #16
 8005694:	d0f0      	beq.n	8005678 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3714      	adds	r7, #20
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	460b      	mov	r3, r1
 80056ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	78fb      	ldrb	r3, [r7, #3]
 80056be:	68f9      	ldr	r1, [r7, #12]
 80056c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056c4:	4313      	orrs	r3, r2
 80056c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b085      	sub	sp, #20
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80056f0:	f023 0303 	bic.w	r3, r3, #3
 80056f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005704:	f043 0302 	orr.w	r3, r3, #2
 8005708:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3714      	adds	r7, #20
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	695b      	ldr	r3, [r3, #20]
 8005724:	f003 0301 	and.w	r3, r3, #1
}
 8005728:	4618      	mov	r0, r3
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800573c:	2300      	movs	r3, #0
 800573e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	3301      	adds	r3, #1
 8005744:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800574c:	d901      	bls.n	8005752 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e01b      	b.n	800578a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	2b00      	cmp	r3, #0
 8005758:	daf2      	bge.n	8005740 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800575a:	2300      	movs	r3, #0
 800575c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	f043 0201 	orr.w	r2, r3, #1
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	3301      	adds	r3, #1
 800576e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005776:	d901      	bls.n	800577c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e006      	b.n	800578a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	f003 0301 	and.w	r3, r3, #1
 8005784:	2b01      	cmp	r3, #1
 8005786:	d0f0      	beq.n	800576a <USB_CoreReset+0x36>

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr

08005796 <memset>:
 8005796:	4402      	add	r2, r0
 8005798:	4603      	mov	r3, r0
 800579a:	4293      	cmp	r3, r2
 800579c:	d100      	bne.n	80057a0 <memset+0xa>
 800579e:	4770      	bx	lr
 80057a0:	f803 1b01 	strb.w	r1, [r3], #1
 80057a4:	e7f9      	b.n	800579a <memset+0x4>
	...

080057a8 <__libc_init_array>:
 80057a8:	b570      	push	{r4, r5, r6, lr}
 80057aa:	4d0d      	ldr	r5, [pc, #52]	; (80057e0 <__libc_init_array+0x38>)
 80057ac:	4c0d      	ldr	r4, [pc, #52]	; (80057e4 <__libc_init_array+0x3c>)
 80057ae:	1b64      	subs	r4, r4, r5
 80057b0:	10a4      	asrs	r4, r4, #2
 80057b2:	2600      	movs	r6, #0
 80057b4:	42a6      	cmp	r6, r4
 80057b6:	d109      	bne.n	80057cc <__libc_init_array+0x24>
 80057b8:	4d0b      	ldr	r5, [pc, #44]	; (80057e8 <__libc_init_array+0x40>)
 80057ba:	4c0c      	ldr	r4, [pc, #48]	; (80057ec <__libc_init_array+0x44>)
 80057bc:	f000 f826 	bl	800580c <_init>
 80057c0:	1b64      	subs	r4, r4, r5
 80057c2:	10a4      	asrs	r4, r4, #2
 80057c4:	2600      	movs	r6, #0
 80057c6:	42a6      	cmp	r6, r4
 80057c8:	d105      	bne.n	80057d6 <__libc_init_array+0x2e>
 80057ca:	bd70      	pop	{r4, r5, r6, pc}
 80057cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80057d0:	4798      	blx	r3
 80057d2:	3601      	adds	r6, #1
 80057d4:	e7ee      	b.n	80057b4 <__libc_init_array+0xc>
 80057d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80057da:	4798      	blx	r3
 80057dc:	3601      	adds	r6, #1
 80057de:	e7f2      	b.n	80057c6 <__libc_init_array+0x1e>
 80057e0:	08005a44 	.word	0x08005a44
 80057e4:	08005a44 	.word	0x08005a44
 80057e8:	08005a44 	.word	0x08005a44
 80057ec:	08005a48 	.word	0x08005a48

080057f0 <memcpy>:
 80057f0:	440a      	add	r2, r1
 80057f2:	4291      	cmp	r1, r2
 80057f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80057f8:	d100      	bne.n	80057fc <memcpy+0xc>
 80057fa:	4770      	bx	lr
 80057fc:	b510      	push	{r4, lr}
 80057fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005802:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005806:	4291      	cmp	r1, r2
 8005808:	d1f9      	bne.n	80057fe <memcpy+0xe>
 800580a:	bd10      	pop	{r4, pc}

0800580c <_init>:
 800580c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800580e:	bf00      	nop
 8005810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005812:	bc08      	pop	{r3}
 8005814:	469e      	mov	lr, r3
 8005816:	4770      	bx	lr

08005818 <_fini>:
 8005818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581a:	bf00      	nop
 800581c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800581e:	bc08      	pop	{r3}
 8005820:	469e      	mov	lr, r3
 8005822:	4770      	bx	lr
